/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["@neutron-org/neutron"] || ($protobuf.roots["@neutron-org/neutron"] = {});
    
    $root.neutron = (function() {
    
        /**
         * Namespace neutron.
         * @exports neutron
         * @namespace
         */
        var neutron = {};
    
        neutron.contractmanager = (function() {
    
            /**
             * Namespace contractmanager.
             * @memberof neutron
             * @namespace
             */
            var contractmanager = {};
    
            contractmanager.Msg = (function() {
    
                /**
                 * Constructs a new Msg service.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;
    
                /**
                 * Callback as used by {@link neutron.contractmanager.Msg#updateParams}.
                 * @memberof neutron.contractmanager.Msg
                 * @typedef UpdateParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.contractmanager.MsgUpdateParamsResponse} [response] MsgUpdateParamsResponse
                 */
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.contractmanager.Msg
                 * @instance
                 * @param {neutron.contractmanager.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @param {neutron.contractmanager.Msg.UpdateParamsCallback} callback Node-style callback called with the error, if any, and MsgUpdateParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.updateParams = function updateParams(request, callback) {
                    return this.rpcCall(updateParams, $root.neutron.contractmanager.MsgUpdateParams, $root.neutron.contractmanager.MsgUpdateParamsResponse, request, callback);
                }, "name", { value: "UpdateParams" });
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.contractmanager.Msg
                 * @instance
                 * @param {neutron.contractmanager.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @returns {Promise<neutron.contractmanager.MsgUpdateParamsResponse>} Promise
                 * @variation 2
                 */
    
                return Msg;
            })();
    
            contractmanager.MsgUpdateParams = (function() {
    
                /**
                 * Properties of a MsgUpdateParams.
                 * @memberof neutron.contractmanager
                 * @interface IMsgUpdateParams
                 * @property {string|null} [authority] MsgUpdateParams authority
                 * @property {neutron.contractmanager.IParams|null} [params] MsgUpdateParams params
                 */
    
                /**
                 * Constructs a new MsgUpdateParams.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a MsgUpdateParams.
                 * @implements IMsgUpdateParams
                 * @constructor
                 * @param {neutron.contractmanager.IMsgUpdateParams=} [properties] Properties to set
                 */
                function MsgUpdateParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgUpdateParams authority.
                 * @member {string} authority
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.authority = "";
    
                /**
                 * MsgUpdateParams params.
                 * @member {neutron.contractmanager.IParams|null|undefined} params
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.params = null;
    
                /**
                 * Encodes the specified MsgUpdateParams message. Does not implicitly {@link neutron.contractmanager.MsgUpdateParams.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @static
                 * @param {neutron.contractmanager.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.authority);
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.contractmanager.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParams message, length delimited. Does not implicitly {@link neutron.contractmanager.MsgUpdateParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @static
                 * @param {neutron.contractmanager.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.contractmanager.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.MsgUpdateParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.authority = reader.string();
                            break;
                        case 2:
                            message.params = $root.neutron.contractmanager.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.contractmanager.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParams message.
                 * @function verify
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        if (!$util.isString(message.authority))
                            return "authority: string expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.contractmanager.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.contractmanager.MsgUpdateParams} MsgUpdateParams
                 */
                MsgUpdateParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.contractmanager.MsgUpdateParams)
                        return object;
                    var message = new $root.neutron.contractmanager.MsgUpdateParams();
                    if (object.authority != null)
                        message.authority = String(object.authority);
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.contractmanager.MsgUpdateParams.params: object expected");
                        message.params = $root.neutron.contractmanager.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @static
                 * @param {neutron.contractmanager.MsgUpdateParams} message MsgUpdateParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.authority = "";
                        object.params = null;
                    }
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        object.authority = message.authority;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.contractmanager.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this MsgUpdateParams to JSON.
                 * @function toJSON
                 * @memberof neutron.contractmanager.MsgUpdateParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParams;
            })();
    
            contractmanager.MsgUpdateParamsResponse = (function() {
    
                /**
                 * Properties of a MsgUpdateParamsResponse.
                 * @memberof neutron.contractmanager
                 * @interface IMsgUpdateParamsResponse
                 */
    
                /**
                 * Constructs a new MsgUpdateParamsResponse.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a MsgUpdateParamsResponse.
                 * @implements IMsgUpdateParamsResponse
                 * @constructor
                 * @param {neutron.contractmanager.IMsgUpdateParamsResponse=} [properties] Properties to set
                 */
                function MsgUpdateParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message. Does not implicitly {@link neutron.contractmanager.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.contractmanager.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.contractmanager.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message, length delimited. Does not implicitly {@link neutron.contractmanager.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.contractmanager.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.contractmanager.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.contractmanager.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.contractmanager.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.MsgUpdateParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.contractmanager.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.contractmanager.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParamsResponse message.
                 * @function verify
                 * @memberof neutron.contractmanager.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.contractmanager.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.contractmanager.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 */
                MsgUpdateParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.contractmanager.MsgUpdateParamsResponse)
                        return object;
                    return new $root.neutron.contractmanager.MsgUpdateParamsResponse();
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.contractmanager.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.contractmanager.MsgUpdateParamsResponse} message MsgUpdateParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParamsResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgUpdateParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.contractmanager.MsgUpdateParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParamsResponse;
            })();
    
            contractmanager.Params = (function() {
    
                /**
                 * Properties of a Params.
                 * @memberof neutron.contractmanager
                 * @interface IParams
                 */
    
                /**
                 * Constructs a new Params.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {neutron.contractmanager.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified Params message. Does not implicitly {@link neutron.contractmanager.Params.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.contractmanager.Params
                 * @static
                 * @param {neutron.contractmanager.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link neutron.contractmanager.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.contractmanager.Params
                 * @static
                 * @param {neutron.contractmanager.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.contractmanager.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.contractmanager.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.Params();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.contractmanager.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.contractmanager.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof neutron.contractmanager.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.contractmanager.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.contractmanager.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.contractmanager.Params)
                        return object;
                    return new $root.neutron.contractmanager.Params();
                };
    
                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.contractmanager.Params
                 * @static
                 * @param {neutron.contractmanager.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof neutron.contractmanager.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Params;
            })();
    
            contractmanager.Failure = (function() {
    
                /**
                 * Properties of a Failure.
                 * @memberof neutron.contractmanager
                 * @interface IFailure
                 * @property {string|null} [address] Failure address
                 * @property {Long|null} [id] Failure id
                 * @property {string|null} [ack_type] Failure ack_type
                 * @property {ibc.core.channel.v1.IPacket|null} [packet] Failure packet
                 * @property {ibc.core.channel.v1.IAcknowledgement|null} [ack] Failure ack
                 */
    
                /**
                 * Constructs a new Failure.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a Failure.
                 * @implements IFailure
                 * @constructor
                 * @param {neutron.contractmanager.IFailure=} [properties] Properties to set
                 */
                function Failure(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Failure address.
                 * @member {string} address
                 * @memberof neutron.contractmanager.Failure
                 * @instance
                 */
                Failure.prototype.address = "";
    
                /**
                 * Failure id.
                 * @member {Long} id
                 * @memberof neutron.contractmanager.Failure
                 * @instance
                 */
                Failure.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Failure ack_type.
                 * @member {string} ack_type
                 * @memberof neutron.contractmanager.Failure
                 * @instance
                 */
                Failure.prototype.ack_type = "";
    
                /**
                 * Failure packet.
                 * @member {ibc.core.channel.v1.IPacket|null|undefined} packet
                 * @memberof neutron.contractmanager.Failure
                 * @instance
                 */
                Failure.prototype.packet = null;
    
                /**
                 * Failure ack.
                 * @member {ibc.core.channel.v1.IAcknowledgement|null|undefined} ack
                 * @memberof neutron.contractmanager.Failure
                 * @instance
                 */
                Failure.prototype.ack = null;
    
                /**
                 * Encodes the specified Failure message. Does not implicitly {@link neutron.contractmanager.Failure.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.contractmanager.Failure
                 * @static
                 * @param {neutron.contractmanager.IFailure} message Failure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Failure.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.id);
                    if (message.ack_type != null && Object.hasOwnProperty.call(message, "ack_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.ack_type);
                    if (message.packet != null && Object.hasOwnProperty.call(message, "packet"))
                        $root.ibc.core.channel.v1.Packet.encode(message.packet, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.ack != null && Object.hasOwnProperty.call(message, "ack"))
                        $root.ibc.core.channel.v1.Acknowledgement.encode(message.ack, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Failure message, length delimited. Does not implicitly {@link neutron.contractmanager.Failure.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.contractmanager.Failure
                 * @static
                 * @param {neutron.contractmanager.IFailure} message Failure message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Failure.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Failure message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.contractmanager.Failure
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.contractmanager.Failure} Failure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Failure.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.Failure();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.id = reader.uint64();
                            break;
                        case 3:
                            message.ack_type = reader.string();
                            break;
                        case 4:
                            message.packet = $root.ibc.core.channel.v1.Packet.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.ack = $root.ibc.core.channel.v1.Acknowledgement.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Failure message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.contractmanager.Failure
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.contractmanager.Failure} Failure
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Failure.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Failure message.
                 * @function verify
                 * @memberof neutron.contractmanager.Failure
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Failure.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                            return "id: integer|Long expected";
                    if (message.ack_type != null && message.hasOwnProperty("ack_type"))
                        if (!$util.isString(message.ack_type))
                            return "ack_type: string expected";
                    if (message.packet != null && message.hasOwnProperty("packet")) {
                        var error = $root.ibc.core.channel.v1.Packet.verify(message.packet);
                        if (error)
                            return "packet." + error;
                    }
                    if (message.ack != null && message.hasOwnProperty("ack")) {
                        var error = $root.ibc.core.channel.v1.Acknowledgement.verify(message.ack);
                        if (error)
                            return "ack." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a Failure message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.contractmanager.Failure
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.contractmanager.Failure} Failure
                 */
                Failure.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.contractmanager.Failure)
                        return object;
                    var message = new $root.neutron.contractmanager.Failure();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.id != null)
                        if ($util.Long)
                            (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                        else if (typeof object.id === "string")
                            message.id = parseInt(object.id, 10);
                        else if (typeof object.id === "number")
                            message.id = object.id;
                        else if (typeof object.id === "object")
                            message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
                    if (object.ack_type != null)
                        message.ack_type = String(object.ack_type);
                    if (object.packet != null) {
                        if (typeof object.packet !== "object")
                            throw TypeError(".neutron.contractmanager.Failure.packet: object expected");
                        message.packet = $root.ibc.core.channel.v1.Packet.fromObject(object.packet);
                    }
                    if (object.ack != null) {
                        if (typeof object.ack !== "object")
                            throw TypeError(".neutron.contractmanager.Failure.ack: object expected");
                        message.ack = $root.ibc.core.channel.v1.Acknowledgement.fromObject(object.ack);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Failure message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.contractmanager.Failure
                 * @static
                 * @param {neutron.contractmanager.Failure} message Failure
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Failure.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.address = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.id = options.longs === String ? "0" : 0;
                        object.ack_type = "";
                        object.packet = null;
                        object.ack = null;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (typeof message.id === "number")
                            object.id = options.longs === String ? String(message.id) : message.id;
                        else
                            object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
                    if (message.ack_type != null && message.hasOwnProperty("ack_type"))
                        object.ack_type = message.ack_type;
                    if (message.packet != null && message.hasOwnProperty("packet"))
                        object.packet = $root.ibc.core.channel.v1.Packet.toObject(message.packet, options);
                    if (message.ack != null && message.hasOwnProperty("ack"))
                        object.ack = $root.ibc.core.channel.v1.Acknowledgement.toObject(message.ack, options);
                    return object;
                };
    
                /**
                 * Converts this Failure to JSON.
                 * @function toJSON
                 * @memberof neutron.contractmanager.Failure
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Failure.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Failure;
            })();
    
            contractmanager.Query = (function() {
    
                /**
                 * Constructs a new Query service.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                /**
                 * Callback as used by {@link neutron.contractmanager.Query#params}.
                 * @memberof neutron.contractmanager.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.contractmanager.QueryParamsResponse} [response] QueryParamsResponse
                 */
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.contractmanager.Query
                 * @instance
                 * @param {neutron.contractmanager.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {neutron.contractmanager.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.neutron.contractmanager.QueryParamsRequest, $root.neutron.contractmanager.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.contractmanager.Query
                 * @instance
                 * @param {neutron.contractmanager.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<neutron.contractmanager.QueryParamsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.contractmanager.Query#addressFailures}.
                 * @memberof neutron.contractmanager.Query
                 * @typedef AddressFailuresCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.contractmanager.QueryFailuresResponse} [response] QueryFailuresResponse
                 */
    
                /**
                 * Calls AddressFailures.
                 * @function addressFailures
                 * @memberof neutron.contractmanager.Query
                 * @instance
                 * @param {neutron.contractmanager.IQueryFailuresRequest} request QueryFailuresRequest message or plain object
                 * @param {neutron.contractmanager.Query.AddressFailuresCallback} callback Node-style callback called with the error, if any, and QueryFailuresResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.addressFailures = function addressFailures(request, callback) {
                    return this.rpcCall(addressFailures, $root.neutron.contractmanager.QueryFailuresRequest, $root.neutron.contractmanager.QueryFailuresResponse, request, callback);
                }, "name", { value: "AddressFailures" });
    
                /**
                 * Calls AddressFailures.
                 * @function addressFailures
                 * @memberof neutron.contractmanager.Query
                 * @instance
                 * @param {neutron.contractmanager.IQueryFailuresRequest} request QueryFailuresRequest message or plain object
                 * @returns {Promise<neutron.contractmanager.QueryFailuresResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.contractmanager.Query#failures}.
                 * @memberof neutron.contractmanager.Query
                 * @typedef FailuresCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.contractmanager.QueryFailuresResponse} [response] QueryFailuresResponse
                 */
    
                /**
                 * Calls Failures.
                 * @function failures
                 * @memberof neutron.contractmanager.Query
                 * @instance
                 * @param {neutron.contractmanager.IQueryFailuresRequest} request QueryFailuresRequest message or plain object
                 * @param {neutron.contractmanager.Query.FailuresCallback} callback Node-style callback called with the error, if any, and QueryFailuresResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.failures = function failures(request, callback) {
                    return this.rpcCall(failures, $root.neutron.contractmanager.QueryFailuresRequest, $root.neutron.contractmanager.QueryFailuresResponse, request, callback);
                }, "name", { value: "Failures" });
    
                /**
                 * Calls Failures.
                 * @function failures
                 * @memberof neutron.contractmanager.Query
                 * @instance
                 * @param {neutron.contractmanager.IQueryFailuresRequest} request QueryFailuresRequest message or plain object
                 * @returns {Promise<neutron.contractmanager.QueryFailuresResponse>} Promise
                 * @variation 2
                 */
    
                return Query;
            })();
    
            contractmanager.QueryParamsRequest = (function() {
    
                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof neutron.contractmanager
                 * @interface IQueryParamsRequest
                 */
    
                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {neutron.contractmanager.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link neutron.contractmanager.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.contractmanager.QueryParamsRequest
                 * @static
                 * @param {neutron.contractmanager.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link neutron.contractmanager.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.contractmanager.QueryParamsRequest
                 * @static
                 * @param {neutron.contractmanager.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.contractmanager.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.contractmanager.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.QueryParamsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.contractmanager.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.contractmanager.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof neutron.contractmanager.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.contractmanager.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.contractmanager.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.contractmanager.QueryParamsRequest)
                        return object;
                    return new $root.neutron.contractmanager.QueryParamsRequest();
                };
    
                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.contractmanager.QueryParamsRequest
                 * @static
                 * @param {neutron.contractmanager.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.contractmanager.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsRequest;
            })();
    
            contractmanager.QueryParamsResponse = (function() {
    
                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof neutron.contractmanager
                 * @interface IQueryParamsResponse
                 * @property {neutron.contractmanager.IParams|null} [params] QueryParamsResponse params
                 */
    
                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {neutron.contractmanager.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryParamsResponse params.
                 * @member {neutron.contractmanager.IParams|null|undefined} params
                 * @memberof neutron.contractmanager.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;
    
                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link neutron.contractmanager.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.contractmanager.QueryParamsResponse
                 * @static
                 * @param {neutron.contractmanager.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.contractmanager.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link neutron.contractmanager.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.contractmanager.QueryParamsResponse
                 * @static
                 * @param {neutron.contractmanager.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.contractmanager.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.contractmanager.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.QueryParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.contractmanager.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.contractmanager.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.contractmanager.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof neutron.contractmanager.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.contractmanager.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.contractmanager.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.contractmanager.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.contractmanager.QueryParamsResponse)
                        return object;
                    var message = new $root.neutron.contractmanager.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.contractmanager.QueryParamsResponse.params: object expected");
                        message.params = $root.neutron.contractmanager.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.contractmanager.QueryParamsResponse
                 * @static
                 * @param {neutron.contractmanager.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.contractmanager.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.contractmanager.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsResponse;
            })();
    
            contractmanager.QueryFailuresRequest = (function() {
    
                /**
                 * Properties of a QueryFailuresRequest.
                 * @memberof neutron.contractmanager
                 * @interface IQueryFailuresRequest
                 * @property {string|null} [address] QueryFailuresRequest address
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryFailuresRequest pagination
                 */
    
                /**
                 * Constructs a new QueryFailuresRequest.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a QueryFailuresRequest.
                 * @implements IQueryFailuresRequest
                 * @constructor
                 * @param {neutron.contractmanager.IQueryFailuresRequest=} [properties] Properties to set
                 */
                function QueryFailuresRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryFailuresRequest address.
                 * @member {string} address
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @instance
                 */
                QueryFailuresRequest.prototype.address = "";
    
                /**
                 * QueryFailuresRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @instance
                 */
                QueryFailuresRequest.prototype.pagination = null;
    
                /**
                 * Encodes the specified QueryFailuresRequest message. Does not implicitly {@link neutron.contractmanager.QueryFailuresRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @static
                 * @param {neutron.contractmanager.IQueryFailuresRequest} message QueryFailuresRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryFailuresRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryFailuresRequest message, length delimited. Does not implicitly {@link neutron.contractmanager.QueryFailuresRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @static
                 * @param {neutron.contractmanager.IQueryFailuresRequest} message QueryFailuresRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryFailuresRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryFailuresRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.contractmanager.QueryFailuresRequest} QueryFailuresRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryFailuresRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.QueryFailuresRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.string();
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryFailuresRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.contractmanager.QueryFailuresRequest} QueryFailuresRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryFailuresRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryFailuresRequest message.
                 * @function verify
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryFailuresRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!$util.isString(message.address))
                            return "address: string expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        var error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryFailuresRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.contractmanager.QueryFailuresRequest} QueryFailuresRequest
                 */
                QueryFailuresRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.contractmanager.QueryFailuresRequest)
                        return object;
                    var message = new $root.neutron.contractmanager.QueryFailuresRequest();
                    if (object.address != null)
                        message.address = String(object.address);
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".neutron.contractmanager.QueryFailuresRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryFailuresRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @static
                 * @param {neutron.contractmanager.QueryFailuresRequest} message QueryFailuresRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryFailuresRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.address = "";
                        object.pagination = null;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = message.address;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };
    
                /**
                 * Converts this QueryFailuresRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.contractmanager.QueryFailuresRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryFailuresRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryFailuresRequest;
            })();
    
            contractmanager.QueryFailuresResponse = (function() {
    
                /**
                 * Properties of a QueryFailuresResponse.
                 * @memberof neutron.contractmanager
                 * @interface IQueryFailuresResponse
                 * @property {Array.<neutron.contractmanager.IFailure>|null} [failures] QueryFailuresResponse failures
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryFailuresResponse pagination
                 */
    
                /**
                 * Constructs a new QueryFailuresResponse.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a QueryFailuresResponse.
                 * @implements IQueryFailuresResponse
                 * @constructor
                 * @param {neutron.contractmanager.IQueryFailuresResponse=} [properties] Properties to set
                 */
                function QueryFailuresResponse(properties) {
                    this.failures = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryFailuresResponse failures.
                 * @member {Array.<neutron.contractmanager.IFailure>} failures
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @instance
                 */
                QueryFailuresResponse.prototype.failures = $util.emptyArray;
    
                /**
                 * QueryFailuresResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @instance
                 */
                QueryFailuresResponse.prototype.pagination = null;
    
                /**
                 * Encodes the specified QueryFailuresResponse message. Does not implicitly {@link neutron.contractmanager.QueryFailuresResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @static
                 * @param {neutron.contractmanager.IQueryFailuresResponse} message QueryFailuresResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryFailuresResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.failures != null && message.failures.length)
                        for (var i = 0; i < message.failures.length; ++i)
                            $root.neutron.contractmanager.Failure.encode(message.failures[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryFailuresResponse message, length delimited. Does not implicitly {@link neutron.contractmanager.QueryFailuresResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @static
                 * @param {neutron.contractmanager.IQueryFailuresResponse} message QueryFailuresResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryFailuresResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryFailuresResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.contractmanager.QueryFailuresResponse} QueryFailuresResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryFailuresResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.QueryFailuresResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.failures && message.failures.length))
                                message.failures = [];
                            message.failures.push($root.neutron.contractmanager.Failure.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryFailuresResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.contractmanager.QueryFailuresResponse} QueryFailuresResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryFailuresResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryFailuresResponse message.
                 * @function verify
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryFailuresResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.failures != null && message.hasOwnProperty("failures")) {
                        if (!Array.isArray(message.failures))
                            return "failures: array expected";
                        for (var i = 0; i < message.failures.length; ++i) {
                            var error = $root.neutron.contractmanager.Failure.verify(message.failures[i]);
                            if (error)
                                return "failures." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        var error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryFailuresResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.contractmanager.QueryFailuresResponse} QueryFailuresResponse
                 */
                QueryFailuresResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.contractmanager.QueryFailuresResponse)
                        return object;
                    var message = new $root.neutron.contractmanager.QueryFailuresResponse();
                    if (object.failures) {
                        if (!Array.isArray(object.failures))
                            throw TypeError(".neutron.contractmanager.QueryFailuresResponse.failures: array expected");
                        message.failures = [];
                        for (var i = 0; i < object.failures.length; ++i) {
                            if (typeof object.failures[i] !== "object")
                                throw TypeError(".neutron.contractmanager.QueryFailuresResponse.failures: object expected");
                            message.failures[i] = $root.neutron.contractmanager.Failure.fromObject(object.failures[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".neutron.contractmanager.QueryFailuresResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryFailuresResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @static
                 * @param {neutron.contractmanager.QueryFailuresResponse} message QueryFailuresResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryFailuresResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.failures = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.failures && message.failures.length) {
                        object.failures = [];
                        for (var j = 0; j < message.failures.length; ++j)
                            object.failures[j] = $root.neutron.contractmanager.Failure.toObject(message.failures[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };
    
                /**
                 * Converts this QueryFailuresResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.contractmanager.QueryFailuresResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryFailuresResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryFailuresResponse;
            })();
    
            contractmanager.GenesisState = (function() {
    
                /**
                 * Properties of a GenesisState.
                 * @memberof neutron.contractmanager
                 * @interface IGenesisState
                 * @property {neutron.contractmanager.IParams|null} [params] GenesisState params
                 * @property {Array.<neutron.contractmanager.IFailure>|null} [failures_list] GenesisState failures_list
                 */
    
                /**
                 * Constructs a new GenesisState.
                 * @memberof neutron.contractmanager
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {neutron.contractmanager.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    this.failures_list = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GenesisState params.
                 * @member {neutron.contractmanager.IParams|null|undefined} params
                 * @memberof neutron.contractmanager.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;
    
                /**
                 * GenesisState failures_list.
                 * @member {Array.<neutron.contractmanager.IFailure>} failures_list
                 * @memberof neutron.contractmanager.GenesisState
                 * @instance
                 */
                GenesisState.prototype.failures_list = $util.emptyArray;
    
                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link neutron.contractmanager.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.contractmanager.GenesisState
                 * @static
                 * @param {neutron.contractmanager.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.contractmanager.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.failures_list != null && message.failures_list.length)
                        for (var i = 0; i < message.failures_list.length; ++i)
                            $root.neutron.contractmanager.Failure.encode(message.failures_list[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link neutron.contractmanager.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.contractmanager.GenesisState
                 * @static
                 * @param {neutron.contractmanager.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.contractmanager.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.contractmanager.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.GenesisState();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.contractmanager.Params.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.failures_list && message.failures_list.length))
                                message.failures_list = [];
                            message.failures_list.push($root.neutron.contractmanager.Failure.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.contractmanager.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.contractmanager.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof neutron.contractmanager.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.contractmanager.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    if (message.failures_list != null && message.hasOwnProperty("failures_list")) {
                        if (!Array.isArray(message.failures_list))
                            return "failures_list: array expected";
                        for (var i = 0; i < message.failures_list.length; ++i) {
                            var error = $root.neutron.contractmanager.Failure.verify(message.failures_list[i]);
                            if (error)
                                return "failures_list." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.contractmanager.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.contractmanager.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.contractmanager.GenesisState)
                        return object;
                    var message = new $root.neutron.contractmanager.GenesisState();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.contractmanager.GenesisState.params: object expected");
                        message.params = $root.neutron.contractmanager.Params.fromObject(object.params);
                    }
                    if (object.failures_list) {
                        if (!Array.isArray(object.failures_list))
                            throw TypeError(".neutron.contractmanager.GenesisState.failures_list: array expected");
                        message.failures_list = [];
                        for (var i = 0; i < object.failures_list.length; ++i) {
                            if (typeof object.failures_list[i] !== "object")
                                throw TypeError(".neutron.contractmanager.GenesisState.failures_list: object expected");
                            message.failures_list[i] = $root.neutron.contractmanager.Failure.fromObject(object.failures_list[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.contractmanager.GenesisState
                 * @static
                 * @param {neutron.contractmanager.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.failures_list = [];
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.contractmanager.Params.toObject(message.params, options);
                    if (message.failures_list && message.failures_list.length) {
                        object.failures_list = [];
                        for (var j = 0; j < message.failures_list.length; ++j)
                            object.failures_list[j] = $root.neutron.contractmanager.Failure.toObject(message.failures_list[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof neutron.contractmanager.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GenesisState;
            })();
    
            contractmanager.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof neutron.contractmanager
                 * @namespace
                 */
                var v1 = {};
    
                v1.Failure = (function() {
    
                    /**
                     * Properties of a Failure.
                     * @memberof neutron.contractmanager.v1
                     * @interface IFailure
                     * @property {string|null} [channel_id] Failure channel_id
                     * @property {string|null} [address] Failure address
                     * @property {Long|null} [id] Failure id
                     * @property {Long|null} [ack_id] Failure ack_id
                     * @property {string|null} [ack_type] Failure ack_type
                     */
    
                    /**
                     * Constructs a new Failure.
                     * @memberof neutron.contractmanager.v1
                     * @classdesc Represents a Failure.
                     * @implements IFailure
                     * @constructor
                     * @param {neutron.contractmanager.v1.IFailure=} [properties] Properties to set
                     */
                    function Failure(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Failure channel_id.
                     * @member {string} channel_id
                     * @memberof neutron.contractmanager.v1.Failure
                     * @instance
                     */
                    Failure.prototype.channel_id = "";
    
                    /**
                     * Failure address.
                     * @member {string} address
                     * @memberof neutron.contractmanager.v1.Failure
                     * @instance
                     */
                    Failure.prototype.address = "";
    
                    /**
                     * Failure id.
                     * @member {Long} id
                     * @memberof neutron.contractmanager.v1.Failure
                     * @instance
                     */
                    Failure.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Failure ack_id.
                     * @member {Long} ack_id
                     * @memberof neutron.contractmanager.v1.Failure
                     * @instance
                     */
                    Failure.prototype.ack_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Failure ack_type.
                     * @member {string} ack_type
                     * @memberof neutron.contractmanager.v1.Failure
                     * @instance
                     */
                    Failure.prototype.ack_type = "";
    
                    /**
                     * Encodes the specified Failure message. Does not implicitly {@link neutron.contractmanager.v1.Failure.verify|verify} messages.
                     * @function encode
                     * @memberof neutron.contractmanager.v1.Failure
                     * @static
                     * @param {neutron.contractmanager.v1.IFailure} message Failure message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Failure.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.channel_id);
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.address);
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.id);
                        if (message.ack_id != null && Object.hasOwnProperty.call(message, "ack_id"))
                            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.ack_id);
                        if (message.ack_type != null && Object.hasOwnProperty.call(message, "ack_type"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.ack_type);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Failure message, length delimited. Does not implicitly {@link neutron.contractmanager.v1.Failure.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof neutron.contractmanager.v1.Failure
                     * @static
                     * @param {neutron.contractmanager.v1.IFailure} message Failure message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Failure.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Failure message from the specified reader or buffer.
                     * @function decode
                     * @memberof neutron.contractmanager.v1.Failure
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {neutron.contractmanager.v1.Failure} Failure
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Failure.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.contractmanager.v1.Failure();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.channel_id = reader.string();
                                break;
                            case 2:
                                message.address = reader.string();
                                break;
                            case 3:
                                message.id = reader.uint64();
                                break;
                            case 4:
                                message.ack_id = reader.uint64();
                                break;
                            case 5:
                                message.ack_type = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Failure message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof neutron.contractmanager.v1.Failure
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {neutron.contractmanager.v1.Failure} Failure
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Failure.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Failure message.
                     * @function verify
                     * @memberof neutron.contractmanager.v1.Failure
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Failure.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            if (!$util.isString(message.channel_id))
                                return "channel_id: string expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                                return "id: integer|Long expected";
                        if (message.ack_id != null && message.hasOwnProperty("ack_id"))
                            if (!$util.isInteger(message.ack_id) && !(message.ack_id && $util.isInteger(message.ack_id.low) && $util.isInteger(message.ack_id.high)))
                                return "ack_id: integer|Long expected";
                        if (message.ack_type != null && message.hasOwnProperty("ack_type"))
                            if (!$util.isString(message.ack_type))
                                return "ack_type: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Failure message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof neutron.contractmanager.v1.Failure
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {neutron.contractmanager.v1.Failure} Failure
                     */
                    Failure.fromObject = function fromObject(object) {
                        if (object instanceof $root.neutron.contractmanager.v1.Failure)
                            return object;
                        var message = new $root.neutron.contractmanager.v1.Failure();
                        if (object.channel_id != null)
                            message.channel_id = String(object.channel_id);
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.id != null)
                            if ($util.Long)
                                (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                            else if (typeof object.id === "string")
                                message.id = parseInt(object.id, 10);
                            else if (typeof object.id === "number")
                                message.id = object.id;
                            else if (typeof object.id === "object")
                                message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
                        if (object.ack_id != null)
                            if ($util.Long)
                                (message.ack_id = $util.Long.fromValue(object.ack_id)).unsigned = true;
                            else if (typeof object.ack_id === "string")
                                message.ack_id = parseInt(object.ack_id, 10);
                            else if (typeof object.ack_id === "number")
                                message.ack_id = object.ack_id;
                            else if (typeof object.ack_id === "object")
                                message.ack_id = new $util.LongBits(object.ack_id.low >>> 0, object.ack_id.high >>> 0).toNumber(true);
                        if (object.ack_type != null)
                            message.ack_type = String(object.ack_type);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Failure message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof neutron.contractmanager.v1.Failure
                     * @static
                     * @param {neutron.contractmanager.v1.Failure} message Failure
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Failure.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.channel_id = "";
                            object.address = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.id = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.ack_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.ack_id = options.longs === String ? "0" : 0;
                            object.ack_type = "";
                        }
                        if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                            object.channel_id = message.channel_id;
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (typeof message.id === "number")
                                object.id = options.longs === String ? String(message.id) : message.id;
                            else
                                object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
                        if (message.ack_id != null && message.hasOwnProperty("ack_id"))
                            if (typeof message.ack_id === "number")
                                object.ack_id = options.longs === String ? String(message.ack_id) : message.ack_id;
                            else
                                object.ack_id = options.longs === String ? $util.Long.prototype.toString.call(message.ack_id) : options.longs === Number ? new $util.LongBits(message.ack_id.low >>> 0, message.ack_id.high >>> 0).toNumber(true) : message.ack_id;
                        if (message.ack_type != null && message.hasOwnProperty("ack_type"))
                            object.ack_type = message.ack_type;
                        return object;
                    };
    
                    /**
                     * Converts this Failure to JSON.
                     * @function toJSON
                     * @memberof neutron.contractmanager.v1.Failure
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Failure.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Failure;
                })();
    
                return v1;
            })();
    
            return contractmanager;
        })();
    
        neutron.cron = (function() {
    
            /**
             * Namespace cron.
             * @memberof neutron
             * @namespace
             */
            var cron = {};
    
            cron.Msg = (function() {
    
                /**
                 * Constructs a new Msg service.
                 * @memberof neutron.cron
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;
    
                /**
                 * Callback as used by {@link neutron.cron.Msg#updateParams}.
                 * @memberof neutron.cron.Msg
                 * @typedef UpdateParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.cron.MsgUpdateParamsResponse} [response] MsgUpdateParamsResponse
                 */
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.cron.Msg
                 * @instance
                 * @param {neutron.cron.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @param {neutron.cron.Msg.UpdateParamsCallback} callback Node-style callback called with the error, if any, and MsgUpdateParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.updateParams = function updateParams(request, callback) {
                    return this.rpcCall(updateParams, $root.neutron.cron.MsgUpdateParams, $root.neutron.cron.MsgUpdateParamsResponse, request, callback);
                }, "name", { value: "UpdateParams" });
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.cron.Msg
                 * @instance
                 * @param {neutron.cron.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @returns {Promise<neutron.cron.MsgUpdateParamsResponse>} Promise
                 * @variation 2
                 */
    
                return Msg;
            })();
    
            cron.MsgUpdateParams = (function() {
    
                /**
                 * Properties of a MsgUpdateParams.
                 * @memberof neutron.cron
                 * @interface IMsgUpdateParams
                 * @property {string|null} [authority] MsgUpdateParams authority
                 * @property {neutron.cron.IParams|null} [params] MsgUpdateParams params
                 */
    
                /**
                 * Constructs a new MsgUpdateParams.
                 * @memberof neutron.cron
                 * @classdesc Represents a MsgUpdateParams.
                 * @implements IMsgUpdateParams
                 * @constructor
                 * @param {neutron.cron.IMsgUpdateParams=} [properties] Properties to set
                 */
                function MsgUpdateParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgUpdateParams authority.
                 * @member {string} authority
                 * @memberof neutron.cron.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.authority = "";
    
                /**
                 * MsgUpdateParams params.
                 * @member {neutron.cron.IParams|null|undefined} params
                 * @memberof neutron.cron.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.params = null;
    
                /**
                 * Encodes the specified MsgUpdateParams message. Does not implicitly {@link neutron.cron.MsgUpdateParams.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.MsgUpdateParams
                 * @static
                 * @param {neutron.cron.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.authority);
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.cron.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParams message, length delimited. Does not implicitly {@link neutron.cron.MsgUpdateParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.MsgUpdateParams
                 * @static
                 * @param {neutron.cron.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.MsgUpdateParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.authority = reader.string();
                            break;
                        case 2:
                            message.params = $root.neutron.cron.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParams message.
                 * @function verify
                 * @memberof neutron.cron.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        if (!$util.isString(message.authority))
                            return "authority: string expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.cron.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.MsgUpdateParams} MsgUpdateParams
                 */
                MsgUpdateParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.MsgUpdateParams)
                        return object;
                    var message = new $root.neutron.cron.MsgUpdateParams();
                    if (object.authority != null)
                        message.authority = String(object.authority);
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.cron.MsgUpdateParams.params: object expected");
                        message.params = $root.neutron.cron.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.MsgUpdateParams
                 * @static
                 * @param {neutron.cron.MsgUpdateParams} message MsgUpdateParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.authority = "";
                        object.params = null;
                    }
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        object.authority = message.authority;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.cron.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this MsgUpdateParams to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.MsgUpdateParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParams;
            })();
    
            cron.MsgUpdateParamsResponse = (function() {
    
                /**
                 * Properties of a MsgUpdateParamsResponse.
                 * @memberof neutron.cron
                 * @interface IMsgUpdateParamsResponse
                 */
    
                /**
                 * Constructs a new MsgUpdateParamsResponse.
                 * @memberof neutron.cron
                 * @classdesc Represents a MsgUpdateParamsResponse.
                 * @implements IMsgUpdateParamsResponse
                 * @constructor
                 * @param {neutron.cron.IMsgUpdateParamsResponse=} [properties] Properties to set
                 */
                function MsgUpdateParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message. Does not implicitly {@link neutron.cron.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.cron.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message, length delimited. Does not implicitly {@link neutron.cron.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.cron.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.MsgUpdateParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParamsResponse message.
                 * @function verify
                 * @memberof neutron.cron.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 */
                MsgUpdateParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.MsgUpdateParamsResponse)
                        return object;
                    return new $root.neutron.cron.MsgUpdateParamsResponse();
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.cron.MsgUpdateParamsResponse} message MsgUpdateParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParamsResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgUpdateParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.MsgUpdateParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParamsResponse;
            })();
    
            cron.Params = (function() {
    
                /**
                 * Properties of a Params.
                 * @memberof neutron.cron
                 * @interface IParams
                 * @property {string|null} [security_address] Params security_address
                 * @property {Long|null} [limit] Params limit
                 */
    
                /**
                 * Constructs a new Params.
                 * @memberof neutron.cron
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {neutron.cron.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Params security_address.
                 * @member {string} security_address
                 * @memberof neutron.cron.Params
                 * @instance
                 */
                Params.prototype.security_address = "";
    
                /**
                 * Params limit.
                 * @member {Long} limit
                 * @memberof neutron.cron.Params
                 * @instance
                 */
                Params.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified Params message. Does not implicitly {@link neutron.cron.Params.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.Params
                 * @static
                 * @param {neutron.cron.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.security_address != null && Object.hasOwnProperty.call(message, "security_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.security_address);
                    if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.limit);
                    return writer;
                };
    
                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link neutron.cron.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.Params
                 * @static
                 * @param {neutron.cron.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.Params();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.security_address = reader.string();
                            break;
                        case 2:
                            message.limit = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof neutron.cron.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.security_address != null && message.hasOwnProperty("security_address"))
                        if (!$util.isString(message.security_address))
                            return "security_address: string expected";
                    if (message.limit != null && message.hasOwnProperty("limit"))
                        if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                            return "limit: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.Params)
                        return object;
                    var message = new $root.neutron.cron.Params();
                    if (object.security_address != null)
                        message.security_address = String(object.security_address);
                    if (object.limit != null)
                        if ($util.Long)
                            (message.limit = $util.Long.fromValue(object.limit)).unsigned = true;
                        else if (typeof object.limit === "string")
                            message.limit = parseInt(object.limit, 10);
                        else if (typeof object.limit === "number")
                            message.limit = object.limit;
                        else if (typeof object.limit === "object")
                            message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.Params
                 * @static
                 * @param {neutron.cron.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.security_address = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.limit = options.longs === String ? "0" : 0;
                    }
                    if (message.security_address != null && message.hasOwnProperty("security_address"))
                        object.security_address = message.security_address;
                    if (message.limit != null && message.hasOwnProperty("limit"))
                        if (typeof message.limit === "number")
                            object.limit = options.longs === String ? String(message.limit) : message.limit;
                        else
                            object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber(true) : message.limit;
                    return object;
                };
    
                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Params;
            })();
    
            cron.Schedule = (function() {
    
                /**
                 * Properties of a Schedule.
                 * @memberof neutron.cron
                 * @interface ISchedule
                 * @property {string|null} [name] Schedule name
                 * @property {Long|null} [period] Schedule period
                 * @property {Array.<neutron.cron.IMsgExecuteContract>|null} [msgs] Schedule msgs
                 * @property {Long|null} [last_execute_height] Schedule last_execute_height
                 */
    
                /**
                 * Constructs a new Schedule.
                 * @memberof neutron.cron
                 * @classdesc Represents a Schedule.
                 * @implements ISchedule
                 * @constructor
                 * @param {neutron.cron.ISchedule=} [properties] Properties to set
                 */
                function Schedule(properties) {
                    this.msgs = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Schedule name.
                 * @member {string} name
                 * @memberof neutron.cron.Schedule
                 * @instance
                 */
                Schedule.prototype.name = "";
    
                /**
                 * Schedule period.
                 * @member {Long} period
                 * @memberof neutron.cron.Schedule
                 * @instance
                 */
                Schedule.prototype.period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Schedule msgs.
                 * @member {Array.<neutron.cron.IMsgExecuteContract>} msgs
                 * @memberof neutron.cron.Schedule
                 * @instance
                 */
                Schedule.prototype.msgs = $util.emptyArray;
    
                /**
                 * Schedule last_execute_height.
                 * @member {Long} last_execute_height
                 * @memberof neutron.cron.Schedule
                 * @instance
                 */
                Schedule.prototype.last_execute_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified Schedule message. Does not implicitly {@link neutron.cron.Schedule.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.Schedule
                 * @static
                 * @param {neutron.cron.ISchedule} message Schedule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Schedule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.period != null && Object.hasOwnProperty.call(message, "period"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.period);
                    if (message.msgs != null && message.msgs.length)
                        for (var i = 0; i < message.msgs.length; ++i)
                            $root.neutron.cron.MsgExecuteContract.encode(message.msgs[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.last_execute_height != null && Object.hasOwnProperty.call(message, "last_execute_height"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.last_execute_height);
                    return writer;
                };
    
                /**
                 * Encodes the specified Schedule message, length delimited. Does not implicitly {@link neutron.cron.Schedule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.Schedule
                 * @static
                 * @param {neutron.cron.ISchedule} message Schedule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Schedule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Schedule message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.Schedule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.Schedule} Schedule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Schedule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.Schedule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.period = reader.uint64();
                            break;
                        case 3:
                            if (!(message.msgs && message.msgs.length))
                                message.msgs = [];
                            message.msgs.push($root.neutron.cron.MsgExecuteContract.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            message.last_execute_height = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Schedule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.Schedule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.Schedule} Schedule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Schedule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Schedule message.
                 * @function verify
                 * @memberof neutron.cron.Schedule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Schedule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.period != null && message.hasOwnProperty("period"))
                        if (!$util.isInteger(message.period) && !(message.period && $util.isInteger(message.period.low) && $util.isInteger(message.period.high)))
                            return "period: integer|Long expected";
                    if (message.msgs != null && message.hasOwnProperty("msgs")) {
                        if (!Array.isArray(message.msgs))
                            return "msgs: array expected";
                        for (var i = 0; i < message.msgs.length; ++i) {
                            var error = $root.neutron.cron.MsgExecuteContract.verify(message.msgs[i]);
                            if (error)
                                return "msgs." + error;
                        }
                    }
                    if (message.last_execute_height != null && message.hasOwnProperty("last_execute_height"))
                        if (!$util.isInteger(message.last_execute_height) && !(message.last_execute_height && $util.isInteger(message.last_execute_height.low) && $util.isInteger(message.last_execute_height.high)))
                            return "last_execute_height: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a Schedule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.Schedule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.Schedule} Schedule
                 */
                Schedule.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.Schedule)
                        return object;
                    var message = new $root.neutron.cron.Schedule();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.period != null)
                        if ($util.Long)
                            (message.period = $util.Long.fromValue(object.period)).unsigned = true;
                        else if (typeof object.period === "string")
                            message.period = parseInt(object.period, 10);
                        else if (typeof object.period === "number")
                            message.period = object.period;
                        else if (typeof object.period === "object")
                            message.period = new $util.LongBits(object.period.low >>> 0, object.period.high >>> 0).toNumber(true);
                    if (object.msgs) {
                        if (!Array.isArray(object.msgs))
                            throw TypeError(".neutron.cron.Schedule.msgs: array expected");
                        message.msgs = [];
                        for (var i = 0; i < object.msgs.length; ++i) {
                            if (typeof object.msgs[i] !== "object")
                                throw TypeError(".neutron.cron.Schedule.msgs: object expected");
                            message.msgs[i] = $root.neutron.cron.MsgExecuteContract.fromObject(object.msgs[i]);
                        }
                    }
                    if (object.last_execute_height != null)
                        if ($util.Long)
                            (message.last_execute_height = $util.Long.fromValue(object.last_execute_height)).unsigned = true;
                        else if (typeof object.last_execute_height === "string")
                            message.last_execute_height = parseInt(object.last_execute_height, 10);
                        else if (typeof object.last_execute_height === "number")
                            message.last_execute_height = object.last_execute_height;
                        else if (typeof object.last_execute_height === "object")
                            message.last_execute_height = new $util.LongBits(object.last_execute_height.low >>> 0, object.last_execute_height.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Schedule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.Schedule
                 * @static
                 * @param {neutron.cron.Schedule} message Schedule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Schedule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.msgs = [];
                    if (options.defaults) {
                        object.name = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.period = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.last_execute_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.last_execute_height = options.longs === String ? "0" : 0;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.period != null && message.hasOwnProperty("period"))
                        if (typeof message.period === "number")
                            object.period = options.longs === String ? String(message.period) : message.period;
                        else
                            object.period = options.longs === String ? $util.Long.prototype.toString.call(message.period) : options.longs === Number ? new $util.LongBits(message.period.low >>> 0, message.period.high >>> 0).toNumber(true) : message.period;
                    if (message.msgs && message.msgs.length) {
                        object.msgs = [];
                        for (var j = 0; j < message.msgs.length; ++j)
                            object.msgs[j] = $root.neutron.cron.MsgExecuteContract.toObject(message.msgs[j], options);
                    }
                    if (message.last_execute_height != null && message.hasOwnProperty("last_execute_height"))
                        if (typeof message.last_execute_height === "number")
                            object.last_execute_height = options.longs === String ? String(message.last_execute_height) : message.last_execute_height;
                        else
                            object.last_execute_height = options.longs === String ? $util.Long.prototype.toString.call(message.last_execute_height) : options.longs === Number ? new $util.LongBits(message.last_execute_height.low >>> 0, message.last_execute_height.high >>> 0).toNumber(true) : message.last_execute_height;
                    return object;
                };
    
                /**
                 * Converts this Schedule to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.Schedule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Schedule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Schedule;
            })();
    
            cron.MsgExecuteContract = (function() {
    
                /**
                 * Properties of a MsgExecuteContract.
                 * @memberof neutron.cron
                 * @interface IMsgExecuteContract
                 * @property {string|null} [contract] MsgExecuteContract contract
                 * @property {string|null} [msg] MsgExecuteContract msg
                 */
    
                /**
                 * Constructs a new MsgExecuteContract.
                 * @memberof neutron.cron
                 * @classdesc Represents a MsgExecuteContract.
                 * @implements IMsgExecuteContract
                 * @constructor
                 * @param {neutron.cron.IMsgExecuteContract=} [properties] Properties to set
                 */
                function MsgExecuteContract(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgExecuteContract contract.
                 * @member {string} contract
                 * @memberof neutron.cron.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.contract = "";
    
                /**
                 * MsgExecuteContract msg.
                 * @member {string} msg
                 * @memberof neutron.cron.MsgExecuteContract
                 * @instance
                 */
                MsgExecuteContract.prototype.msg = "";
    
                /**
                 * Encodes the specified MsgExecuteContract message. Does not implicitly {@link neutron.cron.MsgExecuteContract.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.MsgExecuteContract
                 * @static
                 * @param {neutron.cron.IMsgExecuteContract} message MsgExecuteContract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgExecuteContract.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.contract != null && Object.hasOwnProperty.call(message, "contract"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.contract);
                    if (message.msg != null && Object.hasOwnProperty.call(message, "msg"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.msg);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgExecuteContract message, length delimited. Does not implicitly {@link neutron.cron.MsgExecuteContract.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.MsgExecuteContract
                 * @static
                 * @param {neutron.cron.IMsgExecuteContract} message MsgExecuteContract message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgExecuteContract.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgExecuteContract message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.MsgExecuteContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.MsgExecuteContract} MsgExecuteContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgExecuteContract.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.MsgExecuteContract();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.contract = reader.string();
                            break;
                        case 2:
                            message.msg = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgExecuteContract message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.MsgExecuteContract
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.MsgExecuteContract} MsgExecuteContract
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgExecuteContract.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgExecuteContract message.
                 * @function verify
                 * @memberof neutron.cron.MsgExecuteContract
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgExecuteContract.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        if (!$util.isString(message.contract))
                            return "contract: string expected";
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        if (!$util.isString(message.msg))
                            return "msg: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgExecuteContract message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.MsgExecuteContract
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.MsgExecuteContract} MsgExecuteContract
                 */
                MsgExecuteContract.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.MsgExecuteContract)
                        return object;
                    var message = new $root.neutron.cron.MsgExecuteContract();
                    if (object.contract != null)
                        message.contract = String(object.contract);
                    if (object.msg != null)
                        message.msg = String(object.msg);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgExecuteContract message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.MsgExecuteContract
                 * @static
                 * @param {neutron.cron.MsgExecuteContract} message MsgExecuteContract
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgExecuteContract.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.contract = "";
                        object.msg = "";
                    }
                    if (message.contract != null && message.hasOwnProperty("contract"))
                        object.contract = message.contract;
                    if (message.msg != null && message.hasOwnProperty("msg"))
                        object.msg = message.msg;
                    return object;
                };
    
                /**
                 * Converts this MsgExecuteContract to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.MsgExecuteContract
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgExecuteContract.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgExecuteContract;
            })();
    
            cron.ScheduleCount = (function() {
    
                /**
                 * Properties of a ScheduleCount.
                 * @memberof neutron.cron
                 * @interface IScheduleCount
                 * @property {number|null} [count] ScheduleCount count
                 */
    
                /**
                 * Constructs a new ScheduleCount.
                 * @memberof neutron.cron
                 * @classdesc Represents a ScheduleCount.
                 * @implements IScheduleCount
                 * @constructor
                 * @param {neutron.cron.IScheduleCount=} [properties] Properties to set
                 */
                function ScheduleCount(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ScheduleCount count.
                 * @member {number} count
                 * @memberof neutron.cron.ScheduleCount
                 * @instance
                 */
                ScheduleCount.prototype.count = 0;
    
                /**
                 * Encodes the specified ScheduleCount message. Does not implicitly {@link neutron.cron.ScheduleCount.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.ScheduleCount
                 * @static
                 * @param {neutron.cron.IScheduleCount} message ScheduleCount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScheduleCount.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.count);
                    return writer;
                };
    
                /**
                 * Encodes the specified ScheduleCount message, length delimited. Does not implicitly {@link neutron.cron.ScheduleCount.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.ScheduleCount
                 * @static
                 * @param {neutron.cron.IScheduleCount} message ScheduleCount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ScheduleCount.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ScheduleCount message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.ScheduleCount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.ScheduleCount} ScheduleCount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScheduleCount.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.ScheduleCount();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.count = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ScheduleCount message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.ScheduleCount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.ScheduleCount} ScheduleCount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ScheduleCount.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ScheduleCount message.
                 * @function verify
                 * @memberof neutron.cron.ScheduleCount
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ScheduleCount.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.count != null && message.hasOwnProperty("count"))
                        if (!$util.isInteger(message.count))
                            return "count: integer expected";
                    return null;
                };
    
                /**
                 * Creates a ScheduleCount message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.ScheduleCount
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.ScheduleCount} ScheduleCount
                 */
                ScheduleCount.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.ScheduleCount)
                        return object;
                    var message = new $root.neutron.cron.ScheduleCount();
                    if (object.count != null)
                        message.count = object.count | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a ScheduleCount message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.ScheduleCount
                 * @static
                 * @param {neutron.cron.ScheduleCount} message ScheduleCount
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ScheduleCount.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.count = 0;
                    if (message.count != null && message.hasOwnProperty("count"))
                        object.count = message.count;
                    return object;
                };
    
                /**
                 * Converts this ScheduleCount to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.ScheduleCount
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ScheduleCount.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ScheduleCount;
            })();
    
            cron.Query = (function() {
    
                /**
                 * Constructs a new Query service.
                 * @memberof neutron.cron
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                /**
                 * Callback as used by {@link neutron.cron.Query#params}.
                 * @memberof neutron.cron.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.cron.QueryParamsResponse} [response] QueryParamsResponse
                 */
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.cron.Query
                 * @instance
                 * @param {neutron.cron.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {neutron.cron.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.neutron.cron.QueryParamsRequest, $root.neutron.cron.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.cron.Query
                 * @instance
                 * @param {neutron.cron.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<neutron.cron.QueryParamsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.cron.Query#schedule}.
                 * @memberof neutron.cron.Query
                 * @typedef ScheduleCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.cron.QueryGetScheduleResponse} [response] QueryGetScheduleResponse
                 */
    
                /**
                 * Calls Schedule.
                 * @function schedule
                 * @memberof neutron.cron.Query
                 * @instance
                 * @param {neutron.cron.IQueryGetScheduleRequest} request QueryGetScheduleRequest message or plain object
                 * @param {neutron.cron.Query.ScheduleCallback} callback Node-style callback called with the error, if any, and QueryGetScheduleResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.schedule = function schedule(request, callback) {
                    return this.rpcCall(schedule, $root.neutron.cron.QueryGetScheduleRequest, $root.neutron.cron.QueryGetScheduleResponse, request, callback);
                }, "name", { value: "Schedule" });
    
                /**
                 * Calls Schedule.
                 * @function schedule
                 * @memberof neutron.cron.Query
                 * @instance
                 * @param {neutron.cron.IQueryGetScheduleRequest} request QueryGetScheduleRequest message or plain object
                 * @returns {Promise<neutron.cron.QueryGetScheduleResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.cron.Query#schedules}.
                 * @memberof neutron.cron.Query
                 * @typedef SchedulesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.cron.QuerySchedulesResponse} [response] QuerySchedulesResponse
                 */
    
                /**
                 * Calls Schedules.
                 * @function schedules
                 * @memberof neutron.cron.Query
                 * @instance
                 * @param {neutron.cron.IQuerySchedulesRequest} request QuerySchedulesRequest message or plain object
                 * @param {neutron.cron.Query.SchedulesCallback} callback Node-style callback called with the error, if any, and QuerySchedulesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.schedules = function schedules(request, callback) {
                    return this.rpcCall(schedules, $root.neutron.cron.QuerySchedulesRequest, $root.neutron.cron.QuerySchedulesResponse, request, callback);
                }, "name", { value: "Schedules" });
    
                /**
                 * Calls Schedules.
                 * @function schedules
                 * @memberof neutron.cron.Query
                 * @instance
                 * @param {neutron.cron.IQuerySchedulesRequest} request QuerySchedulesRequest message or plain object
                 * @returns {Promise<neutron.cron.QuerySchedulesResponse>} Promise
                 * @variation 2
                 */
    
                return Query;
            })();
    
            cron.QueryParamsRequest = (function() {
    
                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof neutron.cron
                 * @interface IQueryParamsRequest
                 */
    
                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof neutron.cron
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {neutron.cron.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link neutron.cron.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.QueryParamsRequest
                 * @static
                 * @param {neutron.cron.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link neutron.cron.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.QueryParamsRequest
                 * @static
                 * @param {neutron.cron.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.QueryParamsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof neutron.cron.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.QueryParamsRequest)
                        return object;
                    return new $root.neutron.cron.QueryParamsRequest();
                };
    
                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.QueryParamsRequest
                 * @static
                 * @param {neutron.cron.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsRequest;
            })();
    
            cron.QueryParamsResponse = (function() {
    
                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof neutron.cron
                 * @interface IQueryParamsResponse
                 * @property {neutron.cron.IParams|null} [params] QueryParamsResponse params
                 */
    
                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof neutron.cron
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {neutron.cron.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryParamsResponse params.
                 * @member {neutron.cron.IParams|null|undefined} params
                 * @memberof neutron.cron.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;
    
                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link neutron.cron.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.QueryParamsResponse
                 * @static
                 * @param {neutron.cron.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.cron.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link neutron.cron.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.QueryParamsResponse
                 * @static
                 * @param {neutron.cron.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.QueryParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.cron.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof neutron.cron.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.cron.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.QueryParamsResponse)
                        return object;
                    var message = new $root.neutron.cron.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.cron.QueryParamsResponse.params: object expected");
                        message.params = $root.neutron.cron.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.QueryParamsResponse
                 * @static
                 * @param {neutron.cron.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.cron.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsResponse;
            })();
    
            cron.QueryGetScheduleRequest = (function() {
    
                /**
                 * Properties of a QueryGetScheduleRequest.
                 * @memberof neutron.cron
                 * @interface IQueryGetScheduleRequest
                 * @property {string|null} [name] QueryGetScheduleRequest name
                 */
    
                /**
                 * Constructs a new QueryGetScheduleRequest.
                 * @memberof neutron.cron
                 * @classdesc Represents a QueryGetScheduleRequest.
                 * @implements IQueryGetScheduleRequest
                 * @constructor
                 * @param {neutron.cron.IQueryGetScheduleRequest=} [properties] Properties to set
                 */
                function QueryGetScheduleRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryGetScheduleRequest name.
                 * @member {string} name
                 * @memberof neutron.cron.QueryGetScheduleRequest
                 * @instance
                 */
                QueryGetScheduleRequest.prototype.name = "";
    
                /**
                 * Encodes the specified QueryGetScheduleRequest message. Does not implicitly {@link neutron.cron.QueryGetScheduleRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.QueryGetScheduleRequest
                 * @static
                 * @param {neutron.cron.IQueryGetScheduleRequest} message QueryGetScheduleRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGetScheduleRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryGetScheduleRequest message, length delimited. Does not implicitly {@link neutron.cron.QueryGetScheduleRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.QueryGetScheduleRequest
                 * @static
                 * @param {neutron.cron.IQueryGetScheduleRequest} message QueryGetScheduleRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGetScheduleRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryGetScheduleRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.QueryGetScheduleRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.QueryGetScheduleRequest} QueryGetScheduleRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGetScheduleRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.QueryGetScheduleRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryGetScheduleRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.QueryGetScheduleRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.QueryGetScheduleRequest} QueryGetScheduleRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGetScheduleRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryGetScheduleRequest message.
                 * @function verify
                 * @memberof neutron.cron.QueryGetScheduleRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryGetScheduleRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    return null;
                };
    
                /**
                 * Creates a QueryGetScheduleRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.QueryGetScheduleRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.QueryGetScheduleRequest} QueryGetScheduleRequest
                 */
                QueryGetScheduleRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.QueryGetScheduleRequest)
                        return object;
                    var message = new $root.neutron.cron.QueryGetScheduleRequest();
                    if (object.name != null)
                        message.name = String(object.name);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryGetScheduleRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.QueryGetScheduleRequest
                 * @static
                 * @param {neutron.cron.QueryGetScheduleRequest} message QueryGetScheduleRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryGetScheduleRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.name = "";
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    return object;
                };
    
                /**
                 * Converts this QueryGetScheduleRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.QueryGetScheduleRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryGetScheduleRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryGetScheduleRequest;
            })();
    
            cron.QueryGetScheduleResponse = (function() {
    
                /**
                 * Properties of a QueryGetScheduleResponse.
                 * @memberof neutron.cron
                 * @interface IQueryGetScheduleResponse
                 * @property {neutron.cron.ISchedule|null} [schedule] QueryGetScheduleResponse schedule
                 */
    
                /**
                 * Constructs a new QueryGetScheduleResponse.
                 * @memberof neutron.cron
                 * @classdesc Represents a QueryGetScheduleResponse.
                 * @implements IQueryGetScheduleResponse
                 * @constructor
                 * @param {neutron.cron.IQueryGetScheduleResponse=} [properties] Properties to set
                 */
                function QueryGetScheduleResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryGetScheduleResponse schedule.
                 * @member {neutron.cron.ISchedule|null|undefined} schedule
                 * @memberof neutron.cron.QueryGetScheduleResponse
                 * @instance
                 */
                QueryGetScheduleResponse.prototype.schedule = null;
    
                /**
                 * Encodes the specified QueryGetScheduleResponse message. Does not implicitly {@link neutron.cron.QueryGetScheduleResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.QueryGetScheduleResponse
                 * @static
                 * @param {neutron.cron.IQueryGetScheduleResponse} message QueryGetScheduleResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGetScheduleResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.schedule != null && Object.hasOwnProperty.call(message, "schedule"))
                        $root.neutron.cron.Schedule.encode(message.schedule, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryGetScheduleResponse message, length delimited. Does not implicitly {@link neutron.cron.QueryGetScheduleResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.QueryGetScheduleResponse
                 * @static
                 * @param {neutron.cron.IQueryGetScheduleResponse} message QueryGetScheduleResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryGetScheduleResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryGetScheduleResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.QueryGetScheduleResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.QueryGetScheduleResponse} QueryGetScheduleResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGetScheduleResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.QueryGetScheduleResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.schedule = $root.neutron.cron.Schedule.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryGetScheduleResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.QueryGetScheduleResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.QueryGetScheduleResponse} QueryGetScheduleResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryGetScheduleResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryGetScheduleResponse message.
                 * @function verify
                 * @memberof neutron.cron.QueryGetScheduleResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryGetScheduleResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.schedule != null && message.hasOwnProperty("schedule")) {
                        var error = $root.neutron.cron.Schedule.verify(message.schedule);
                        if (error)
                            return "schedule." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryGetScheduleResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.QueryGetScheduleResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.QueryGetScheduleResponse} QueryGetScheduleResponse
                 */
                QueryGetScheduleResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.QueryGetScheduleResponse)
                        return object;
                    var message = new $root.neutron.cron.QueryGetScheduleResponse();
                    if (object.schedule != null) {
                        if (typeof object.schedule !== "object")
                            throw TypeError(".neutron.cron.QueryGetScheduleResponse.schedule: object expected");
                        message.schedule = $root.neutron.cron.Schedule.fromObject(object.schedule);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryGetScheduleResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.QueryGetScheduleResponse
                 * @static
                 * @param {neutron.cron.QueryGetScheduleResponse} message QueryGetScheduleResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryGetScheduleResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.schedule = null;
                    if (message.schedule != null && message.hasOwnProperty("schedule"))
                        object.schedule = $root.neutron.cron.Schedule.toObject(message.schedule, options);
                    return object;
                };
    
                /**
                 * Converts this QueryGetScheduleResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.QueryGetScheduleResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryGetScheduleResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryGetScheduleResponse;
            })();
    
            cron.QuerySchedulesRequest = (function() {
    
                /**
                 * Properties of a QuerySchedulesRequest.
                 * @memberof neutron.cron
                 * @interface IQuerySchedulesRequest
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QuerySchedulesRequest pagination
                 */
    
                /**
                 * Constructs a new QuerySchedulesRequest.
                 * @memberof neutron.cron
                 * @classdesc Represents a QuerySchedulesRequest.
                 * @implements IQuerySchedulesRequest
                 * @constructor
                 * @param {neutron.cron.IQuerySchedulesRequest=} [properties] Properties to set
                 */
                function QuerySchedulesRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QuerySchedulesRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof neutron.cron.QuerySchedulesRequest
                 * @instance
                 */
                QuerySchedulesRequest.prototype.pagination = null;
    
                /**
                 * Encodes the specified QuerySchedulesRequest message. Does not implicitly {@link neutron.cron.QuerySchedulesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.QuerySchedulesRequest
                 * @static
                 * @param {neutron.cron.IQuerySchedulesRequest} message QuerySchedulesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySchedulesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QuerySchedulesRequest message, length delimited. Does not implicitly {@link neutron.cron.QuerySchedulesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.QuerySchedulesRequest
                 * @static
                 * @param {neutron.cron.IQuerySchedulesRequest} message QuerySchedulesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySchedulesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QuerySchedulesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.QuerySchedulesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.QuerySchedulesRequest} QuerySchedulesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySchedulesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.QuerySchedulesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QuerySchedulesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.QuerySchedulesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.QuerySchedulesRequest} QuerySchedulesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySchedulesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QuerySchedulesRequest message.
                 * @function verify
                 * @memberof neutron.cron.QuerySchedulesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QuerySchedulesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        var error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QuerySchedulesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.QuerySchedulesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.QuerySchedulesRequest} QuerySchedulesRequest
                 */
                QuerySchedulesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.QuerySchedulesRequest)
                        return object;
                    var message = new $root.neutron.cron.QuerySchedulesRequest();
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".neutron.cron.QuerySchedulesRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QuerySchedulesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.QuerySchedulesRequest
                 * @static
                 * @param {neutron.cron.QuerySchedulesRequest} message QuerySchedulesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QuerySchedulesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.pagination = null;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };
    
                /**
                 * Converts this QuerySchedulesRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.QuerySchedulesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QuerySchedulesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QuerySchedulesRequest;
            })();
    
            cron.QuerySchedulesResponse = (function() {
    
                /**
                 * Properties of a QuerySchedulesResponse.
                 * @memberof neutron.cron
                 * @interface IQuerySchedulesResponse
                 * @property {Array.<neutron.cron.ISchedule>|null} [schedules] QuerySchedulesResponse schedules
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QuerySchedulesResponse pagination
                 */
    
                /**
                 * Constructs a new QuerySchedulesResponse.
                 * @memberof neutron.cron
                 * @classdesc Represents a QuerySchedulesResponse.
                 * @implements IQuerySchedulesResponse
                 * @constructor
                 * @param {neutron.cron.IQuerySchedulesResponse=} [properties] Properties to set
                 */
                function QuerySchedulesResponse(properties) {
                    this.schedules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QuerySchedulesResponse schedules.
                 * @member {Array.<neutron.cron.ISchedule>} schedules
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @instance
                 */
                QuerySchedulesResponse.prototype.schedules = $util.emptyArray;
    
                /**
                 * QuerySchedulesResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @instance
                 */
                QuerySchedulesResponse.prototype.pagination = null;
    
                /**
                 * Encodes the specified QuerySchedulesResponse message. Does not implicitly {@link neutron.cron.QuerySchedulesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @static
                 * @param {neutron.cron.IQuerySchedulesResponse} message QuerySchedulesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySchedulesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.schedules != null && message.schedules.length)
                        for (var i = 0; i < message.schedules.length; ++i)
                            $root.neutron.cron.Schedule.encode(message.schedules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QuerySchedulesResponse message, length delimited. Does not implicitly {@link neutron.cron.QuerySchedulesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @static
                 * @param {neutron.cron.IQuerySchedulesResponse} message QuerySchedulesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QuerySchedulesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QuerySchedulesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.QuerySchedulesResponse} QuerySchedulesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySchedulesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.QuerySchedulesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.schedules && message.schedules.length))
                                message.schedules = [];
                            message.schedules.push($root.neutron.cron.Schedule.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QuerySchedulesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.QuerySchedulesResponse} QuerySchedulesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QuerySchedulesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QuerySchedulesResponse message.
                 * @function verify
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QuerySchedulesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.schedules != null && message.hasOwnProperty("schedules")) {
                        if (!Array.isArray(message.schedules))
                            return "schedules: array expected";
                        for (var i = 0; i < message.schedules.length; ++i) {
                            var error = $root.neutron.cron.Schedule.verify(message.schedules[i]);
                            if (error)
                                return "schedules." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        var error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QuerySchedulesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.QuerySchedulesResponse} QuerySchedulesResponse
                 */
                QuerySchedulesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.QuerySchedulesResponse)
                        return object;
                    var message = new $root.neutron.cron.QuerySchedulesResponse();
                    if (object.schedules) {
                        if (!Array.isArray(object.schedules))
                            throw TypeError(".neutron.cron.QuerySchedulesResponse.schedules: array expected");
                        message.schedules = [];
                        for (var i = 0; i < object.schedules.length; ++i) {
                            if (typeof object.schedules[i] !== "object")
                                throw TypeError(".neutron.cron.QuerySchedulesResponse.schedules: object expected");
                            message.schedules[i] = $root.neutron.cron.Schedule.fromObject(object.schedules[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".neutron.cron.QuerySchedulesResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QuerySchedulesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @static
                 * @param {neutron.cron.QuerySchedulesResponse} message QuerySchedulesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QuerySchedulesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.schedules = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.schedules && message.schedules.length) {
                        object.schedules = [];
                        for (var j = 0; j < message.schedules.length; ++j)
                            object.schedules[j] = $root.neutron.cron.Schedule.toObject(message.schedules[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };
    
                /**
                 * Converts this QuerySchedulesResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.QuerySchedulesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QuerySchedulesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QuerySchedulesResponse;
            })();
    
            cron.GenesisState = (function() {
    
                /**
                 * Properties of a GenesisState.
                 * @memberof neutron.cron
                 * @interface IGenesisState
                 * @property {Array.<neutron.cron.ISchedule>|null} [scheduleList] GenesisState scheduleList
                 * @property {neutron.cron.IParams|null} [params] GenesisState params
                 */
    
                /**
                 * Constructs a new GenesisState.
                 * @memberof neutron.cron
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {neutron.cron.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    this.scheduleList = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GenesisState scheduleList.
                 * @member {Array.<neutron.cron.ISchedule>} scheduleList
                 * @memberof neutron.cron.GenesisState
                 * @instance
                 */
                GenesisState.prototype.scheduleList = $util.emptyArray;
    
                /**
                 * GenesisState params.
                 * @member {neutron.cron.IParams|null|undefined} params
                 * @memberof neutron.cron.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;
    
                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link neutron.cron.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.cron.GenesisState
                 * @static
                 * @param {neutron.cron.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.cron.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.scheduleList != null && message.scheduleList.length)
                        for (var i = 0; i < message.scheduleList.length; ++i)
                            $root.neutron.cron.Schedule.encode(message.scheduleList[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link neutron.cron.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.cron.GenesisState
                 * @static
                 * @param {neutron.cron.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.cron.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.cron.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.cron.GenesisState();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.scheduleList && message.scheduleList.length))
                                message.scheduleList = [];
                            message.scheduleList.push($root.neutron.cron.Schedule.decode(reader, reader.uint32()));
                            break;
                        case 1:
                            message.params = $root.neutron.cron.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.cron.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.cron.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof neutron.cron.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.scheduleList != null && message.hasOwnProperty("scheduleList")) {
                        if (!Array.isArray(message.scheduleList))
                            return "scheduleList: array expected";
                        for (var i = 0; i < message.scheduleList.length; ++i) {
                            var error = $root.neutron.cron.Schedule.verify(message.scheduleList[i]);
                            if (error)
                                return "scheduleList." + error;
                        }
                    }
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.cron.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.cron.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.cron.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.cron.GenesisState)
                        return object;
                    var message = new $root.neutron.cron.GenesisState();
                    if (object.scheduleList) {
                        if (!Array.isArray(object.scheduleList))
                            throw TypeError(".neutron.cron.GenesisState.scheduleList: array expected");
                        message.scheduleList = [];
                        for (var i = 0; i < object.scheduleList.length; ++i) {
                            if (typeof object.scheduleList[i] !== "object")
                                throw TypeError(".neutron.cron.GenesisState.scheduleList: object expected");
                            message.scheduleList[i] = $root.neutron.cron.Schedule.fromObject(object.scheduleList[i]);
                        }
                    }
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.cron.GenesisState.params: object expected");
                        message.params = $root.neutron.cron.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.cron.GenesisState
                 * @static
                 * @param {neutron.cron.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.scheduleList = [];
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.cron.Params.toObject(message.params, options);
                    if (message.scheduleList && message.scheduleList.length) {
                        object.scheduleList = [];
                        for (var j = 0; j < message.scheduleList.length; ++j)
                            object.scheduleList[j] = $root.neutron.cron.Schedule.toObject(message.scheduleList[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof neutron.cron.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GenesisState;
            })();
    
            return cron;
        })();
    
        neutron.feeburner = (function() {
    
            /**
             * Namespace feeburner.
             * @memberof neutron
             * @namespace
             */
            var feeburner = {};
    
            feeburner.Msg = (function() {
    
                /**
                 * Constructs a new Msg service.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;
    
                /**
                 * Callback as used by {@link neutron.feeburner.Msg#updateParams}.
                 * @memberof neutron.feeburner.Msg
                 * @typedef UpdateParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.feeburner.MsgUpdateParamsResponse} [response] MsgUpdateParamsResponse
                 */
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.feeburner.Msg
                 * @instance
                 * @param {neutron.feeburner.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @param {neutron.feeburner.Msg.UpdateParamsCallback} callback Node-style callback called with the error, if any, and MsgUpdateParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.updateParams = function updateParams(request, callback) {
                    return this.rpcCall(updateParams, $root.neutron.feeburner.MsgUpdateParams, $root.neutron.feeburner.MsgUpdateParamsResponse, request, callback);
                }, "name", { value: "UpdateParams" });
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.feeburner.Msg
                 * @instance
                 * @param {neutron.feeburner.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @returns {Promise<neutron.feeburner.MsgUpdateParamsResponse>} Promise
                 * @variation 2
                 */
    
                return Msg;
            })();
    
            feeburner.MsgUpdateParams = (function() {
    
                /**
                 * Properties of a MsgUpdateParams.
                 * @memberof neutron.feeburner
                 * @interface IMsgUpdateParams
                 * @property {string|null} [authority] MsgUpdateParams authority
                 * @property {neutron.feeburner.IParams|null} [params] MsgUpdateParams params
                 */
    
                /**
                 * Constructs a new MsgUpdateParams.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a MsgUpdateParams.
                 * @implements IMsgUpdateParams
                 * @constructor
                 * @param {neutron.feeburner.IMsgUpdateParams=} [properties] Properties to set
                 */
                function MsgUpdateParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgUpdateParams authority.
                 * @member {string} authority
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.authority = "";
    
                /**
                 * MsgUpdateParams params.
                 * @member {neutron.feeburner.IParams|null|undefined} params
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.params = null;
    
                /**
                 * Encodes the specified MsgUpdateParams message. Does not implicitly {@link neutron.feeburner.MsgUpdateParams.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @static
                 * @param {neutron.feeburner.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.authority);
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.feeburner.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParams message, length delimited. Does not implicitly {@link neutron.feeburner.MsgUpdateParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @static
                 * @param {neutron.feeburner.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feeburner.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feeburner.MsgUpdateParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.authority = reader.string();
                            break;
                        case 2:
                            message.params = $root.neutron.feeburner.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feeburner.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParams message.
                 * @function verify
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        if (!$util.isString(message.authority))
                            return "authority: string expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.feeburner.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feeburner.MsgUpdateParams} MsgUpdateParams
                 */
                MsgUpdateParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feeburner.MsgUpdateParams)
                        return object;
                    var message = new $root.neutron.feeburner.MsgUpdateParams();
                    if (object.authority != null)
                        message.authority = String(object.authority);
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.feeburner.MsgUpdateParams.params: object expected");
                        message.params = $root.neutron.feeburner.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @static
                 * @param {neutron.feeburner.MsgUpdateParams} message MsgUpdateParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.authority = "";
                        object.params = null;
                    }
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        object.authority = message.authority;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.feeburner.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this MsgUpdateParams to JSON.
                 * @function toJSON
                 * @memberof neutron.feeburner.MsgUpdateParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParams;
            })();
    
            feeburner.MsgUpdateParamsResponse = (function() {
    
                /**
                 * Properties of a MsgUpdateParamsResponse.
                 * @memberof neutron.feeburner
                 * @interface IMsgUpdateParamsResponse
                 */
    
                /**
                 * Constructs a new MsgUpdateParamsResponse.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a MsgUpdateParamsResponse.
                 * @implements IMsgUpdateParamsResponse
                 * @constructor
                 * @param {neutron.feeburner.IMsgUpdateParamsResponse=} [properties] Properties to set
                 */
                function MsgUpdateParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message. Does not implicitly {@link neutron.feeburner.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feeburner.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.feeburner.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message, length delimited. Does not implicitly {@link neutron.feeburner.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feeburner.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.feeburner.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feeburner.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feeburner.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feeburner.MsgUpdateParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feeburner.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feeburner.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParamsResponse message.
                 * @function verify
                 * @memberof neutron.feeburner.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feeburner.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feeburner.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 */
                MsgUpdateParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feeburner.MsgUpdateParamsResponse)
                        return object;
                    return new $root.neutron.feeburner.MsgUpdateParamsResponse();
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feeburner.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.feeburner.MsgUpdateParamsResponse} message MsgUpdateParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParamsResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgUpdateParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.feeburner.MsgUpdateParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParamsResponse;
            })();
    
            feeburner.Params = (function() {
    
                /**
                 * Properties of a Params.
                 * @memberof neutron.feeburner
                 * @interface IParams
                 * @property {string|null} [neutron_denom] Params neutron_denom
                 * @property {string|null} [reserve_address] Params reserve_address
                 * @property {string|null} [treasury_address] Params treasury_address
                 */
    
                /**
                 * Constructs a new Params.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {neutron.feeburner.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Params neutron_denom.
                 * @member {string} neutron_denom
                 * @memberof neutron.feeburner.Params
                 * @instance
                 */
                Params.prototype.neutron_denom = "";
    
                /**
                 * Params reserve_address.
                 * @member {string} reserve_address
                 * @memberof neutron.feeburner.Params
                 * @instance
                 */
                Params.prototype.reserve_address = "";
    
                /**
                 * Params treasury_address.
                 * @member {string} treasury_address
                 * @memberof neutron.feeburner.Params
                 * @instance
                 */
                Params.prototype.treasury_address = "";
    
                /**
                 * Encodes the specified Params message. Does not implicitly {@link neutron.feeburner.Params.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feeburner.Params
                 * @static
                 * @param {neutron.feeburner.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.neutron_denom != null && Object.hasOwnProperty.call(message, "neutron_denom"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.neutron_denom);
                    if (message.reserve_address != null && Object.hasOwnProperty.call(message, "reserve_address"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.reserve_address);
                    if (message.treasury_address != null && Object.hasOwnProperty.call(message, "treasury_address"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.treasury_address);
                    return writer;
                };
    
                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link neutron.feeburner.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feeburner.Params
                 * @static
                 * @param {neutron.feeburner.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feeburner.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feeburner.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feeburner.Params();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.neutron_denom = reader.string();
                            break;
                        case 2:
                            message.reserve_address = reader.string();
                            break;
                        case 3:
                            message.treasury_address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feeburner.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feeburner.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof neutron.feeburner.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.neutron_denom != null && message.hasOwnProperty("neutron_denom"))
                        if (!$util.isString(message.neutron_denom))
                            return "neutron_denom: string expected";
                    if (message.reserve_address != null && message.hasOwnProperty("reserve_address"))
                        if (!$util.isString(message.reserve_address))
                            return "reserve_address: string expected";
                    if (message.treasury_address != null && message.hasOwnProperty("treasury_address"))
                        if (!$util.isString(message.treasury_address))
                            return "treasury_address: string expected";
                    return null;
                };
    
                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feeburner.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feeburner.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feeburner.Params)
                        return object;
                    var message = new $root.neutron.feeburner.Params();
                    if (object.neutron_denom != null)
                        message.neutron_denom = String(object.neutron_denom);
                    if (object.reserve_address != null)
                        message.reserve_address = String(object.reserve_address);
                    if (object.treasury_address != null)
                        message.treasury_address = String(object.treasury_address);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feeburner.Params
                 * @static
                 * @param {neutron.feeburner.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.neutron_denom = "";
                        object.reserve_address = "";
                        object.treasury_address = "";
                    }
                    if (message.neutron_denom != null && message.hasOwnProperty("neutron_denom"))
                        object.neutron_denom = message.neutron_denom;
                    if (message.reserve_address != null && message.hasOwnProperty("reserve_address"))
                        object.reserve_address = message.reserve_address;
                    if (message.treasury_address != null && message.hasOwnProperty("treasury_address"))
                        object.treasury_address = message.treasury_address;
                    return object;
                };
    
                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof neutron.feeburner.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Params;
            })();
    
            feeburner.Query = (function() {
    
                /**
                 * Constructs a new Query service.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                /**
                 * Callback as used by {@link neutron.feeburner.Query#params}.
                 * @memberof neutron.feeburner.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.feeburner.QueryParamsResponse} [response] QueryParamsResponse
                 */
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.feeburner.Query
                 * @instance
                 * @param {neutron.feeburner.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {neutron.feeburner.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.neutron.feeburner.QueryParamsRequest, $root.neutron.feeburner.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.feeburner.Query
                 * @instance
                 * @param {neutron.feeburner.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<neutron.feeburner.QueryParamsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.feeburner.Query#totalBurnedNeutronsAmount}.
                 * @memberof neutron.feeburner.Query
                 * @typedef TotalBurnedNeutronsAmountCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse} [response] QueryTotalBurnedNeutronsAmountResponse
                 */
    
                /**
                 * Calls TotalBurnedNeutronsAmount.
                 * @function totalBurnedNeutronsAmount
                 * @memberof neutron.feeburner.Query
                 * @instance
                 * @param {neutron.feeburner.IQueryTotalBurnedNeutronsAmountRequest} request QueryTotalBurnedNeutronsAmountRequest message or plain object
                 * @param {neutron.feeburner.Query.TotalBurnedNeutronsAmountCallback} callback Node-style callback called with the error, if any, and QueryTotalBurnedNeutronsAmountResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.totalBurnedNeutronsAmount = function totalBurnedNeutronsAmount(request, callback) {
                    return this.rpcCall(totalBurnedNeutronsAmount, $root.neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest, $root.neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse, request, callback);
                }, "name", { value: "TotalBurnedNeutronsAmount" });
    
                /**
                 * Calls TotalBurnedNeutronsAmount.
                 * @function totalBurnedNeutronsAmount
                 * @memberof neutron.feeburner.Query
                 * @instance
                 * @param {neutron.feeburner.IQueryTotalBurnedNeutronsAmountRequest} request QueryTotalBurnedNeutronsAmountRequest message or plain object
                 * @returns {Promise<neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse>} Promise
                 * @variation 2
                 */
    
                return Query;
            })();
    
            feeburner.QueryParamsRequest = (function() {
    
                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof neutron.feeburner
                 * @interface IQueryParamsRequest
                 */
    
                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {neutron.feeburner.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link neutron.feeburner.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feeburner.QueryParamsRequest
                 * @static
                 * @param {neutron.feeburner.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link neutron.feeburner.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feeburner.QueryParamsRequest
                 * @static
                 * @param {neutron.feeburner.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feeburner.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feeburner.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feeburner.QueryParamsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feeburner.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feeburner.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof neutron.feeburner.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feeburner.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feeburner.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feeburner.QueryParamsRequest)
                        return object;
                    return new $root.neutron.feeburner.QueryParamsRequest();
                };
    
                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feeburner.QueryParamsRequest
                 * @static
                 * @param {neutron.feeburner.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.feeburner.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsRequest;
            })();
    
            feeburner.QueryParamsResponse = (function() {
    
                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof neutron.feeburner
                 * @interface IQueryParamsResponse
                 * @property {neutron.feeburner.IParams|null} [params] QueryParamsResponse params
                 */
    
                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {neutron.feeburner.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryParamsResponse params.
                 * @member {neutron.feeburner.IParams|null|undefined} params
                 * @memberof neutron.feeburner.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;
    
                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link neutron.feeburner.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feeburner.QueryParamsResponse
                 * @static
                 * @param {neutron.feeburner.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.feeburner.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link neutron.feeburner.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feeburner.QueryParamsResponse
                 * @static
                 * @param {neutron.feeburner.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feeburner.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feeburner.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feeburner.QueryParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.feeburner.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feeburner.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feeburner.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof neutron.feeburner.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.feeburner.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feeburner.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feeburner.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feeburner.QueryParamsResponse)
                        return object;
                    var message = new $root.neutron.feeburner.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.feeburner.QueryParamsResponse.params: object expected");
                        message.params = $root.neutron.feeburner.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feeburner.QueryParamsResponse
                 * @static
                 * @param {neutron.feeburner.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.feeburner.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.feeburner.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsResponse;
            })();
    
            feeburner.QueryTotalBurnedNeutronsAmountRequest = (function() {
    
                /**
                 * Properties of a QueryTotalBurnedNeutronsAmountRequest.
                 * @memberof neutron.feeburner
                 * @interface IQueryTotalBurnedNeutronsAmountRequest
                 */
    
                /**
                 * Constructs a new QueryTotalBurnedNeutronsAmountRequest.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a QueryTotalBurnedNeutronsAmountRequest.
                 * @implements IQueryTotalBurnedNeutronsAmountRequest
                 * @constructor
                 * @param {neutron.feeburner.IQueryTotalBurnedNeutronsAmountRequest=} [properties] Properties to set
                 */
                function QueryTotalBurnedNeutronsAmountRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryTotalBurnedNeutronsAmountRequest message. Does not implicitly {@link neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest
                 * @static
                 * @param {neutron.feeburner.IQueryTotalBurnedNeutronsAmountRequest} message QueryTotalBurnedNeutronsAmountRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTotalBurnedNeutronsAmountRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryTotalBurnedNeutronsAmountRequest message, length delimited. Does not implicitly {@link neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest
                 * @static
                 * @param {neutron.feeburner.IQueryTotalBurnedNeutronsAmountRequest} message QueryTotalBurnedNeutronsAmountRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTotalBurnedNeutronsAmountRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryTotalBurnedNeutronsAmountRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest} QueryTotalBurnedNeutronsAmountRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTotalBurnedNeutronsAmountRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryTotalBurnedNeutronsAmountRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest} QueryTotalBurnedNeutronsAmountRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTotalBurnedNeutronsAmountRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryTotalBurnedNeutronsAmountRequest message.
                 * @function verify
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryTotalBurnedNeutronsAmountRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryTotalBurnedNeutronsAmountRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest} QueryTotalBurnedNeutronsAmountRequest
                 */
                QueryTotalBurnedNeutronsAmountRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest)
                        return object;
                    return new $root.neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest();
                };
    
                /**
                 * Creates a plain object from a QueryTotalBurnedNeutronsAmountRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest
                 * @static
                 * @param {neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest} message QueryTotalBurnedNeutronsAmountRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryTotalBurnedNeutronsAmountRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryTotalBurnedNeutronsAmountRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryTotalBurnedNeutronsAmountRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryTotalBurnedNeutronsAmountRequest;
            })();
    
            feeburner.QueryTotalBurnedNeutronsAmountResponse = (function() {
    
                /**
                 * Properties of a QueryTotalBurnedNeutronsAmountResponse.
                 * @memberof neutron.feeburner
                 * @interface IQueryTotalBurnedNeutronsAmountResponse
                 * @property {neutron.feeburner.ITotalBurnedNeutronsAmount|null} [total_burned_neutrons_amount] QueryTotalBurnedNeutronsAmountResponse total_burned_neutrons_amount
                 */
    
                /**
                 * Constructs a new QueryTotalBurnedNeutronsAmountResponse.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a QueryTotalBurnedNeutronsAmountResponse.
                 * @implements IQueryTotalBurnedNeutronsAmountResponse
                 * @constructor
                 * @param {neutron.feeburner.IQueryTotalBurnedNeutronsAmountResponse=} [properties] Properties to set
                 */
                function QueryTotalBurnedNeutronsAmountResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryTotalBurnedNeutronsAmountResponse total_burned_neutrons_amount.
                 * @member {neutron.feeburner.ITotalBurnedNeutronsAmount|null|undefined} total_burned_neutrons_amount
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse
                 * @instance
                 */
                QueryTotalBurnedNeutronsAmountResponse.prototype.total_burned_neutrons_amount = null;
    
                /**
                 * Encodes the specified QueryTotalBurnedNeutronsAmountResponse message. Does not implicitly {@link neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse
                 * @static
                 * @param {neutron.feeburner.IQueryTotalBurnedNeutronsAmountResponse} message QueryTotalBurnedNeutronsAmountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTotalBurnedNeutronsAmountResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.total_burned_neutrons_amount != null && Object.hasOwnProperty.call(message, "total_burned_neutrons_amount"))
                        $root.neutron.feeburner.TotalBurnedNeutronsAmount.encode(message.total_burned_neutrons_amount, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryTotalBurnedNeutronsAmountResponse message, length delimited. Does not implicitly {@link neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse
                 * @static
                 * @param {neutron.feeburner.IQueryTotalBurnedNeutronsAmountResponse} message QueryTotalBurnedNeutronsAmountResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryTotalBurnedNeutronsAmountResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryTotalBurnedNeutronsAmountResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse} QueryTotalBurnedNeutronsAmountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTotalBurnedNeutronsAmountResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.total_burned_neutrons_amount = $root.neutron.feeburner.TotalBurnedNeutronsAmount.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryTotalBurnedNeutronsAmountResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse} QueryTotalBurnedNeutronsAmountResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryTotalBurnedNeutronsAmountResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryTotalBurnedNeutronsAmountResponse message.
                 * @function verify
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryTotalBurnedNeutronsAmountResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.total_burned_neutrons_amount != null && message.hasOwnProperty("total_burned_neutrons_amount")) {
                        var error = $root.neutron.feeburner.TotalBurnedNeutronsAmount.verify(message.total_burned_neutrons_amount);
                        if (error)
                            return "total_burned_neutrons_amount." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryTotalBurnedNeutronsAmountResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse} QueryTotalBurnedNeutronsAmountResponse
                 */
                QueryTotalBurnedNeutronsAmountResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse)
                        return object;
                    var message = new $root.neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse();
                    if (object.total_burned_neutrons_amount != null) {
                        if (typeof object.total_burned_neutrons_amount !== "object")
                            throw TypeError(".neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse.total_burned_neutrons_amount: object expected");
                        message.total_burned_neutrons_amount = $root.neutron.feeburner.TotalBurnedNeutronsAmount.fromObject(object.total_burned_neutrons_amount);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryTotalBurnedNeutronsAmountResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse
                 * @static
                 * @param {neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse} message QueryTotalBurnedNeutronsAmountResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryTotalBurnedNeutronsAmountResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.total_burned_neutrons_amount = null;
                    if (message.total_burned_neutrons_amount != null && message.hasOwnProperty("total_burned_neutrons_amount"))
                        object.total_burned_neutrons_amount = $root.neutron.feeburner.TotalBurnedNeutronsAmount.toObject(message.total_burned_neutrons_amount, options);
                    return object;
                };
    
                /**
                 * Converts this QueryTotalBurnedNeutronsAmountResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.feeburner.QueryTotalBurnedNeutronsAmountResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryTotalBurnedNeutronsAmountResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryTotalBurnedNeutronsAmountResponse;
            })();
    
            feeburner.TotalBurnedNeutronsAmount = (function() {
    
                /**
                 * Properties of a TotalBurnedNeutronsAmount.
                 * @memberof neutron.feeburner
                 * @interface ITotalBurnedNeutronsAmount
                 * @property {cosmos.base.v1beta1.ICoin|null} [coin] TotalBurnedNeutronsAmount coin
                 */
    
                /**
                 * Constructs a new TotalBurnedNeutronsAmount.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a TotalBurnedNeutronsAmount.
                 * @implements ITotalBurnedNeutronsAmount
                 * @constructor
                 * @param {neutron.feeburner.ITotalBurnedNeutronsAmount=} [properties] Properties to set
                 */
                function TotalBurnedNeutronsAmount(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TotalBurnedNeutronsAmount coin.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} coin
                 * @memberof neutron.feeburner.TotalBurnedNeutronsAmount
                 * @instance
                 */
                TotalBurnedNeutronsAmount.prototype.coin = null;
    
                /**
                 * Encodes the specified TotalBurnedNeutronsAmount message. Does not implicitly {@link neutron.feeburner.TotalBurnedNeutronsAmount.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feeburner.TotalBurnedNeutronsAmount
                 * @static
                 * @param {neutron.feeburner.ITotalBurnedNeutronsAmount} message TotalBurnedNeutronsAmount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TotalBurnedNeutronsAmount.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.coin != null && Object.hasOwnProperty.call(message, "coin"))
                        $root.cosmos.base.v1beta1.Coin.encode(message.coin, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified TotalBurnedNeutronsAmount message, length delimited. Does not implicitly {@link neutron.feeburner.TotalBurnedNeutronsAmount.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feeburner.TotalBurnedNeutronsAmount
                 * @static
                 * @param {neutron.feeburner.ITotalBurnedNeutronsAmount} message TotalBurnedNeutronsAmount message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TotalBurnedNeutronsAmount.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TotalBurnedNeutronsAmount message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feeburner.TotalBurnedNeutronsAmount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feeburner.TotalBurnedNeutronsAmount} TotalBurnedNeutronsAmount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TotalBurnedNeutronsAmount.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feeburner.TotalBurnedNeutronsAmount();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.coin = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a TotalBurnedNeutronsAmount message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feeburner.TotalBurnedNeutronsAmount
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feeburner.TotalBurnedNeutronsAmount} TotalBurnedNeutronsAmount
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TotalBurnedNeutronsAmount.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TotalBurnedNeutronsAmount message.
                 * @function verify
                 * @memberof neutron.feeburner.TotalBurnedNeutronsAmount
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TotalBurnedNeutronsAmount.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.coin != null && message.hasOwnProperty("coin")) {
                        var error = $root.cosmos.base.v1beta1.Coin.verify(message.coin);
                        if (error)
                            return "coin." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a TotalBurnedNeutronsAmount message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feeburner.TotalBurnedNeutronsAmount
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feeburner.TotalBurnedNeutronsAmount} TotalBurnedNeutronsAmount
                 */
                TotalBurnedNeutronsAmount.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feeburner.TotalBurnedNeutronsAmount)
                        return object;
                    var message = new $root.neutron.feeburner.TotalBurnedNeutronsAmount();
                    if (object.coin != null) {
                        if (typeof object.coin !== "object")
                            throw TypeError(".neutron.feeburner.TotalBurnedNeutronsAmount.coin: object expected");
                        message.coin = $root.cosmos.base.v1beta1.Coin.fromObject(object.coin);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a TotalBurnedNeutronsAmount message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feeburner.TotalBurnedNeutronsAmount
                 * @static
                 * @param {neutron.feeburner.TotalBurnedNeutronsAmount} message TotalBurnedNeutronsAmount
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TotalBurnedNeutronsAmount.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.coin = null;
                    if (message.coin != null && message.hasOwnProperty("coin"))
                        object.coin = $root.cosmos.base.v1beta1.Coin.toObject(message.coin, options);
                    return object;
                };
    
                /**
                 * Converts this TotalBurnedNeutronsAmount to JSON.
                 * @function toJSON
                 * @memberof neutron.feeburner.TotalBurnedNeutronsAmount
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TotalBurnedNeutronsAmount.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TotalBurnedNeutronsAmount;
            })();
    
            feeburner.GenesisState = (function() {
    
                /**
                 * Properties of a GenesisState.
                 * @memberof neutron.feeburner
                 * @interface IGenesisState
                 * @property {neutron.feeburner.IParams|null} [params] GenesisState params
                 * @property {neutron.feeburner.ITotalBurnedNeutronsAmount|null} [total_burned_neutrons_amount] GenesisState total_burned_neutrons_amount
                 */
    
                /**
                 * Constructs a new GenesisState.
                 * @memberof neutron.feeburner
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {neutron.feeburner.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GenesisState params.
                 * @member {neutron.feeburner.IParams|null|undefined} params
                 * @memberof neutron.feeburner.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;
    
                /**
                 * GenesisState total_burned_neutrons_amount.
                 * @member {neutron.feeburner.ITotalBurnedNeutronsAmount|null|undefined} total_burned_neutrons_amount
                 * @memberof neutron.feeburner.GenesisState
                 * @instance
                 */
                GenesisState.prototype.total_burned_neutrons_amount = null;
    
                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link neutron.feeburner.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feeburner.GenesisState
                 * @static
                 * @param {neutron.feeburner.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.feeburner.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.total_burned_neutrons_amount != null && Object.hasOwnProperty.call(message, "total_burned_neutrons_amount"))
                        $root.neutron.feeburner.TotalBurnedNeutronsAmount.encode(message.total_burned_neutrons_amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link neutron.feeburner.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feeburner.GenesisState
                 * @static
                 * @param {neutron.feeburner.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feeburner.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feeburner.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feeburner.GenesisState();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.feeburner.Params.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.total_burned_neutrons_amount = $root.neutron.feeburner.TotalBurnedNeutronsAmount.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feeburner.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feeburner.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof neutron.feeburner.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.feeburner.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    if (message.total_burned_neutrons_amount != null && message.hasOwnProperty("total_burned_neutrons_amount")) {
                        var error = $root.neutron.feeburner.TotalBurnedNeutronsAmount.verify(message.total_burned_neutrons_amount);
                        if (error)
                            return "total_burned_neutrons_amount." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feeburner.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feeburner.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feeburner.GenesisState)
                        return object;
                    var message = new $root.neutron.feeburner.GenesisState();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.feeburner.GenesisState.params: object expected");
                        message.params = $root.neutron.feeburner.Params.fromObject(object.params);
                    }
                    if (object.total_burned_neutrons_amount != null) {
                        if (typeof object.total_burned_neutrons_amount !== "object")
                            throw TypeError(".neutron.feeburner.GenesisState.total_burned_neutrons_amount: object expected");
                        message.total_burned_neutrons_amount = $root.neutron.feeburner.TotalBurnedNeutronsAmount.fromObject(object.total_burned_neutrons_amount);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feeburner.GenesisState
                 * @static
                 * @param {neutron.feeburner.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.params = null;
                        object.total_burned_neutrons_amount = null;
                    }
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.feeburner.Params.toObject(message.params, options);
                    if (message.total_burned_neutrons_amount != null && message.hasOwnProperty("total_burned_neutrons_amount"))
                        object.total_burned_neutrons_amount = $root.neutron.feeburner.TotalBurnedNeutronsAmount.toObject(message.total_burned_neutrons_amount, options);
                    return object;
                };
    
                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof neutron.feeburner.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GenesisState;
            })();
    
            return feeburner;
        })();
    
        neutron.feerefunder = (function() {
    
            /**
             * Namespace feerefunder.
             * @memberof neutron
             * @namespace
             */
            var feerefunder = {};
    
            feerefunder.Msg = (function() {
    
                /**
                 * Constructs a new Msg service.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;
    
                /**
                 * Callback as used by {@link neutron.feerefunder.Msg#updateParams}.
                 * @memberof neutron.feerefunder.Msg
                 * @typedef UpdateParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.feerefunder.MsgUpdateParamsResponse} [response] MsgUpdateParamsResponse
                 */
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.feerefunder.Msg
                 * @instance
                 * @param {neutron.feerefunder.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @param {neutron.feerefunder.Msg.UpdateParamsCallback} callback Node-style callback called with the error, if any, and MsgUpdateParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.updateParams = function updateParams(request, callback) {
                    return this.rpcCall(updateParams, $root.neutron.feerefunder.MsgUpdateParams, $root.neutron.feerefunder.MsgUpdateParamsResponse, request, callback);
                }, "name", { value: "UpdateParams" });
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.feerefunder.Msg
                 * @instance
                 * @param {neutron.feerefunder.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @returns {Promise<neutron.feerefunder.MsgUpdateParamsResponse>} Promise
                 * @variation 2
                 */
    
                return Msg;
            })();
    
            feerefunder.MsgUpdateParams = (function() {
    
                /**
                 * Properties of a MsgUpdateParams.
                 * @memberof neutron.feerefunder
                 * @interface IMsgUpdateParams
                 * @property {string|null} [authority] MsgUpdateParams authority
                 * @property {neutron.feerefunder.IParams|null} [params] MsgUpdateParams params
                 */
    
                /**
                 * Constructs a new MsgUpdateParams.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a MsgUpdateParams.
                 * @implements IMsgUpdateParams
                 * @constructor
                 * @param {neutron.feerefunder.IMsgUpdateParams=} [properties] Properties to set
                 */
                function MsgUpdateParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgUpdateParams authority.
                 * @member {string} authority
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.authority = "";
    
                /**
                 * MsgUpdateParams params.
                 * @member {neutron.feerefunder.IParams|null|undefined} params
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.params = null;
    
                /**
                 * Encodes the specified MsgUpdateParams message. Does not implicitly {@link neutron.feerefunder.MsgUpdateParams.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @static
                 * @param {neutron.feerefunder.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.authority);
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.feerefunder.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParams message, length delimited. Does not implicitly {@link neutron.feerefunder.MsgUpdateParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @static
                 * @param {neutron.feerefunder.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.MsgUpdateParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.authority = reader.string();
                            break;
                        case 2:
                            message.params = $root.neutron.feerefunder.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParams message.
                 * @function verify
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        if (!$util.isString(message.authority))
                            return "authority: string expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.feerefunder.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.MsgUpdateParams} MsgUpdateParams
                 */
                MsgUpdateParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.MsgUpdateParams)
                        return object;
                    var message = new $root.neutron.feerefunder.MsgUpdateParams();
                    if (object.authority != null)
                        message.authority = String(object.authority);
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.feerefunder.MsgUpdateParams.params: object expected");
                        message.params = $root.neutron.feerefunder.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @static
                 * @param {neutron.feerefunder.MsgUpdateParams} message MsgUpdateParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.authority = "";
                        object.params = null;
                    }
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        object.authority = message.authority;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.feerefunder.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this MsgUpdateParams to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.MsgUpdateParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParams;
            })();
    
            feerefunder.MsgUpdateParamsResponse = (function() {
    
                /**
                 * Properties of a MsgUpdateParamsResponse.
                 * @memberof neutron.feerefunder
                 * @interface IMsgUpdateParamsResponse
                 */
    
                /**
                 * Constructs a new MsgUpdateParamsResponse.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a MsgUpdateParamsResponse.
                 * @implements IMsgUpdateParamsResponse
                 * @constructor
                 * @param {neutron.feerefunder.IMsgUpdateParamsResponse=} [properties] Properties to set
                 */
                function MsgUpdateParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message. Does not implicitly {@link neutron.feerefunder.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.feerefunder.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message, length delimited. Does not implicitly {@link neutron.feerefunder.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.feerefunder.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.MsgUpdateParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParamsResponse message.
                 * @function verify
                 * @memberof neutron.feerefunder.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 */
                MsgUpdateParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.MsgUpdateParamsResponse)
                        return object;
                    return new $root.neutron.feerefunder.MsgUpdateParamsResponse();
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.feerefunder.MsgUpdateParamsResponse} message MsgUpdateParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParamsResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgUpdateParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.MsgUpdateParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParamsResponse;
            })();
    
            feerefunder.Params = (function() {
    
                /**
                 * Properties of a Params.
                 * @memberof neutron.feerefunder
                 * @interface IParams
                 * @property {neutron.feerefunder.IFee|null} [min_fee] Params min_fee
                 */
    
                /**
                 * Constructs a new Params.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {neutron.feerefunder.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Params min_fee.
                 * @member {neutron.feerefunder.IFee|null|undefined} min_fee
                 * @memberof neutron.feerefunder.Params
                 * @instance
                 */
                Params.prototype.min_fee = null;
    
                /**
                 * Encodes the specified Params message. Does not implicitly {@link neutron.feerefunder.Params.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.Params
                 * @static
                 * @param {neutron.feerefunder.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.min_fee != null && Object.hasOwnProperty.call(message, "min_fee"))
                        $root.neutron.feerefunder.Fee.encode(message.min_fee, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link neutron.feerefunder.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.Params
                 * @static
                 * @param {neutron.feerefunder.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.Params();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.min_fee = $root.neutron.feerefunder.Fee.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof neutron.feerefunder.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.min_fee != null && message.hasOwnProperty("min_fee")) {
                        var error = $root.neutron.feerefunder.Fee.verify(message.min_fee);
                        if (error)
                            return "min_fee." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.Params)
                        return object;
                    var message = new $root.neutron.feerefunder.Params();
                    if (object.min_fee != null) {
                        if (typeof object.min_fee !== "object")
                            throw TypeError(".neutron.feerefunder.Params.min_fee: object expected");
                        message.min_fee = $root.neutron.feerefunder.Fee.fromObject(object.min_fee);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.Params
                 * @static
                 * @param {neutron.feerefunder.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.min_fee = null;
                    if (message.min_fee != null && message.hasOwnProperty("min_fee"))
                        object.min_fee = $root.neutron.feerefunder.Fee.toObject(message.min_fee, options);
                    return object;
                };
    
                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Params;
            })();
    
            feerefunder.Fee = (function() {
    
                /**
                 * Properties of a Fee.
                 * @memberof neutron.feerefunder
                 * @interface IFee
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [recv_fee] Fee recv_fee
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [ack_fee] Fee ack_fee
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [timeout_fee] Fee timeout_fee
                 */
    
                /**
                 * Constructs a new Fee.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a Fee.
                 * @implements IFee
                 * @constructor
                 * @param {neutron.feerefunder.IFee=} [properties] Properties to set
                 */
                function Fee(properties) {
                    this.recv_fee = [];
                    this.ack_fee = [];
                    this.timeout_fee = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Fee recv_fee.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} recv_fee
                 * @memberof neutron.feerefunder.Fee
                 * @instance
                 */
                Fee.prototype.recv_fee = $util.emptyArray;
    
                /**
                 * Fee ack_fee.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} ack_fee
                 * @memberof neutron.feerefunder.Fee
                 * @instance
                 */
                Fee.prototype.ack_fee = $util.emptyArray;
    
                /**
                 * Fee timeout_fee.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} timeout_fee
                 * @memberof neutron.feerefunder.Fee
                 * @instance
                 */
                Fee.prototype.timeout_fee = $util.emptyArray;
    
                /**
                 * Encodes the specified Fee message. Does not implicitly {@link neutron.feerefunder.Fee.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.Fee
                 * @static
                 * @param {neutron.feerefunder.IFee} message Fee message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Fee.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.recv_fee != null && message.recv_fee.length)
                        for (var i = 0; i < message.recv_fee.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.recv_fee[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.ack_fee != null && message.ack_fee.length)
                        for (var i = 0; i < message.ack_fee.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.ack_fee[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.timeout_fee != null && message.timeout_fee.length)
                        for (var i = 0; i < message.timeout_fee.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.timeout_fee[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Fee message, length delimited. Does not implicitly {@link neutron.feerefunder.Fee.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.Fee
                 * @static
                 * @param {neutron.feerefunder.IFee} message Fee message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Fee.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Fee message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.Fee
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.Fee} Fee
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Fee.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.Fee();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.recv_fee && message.recv_fee.length))
                                message.recv_fee = [];
                            message.recv_fee.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            if (!(message.ack_fee && message.ack_fee.length))
                                message.ack_fee = [];
                            message.ack_fee.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.timeout_fee && message.timeout_fee.length))
                                message.timeout_fee = [];
                            message.timeout_fee.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Fee message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.Fee
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.Fee} Fee
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Fee.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Fee message.
                 * @function verify
                 * @memberof neutron.feerefunder.Fee
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Fee.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.recv_fee != null && message.hasOwnProperty("recv_fee")) {
                        if (!Array.isArray(message.recv_fee))
                            return "recv_fee: array expected";
                        for (var i = 0; i < message.recv_fee.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.recv_fee[i]);
                            if (error)
                                return "recv_fee." + error;
                        }
                    }
                    if (message.ack_fee != null && message.hasOwnProperty("ack_fee")) {
                        if (!Array.isArray(message.ack_fee))
                            return "ack_fee: array expected";
                        for (var i = 0; i < message.ack_fee.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.ack_fee[i]);
                            if (error)
                                return "ack_fee." + error;
                        }
                    }
                    if (message.timeout_fee != null && message.hasOwnProperty("timeout_fee")) {
                        if (!Array.isArray(message.timeout_fee))
                            return "timeout_fee: array expected";
                        for (var i = 0; i < message.timeout_fee.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.timeout_fee[i]);
                            if (error)
                                return "timeout_fee." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Fee message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.Fee
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.Fee} Fee
                 */
                Fee.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.Fee)
                        return object;
                    var message = new $root.neutron.feerefunder.Fee();
                    if (object.recv_fee) {
                        if (!Array.isArray(object.recv_fee))
                            throw TypeError(".neutron.feerefunder.Fee.recv_fee: array expected");
                        message.recv_fee = [];
                        for (var i = 0; i < object.recv_fee.length; ++i) {
                            if (typeof object.recv_fee[i] !== "object")
                                throw TypeError(".neutron.feerefunder.Fee.recv_fee: object expected");
                            message.recv_fee[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.recv_fee[i]);
                        }
                    }
                    if (object.ack_fee) {
                        if (!Array.isArray(object.ack_fee))
                            throw TypeError(".neutron.feerefunder.Fee.ack_fee: array expected");
                        message.ack_fee = [];
                        for (var i = 0; i < object.ack_fee.length; ++i) {
                            if (typeof object.ack_fee[i] !== "object")
                                throw TypeError(".neutron.feerefunder.Fee.ack_fee: object expected");
                            message.ack_fee[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.ack_fee[i]);
                        }
                    }
                    if (object.timeout_fee) {
                        if (!Array.isArray(object.timeout_fee))
                            throw TypeError(".neutron.feerefunder.Fee.timeout_fee: array expected");
                        message.timeout_fee = [];
                        for (var i = 0; i < object.timeout_fee.length; ++i) {
                            if (typeof object.timeout_fee[i] !== "object")
                                throw TypeError(".neutron.feerefunder.Fee.timeout_fee: object expected");
                            message.timeout_fee[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.timeout_fee[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Fee message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.Fee
                 * @static
                 * @param {neutron.feerefunder.Fee} message Fee
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Fee.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.recv_fee = [];
                        object.ack_fee = [];
                        object.timeout_fee = [];
                    }
                    if (message.recv_fee && message.recv_fee.length) {
                        object.recv_fee = [];
                        for (var j = 0; j < message.recv_fee.length; ++j)
                            object.recv_fee[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.recv_fee[j], options);
                    }
                    if (message.ack_fee && message.ack_fee.length) {
                        object.ack_fee = [];
                        for (var j = 0; j < message.ack_fee.length; ++j)
                            object.ack_fee[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.ack_fee[j], options);
                    }
                    if (message.timeout_fee && message.timeout_fee.length) {
                        object.timeout_fee = [];
                        for (var j = 0; j < message.timeout_fee.length; ++j)
                            object.timeout_fee[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.timeout_fee[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Fee to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.Fee
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Fee.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Fee;
            })();
    
            feerefunder.PacketID = (function() {
    
                /**
                 * Properties of a PacketID.
                 * @memberof neutron.feerefunder
                 * @interface IPacketID
                 * @property {string|null} [channel_id] PacketID channel_id
                 * @property {string|null} [port_id] PacketID port_id
                 * @property {Long|null} [sequence] PacketID sequence
                 */
    
                /**
                 * Constructs a new PacketID.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a PacketID.
                 * @implements IPacketID
                 * @constructor
                 * @param {neutron.feerefunder.IPacketID=} [properties] Properties to set
                 */
                function PacketID(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PacketID channel_id.
                 * @member {string} channel_id
                 * @memberof neutron.feerefunder.PacketID
                 * @instance
                 */
                PacketID.prototype.channel_id = "";
    
                /**
                 * PacketID port_id.
                 * @member {string} port_id
                 * @memberof neutron.feerefunder.PacketID
                 * @instance
                 */
                PacketID.prototype.port_id = "";
    
                /**
                 * PacketID sequence.
                 * @member {Long} sequence
                 * @memberof neutron.feerefunder.PacketID
                 * @instance
                 */
                PacketID.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified PacketID message. Does not implicitly {@link neutron.feerefunder.PacketID.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.PacketID
                 * @static
                 * @param {neutron.feerefunder.IPacketID} message PacketID message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PacketID.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.channel_id);
                    if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.port_id);
                    if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                    return writer;
                };
    
                /**
                 * Encodes the specified PacketID message, length delimited. Does not implicitly {@link neutron.feerefunder.PacketID.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.PacketID
                 * @static
                 * @param {neutron.feerefunder.IPacketID} message PacketID message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PacketID.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PacketID message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.PacketID
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.PacketID} PacketID
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PacketID.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.PacketID();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.channel_id = reader.string();
                            break;
                        case 2:
                            message.port_id = reader.string();
                            break;
                        case 3:
                            message.sequence = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PacketID message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.PacketID
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.PacketID} PacketID
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PacketID.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PacketID message.
                 * @function verify
                 * @memberof neutron.feerefunder.PacketID
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PacketID.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                        if (!$util.isString(message.channel_id))
                            return "channel_id: string expected";
                    if (message.port_id != null && message.hasOwnProperty("port_id"))
                        if (!$util.isString(message.port_id))
                            return "port_id: string expected";
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                            return "sequence: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a PacketID message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.PacketID
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.PacketID} PacketID
                 */
                PacketID.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.PacketID)
                        return object;
                    var message = new $root.neutron.feerefunder.PacketID();
                    if (object.channel_id != null)
                        message.channel_id = String(object.channel_id);
                    if (object.port_id != null)
                        message.port_id = String(object.port_id);
                    if (object.sequence != null)
                        if ($util.Long)
                            (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                        else if (typeof object.sequence === "string")
                            message.sequence = parseInt(object.sequence, 10);
                        else if (typeof object.sequence === "number")
                            message.sequence = object.sequence;
                        else if (typeof object.sequence === "object")
                            message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a PacketID message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.PacketID
                 * @static
                 * @param {neutron.feerefunder.PacketID} message PacketID
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PacketID.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.channel_id = "";
                        object.port_id = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sequence = options.longs === String ? "0" : 0;
                    }
                    if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                        object.channel_id = message.channel_id;
                    if (message.port_id != null && message.hasOwnProperty("port_id"))
                        object.port_id = message.port_id;
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (typeof message.sequence === "number")
                            object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                        else
                            object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                    return object;
                };
    
                /**
                 * Converts this PacketID to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.PacketID
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PacketID.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PacketID;
            })();
    
            feerefunder.Query = (function() {
    
                /**
                 * Constructs a new Query service.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                /**
                 * Callback as used by {@link neutron.feerefunder.Query#params}.
                 * @memberof neutron.feerefunder.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.feerefunder.QueryParamsResponse} [response] QueryParamsResponse
                 */
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.feerefunder.Query
                 * @instance
                 * @param {neutron.feerefunder.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {neutron.feerefunder.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.neutron.feerefunder.QueryParamsRequest, $root.neutron.feerefunder.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.feerefunder.Query
                 * @instance
                 * @param {neutron.feerefunder.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<neutron.feerefunder.QueryParamsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.feerefunder.Query#feeInfo}.
                 * @memberof neutron.feerefunder.Query
                 * @typedef FeeInfoCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.feerefunder.FeeInfoResponse} [response] FeeInfoResponse
                 */
    
                /**
                 * Calls FeeInfo.
                 * @function feeInfo
                 * @memberof neutron.feerefunder.Query
                 * @instance
                 * @param {neutron.feerefunder.IFeeInfoRequest} request FeeInfoRequest message or plain object
                 * @param {neutron.feerefunder.Query.FeeInfoCallback} callback Node-style callback called with the error, if any, and FeeInfoResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.feeInfo = function feeInfo(request, callback) {
                    return this.rpcCall(feeInfo, $root.neutron.feerefunder.FeeInfoRequest, $root.neutron.feerefunder.FeeInfoResponse, request, callback);
                }, "name", { value: "FeeInfo" });
    
                /**
                 * Calls FeeInfo.
                 * @function feeInfo
                 * @memberof neutron.feerefunder.Query
                 * @instance
                 * @param {neutron.feerefunder.IFeeInfoRequest} request FeeInfoRequest message or plain object
                 * @returns {Promise<neutron.feerefunder.FeeInfoResponse>} Promise
                 * @variation 2
                 */
    
                return Query;
            })();
    
            feerefunder.QueryParamsRequest = (function() {
    
                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof neutron.feerefunder
                 * @interface IQueryParamsRequest
                 */
    
                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {neutron.feerefunder.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link neutron.feerefunder.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.QueryParamsRequest
                 * @static
                 * @param {neutron.feerefunder.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link neutron.feerefunder.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.QueryParamsRequest
                 * @static
                 * @param {neutron.feerefunder.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.QueryParamsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof neutron.feerefunder.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.QueryParamsRequest)
                        return object;
                    return new $root.neutron.feerefunder.QueryParamsRequest();
                };
    
                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.QueryParamsRequest
                 * @static
                 * @param {neutron.feerefunder.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsRequest;
            })();
    
            feerefunder.QueryParamsResponse = (function() {
    
                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof neutron.feerefunder
                 * @interface IQueryParamsResponse
                 * @property {neutron.feerefunder.IParams|null} [params] QueryParamsResponse params
                 */
    
                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {neutron.feerefunder.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryParamsResponse params.
                 * @member {neutron.feerefunder.IParams|null|undefined} params
                 * @memberof neutron.feerefunder.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;
    
                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link neutron.feerefunder.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.QueryParamsResponse
                 * @static
                 * @param {neutron.feerefunder.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.feerefunder.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link neutron.feerefunder.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.QueryParamsResponse
                 * @static
                 * @param {neutron.feerefunder.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.QueryParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.feerefunder.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof neutron.feerefunder.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.feerefunder.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.QueryParamsResponse)
                        return object;
                    var message = new $root.neutron.feerefunder.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.feerefunder.QueryParamsResponse.params: object expected");
                        message.params = $root.neutron.feerefunder.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.QueryParamsResponse
                 * @static
                 * @param {neutron.feerefunder.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.feerefunder.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsResponse;
            })();
    
            feerefunder.FeeInfoRequest = (function() {
    
                /**
                 * Properties of a FeeInfoRequest.
                 * @memberof neutron.feerefunder
                 * @interface IFeeInfoRequest
                 * @property {string|null} [channel_id] FeeInfoRequest channel_id
                 * @property {string|null} [port_id] FeeInfoRequest port_id
                 * @property {Long|null} [sequence] FeeInfoRequest sequence
                 */
    
                /**
                 * Constructs a new FeeInfoRequest.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a FeeInfoRequest.
                 * @implements IFeeInfoRequest
                 * @constructor
                 * @param {neutron.feerefunder.IFeeInfoRequest=} [properties] Properties to set
                 */
                function FeeInfoRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FeeInfoRequest channel_id.
                 * @member {string} channel_id
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @instance
                 */
                FeeInfoRequest.prototype.channel_id = "";
    
                /**
                 * FeeInfoRequest port_id.
                 * @member {string} port_id
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @instance
                 */
                FeeInfoRequest.prototype.port_id = "";
    
                /**
                 * FeeInfoRequest sequence.
                 * @member {Long} sequence
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @instance
                 */
                FeeInfoRequest.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified FeeInfoRequest message. Does not implicitly {@link neutron.feerefunder.FeeInfoRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @static
                 * @param {neutron.feerefunder.IFeeInfoRequest} message FeeInfoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeeInfoRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.channel_id);
                    if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.port_id);
                    if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                    return writer;
                };
    
                /**
                 * Encodes the specified FeeInfoRequest message, length delimited. Does not implicitly {@link neutron.feerefunder.FeeInfoRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @static
                 * @param {neutron.feerefunder.IFeeInfoRequest} message FeeInfoRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeeInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FeeInfoRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.FeeInfoRequest} FeeInfoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeeInfoRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.FeeInfoRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.channel_id = reader.string();
                            break;
                        case 2:
                            message.port_id = reader.string();
                            break;
                        case 3:
                            message.sequence = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FeeInfoRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.FeeInfoRequest} FeeInfoRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeeInfoRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FeeInfoRequest message.
                 * @function verify
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeeInfoRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                        if (!$util.isString(message.channel_id))
                            return "channel_id: string expected";
                    if (message.port_id != null && message.hasOwnProperty("port_id"))
                        if (!$util.isString(message.port_id))
                            return "port_id: string expected";
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                            return "sequence: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a FeeInfoRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.FeeInfoRequest} FeeInfoRequest
                 */
                FeeInfoRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.FeeInfoRequest)
                        return object;
                    var message = new $root.neutron.feerefunder.FeeInfoRequest();
                    if (object.channel_id != null)
                        message.channel_id = String(object.channel_id);
                    if (object.port_id != null)
                        message.port_id = String(object.port_id);
                    if (object.sequence != null)
                        if ($util.Long)
                            (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                        else if (typeof object.sequence === "string")
                            message.sequence = parseInt(object.sequence, 10);
                        else if (typeof object.sequence === "number")
                            message.sequence = object.sequence;
                        else if (typeof object.sequence === "object")
                            message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FeeInfoRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @static
                 * @param {neutron.feerefunder.FeeInfoRequest} message FeeInfoRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeeInfoRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.channel_id = "";
                        object.port_id = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sequence = options.longs === String ? "0" : 0;
                    }
                    if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                        object.channel_id = message.channel_id;
                    if (message.port_id != null && message.hasOwnProperty("port_id"))
                        object.port_id = message.port_id;
                    if (message.sequence != null && message.hasOwnProperty("sequence"))
                        if (typeof message.sequence === "number")
                            object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                        else
                            object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                    return object;
                };
    
                /**
                 * Converts this FeeInfoRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.FeeInfoRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeeInfoRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FeeInfoRequest;
            })();
    
            feerefunder.FeeInfoResponse = (function() {
    
                /**
                 * Properties of a FeeInfoResponse.
                 * @memberof neutron.feerefunder
                 * @interface IFeeInfoResponse
                 * @property {neutron.feerefunder.IFeeInfo|null} [fee_info] FeeInfoResponse fee_info
                 */
    
                /**
                 * Constructs a new FeeInfoResponse.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a FeeInfoResponse.
                 * @implements IFeeInfoResponse
                 * @constructor
                 * @param {neutron.feerefunder.IFeeInfoResponse=} [properties] Properties to set
                 */
                function FeeInfoResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FeeInfoResponse fee_info.
                 * @member {neutron.feerefunder.IFeeInfo|null|undefined} fee_info
                 * @memberof neutron.feerefunder.FeeInfoResponse
                 * @instance
                 */
                FeeInfoResponse.prototype.fee_info = null;
    
                /**
                 * Encodes the specified FeeInfoResponse message. Does not implicitly {@link neutron.feerefunder.FeeInfoResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.FeeInfoResponse
                 * @static
                 * @param {neutron.feerefunder.IFeeInfoResponse} message FeeInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeeInfoResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.fee_info != null && Object.hasOwnProperty.call(message, "fee_info"))
                        $root.neutron.feerefunder.FeeInfo.encode(message.fee_info, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FeeInfoResponse message, length delimited. Does not implicitly {@link neutron.feerefunder.FeeInfoResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.FeeInfoResponse
                 * @static
                 * @param {neutron.feerefunder.IFeeInfoResponse} message FeeInfoResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeeInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FeeInfoResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.FeeInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.FeeInfoResponse} FeeInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeeInfoResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.FeeInfoResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.fee_info = $root.neutron.feerefunder.FeeInfo.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FeeInfoResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.FeeInfoResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.FeeInfoResponse} FeeInfoResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeeInfoResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FeeInfoResponse message.
                 * @function verify
                 * @memberof neutron.feerefunder.FeeInfoResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeeInfoResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.fee_info != null && message.hasOwnProperty("fee_info")) {
                        var error = $root.neutron.feerefunder.FeeInfo.verify(message.fee_info);
                        if (error)
                            return "fee_info." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FeeInfoResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.FeeInfoResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.FeeInfoResponse} FeeInfoResponse
                 */
                FeeInfoResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.FeeInfoResponse)
                        return object;
                    var message = new $root.neutron.feerefunder.FeeInfoResponse();
                    if (object.fee_info != null) {
                        if (typeof object.fee_info !== "object")
                            throw TypeError(".neutron.feerefunder.FeeInfoResponse.fee_info: object expected");
                        message.fee_info = $root.neutron.feerefunder.FeeInfo.fromObject(object.fee_info);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FeeInfoResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.FeeInfoResponse
                 * @static
                 * @param {neutron.feerefunder.FeeInfoResponse} message FeeInfoResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeeInfoResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.fee_info = null;
                    if (message.fee_info != null && message.hasOwnProperty("fee_info"))
                        object.fee_info = $root.neutron.feerefunder.FeeInfo.toObject(message.fee_info, options);
                    return object;
                };
    
                /**
                 * Converts this FeeInfoResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.FeeInfoResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeeInfoResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FeeInfoResponse;
            })();
    
            feerefunder.GenesisState = (function() {
    
                /**
                 * Properties of a GenesisState.
                 * @memberof neutron.feerefunder
                 * @interface IGenesisState
                 * @property {neutron.feerefunder.IParams|null} [params] GenesisState params
                 * @property {Array.<neutron.feerefunder.IFeeInfo>|null} [fee_infos] GenesisState fee_infos
                 */
    
                /**
                 * Constructs a new GenesisState.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {neutron.feerefunder.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    this.fee_infos = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GenesisState params.
                 * @member {neutron.feerefunder.IParams|null|undefined} params
                 * @memberof neutron.feerefunder.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;
    
                /**
                 * GenesisState fee_infos.
                 * @member {Array.<neutron.feerefunder.IFeeInfo>} fee_infos
                 * @memberof neutron.feerefunder.GenesisState
                 * @instance
                 */
                GenesisState.prototype.fee_infos = $util.emptyArray;
    
                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link neutron.feerefunder.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.GenesisState
                 * @static
                 * @param {neutron.feerefunder.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.feerefunder.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fee_infos != null && message.fee_infos.length)
                        for (var i = 0; i < message.fee_infos.length; ++i)
                            $root.neutron.feerefunder.FeeInfo.encode(message.fee_infos[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link neutron.feerefunder.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.GenesisState
                 * @static
                 * @param {neutron.feerefunder.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.GenesisState();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.feerefunder.Params.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.fee_infos && message.fee_infos.length))
                                message.fee_infos = [];
                            message.fee_infos.push($root.neutron.feerefunder.FeeInfo.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof neutron.feerefunder.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.feerefunder.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    if (message.fee_infos != null && message.hasOwnProperty("fee_infos")) {
                        if (!Array.isArray(message.fee_infos))
                            return "fee_infos: array expected";
                        for (var i = 0; i < message.fee_infos.length; ++i) {
                            var error = $root.neutron.feerefunder.FeeInfo.verify(message.fee_infos[i]);
                            if (error)
                                return "fee_infos." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.GenesisState)
                        return object;
                    var message = new $root.neutron.feerefunder.GenesisState();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.feerefunder.GenesisState.params: object expected");
                        message.params = $root.neutron.feerefunder.Params.fromObject(object.params);
                    }
                    if (object.fee_infos) {
                        if (!Array.isArray(object.fee_infos))
                            throw TypeError(".neutron.feerefunder.GenesisState.fee_infos: array expected");
                        message.fee_infos = [];
                        for (var i = 0; i < object.fee_infos.length; ++i) {
                            if (typeof object.fee_infos[i] !== "object")
                                throw TypeError(".neutron.feerefunder.GenesisState.fee_infos: object expected");
                            message.fee_infos[i] = $root.neutron.feerefunder.FeeInfo.fromObject(object.fee_infos[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.GenesisState
                 * @static
                 * @param {neutron.feerefunder.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.fee_infos = [];
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.feerefunder.Params.toObject(message.params, options);
                    if (message.fee_infos && message.fee_infos.length) {
                        object.fee_infos = [];
                        for (var j = 0; j < message.fee_infos.length; ++j)
                            object.fee_infos[j] = $root.neutron.feerefunder.FeeInfo.toObject(message.fee_infos[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GenesisState;
            })();
    
            feerefunder.FeeInfo = (function() {
    
                /**
                 * Properties of a FeeInfo.
                 * @memberof neutron.feerefunder
                 * @interface IFeeInfo
                 * @property {string|null} [payer] FeeInfo payer
                 * @property {neutron.feerefunder.IPacketID|null} [packet_id] FeeInfo packet_id
                 * @property {neutron.feerefunder.IFee|null} [fee] FeeInfo fee
                 */
    
                /**
                 * Constructs a new FeeInfo.
                 * @memberof neutron.feerefunder
                 * @classdesc Represents a FeeInfo.
                 * @implements IFeeInfo
                 * @constructor
                 * @param {neutron.feerefunder.IFeeInfo=} [properties] Properties to set
                 */
                function FeeInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FeeInfo payer.
                 * @member {string} payer
                 * @memberof neutron.feerefunder.FeeInfo
                 * @instance
                 */
                FeeInfo.prototype.payer = "";
    
                /**
                 * FeeInfo packet_id.
                 * @member {neutron.feerefunder.IPacketID|null|undefined} packet_id
                 * @memberof neutron.feerefunder.FeeInfo
                 * @instance
                 */
                FeeInfo.prototype.packet_id = null;
    
                /**
                 * FeeInfo fee.
                 * @member {neutron.feerefunder.IFee|null|undefined} fee
                 * @memberof neutron.feerefunder.FeeInfo
                 * @instance
                 */
                FeeInfo.prototype.fee = null;
    
                /**
                 * Encodes the specified FeeInfo message. Does not implicitly {@link neutron.feerefunder.FeeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.feerefunder.FeeInfo
                 * @static
                 * @param {neutron.feerefunder.IFeeInfo} message FeeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.payer != null && Object.hasOwnProperty.call(message, "payer"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.payer);
                    if (message.packet_id != null && Object.hasOwnProperty.call(message, "packet_id"))
                        $root.neutron.feerefunder.PacketID.encode(message.packet_id, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.fee != null && Object.hasOwnProperty.call(message, "fee"))
                        $root.neutron.feerefunder.Fee.encode(message.fee, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FeeInfo message, length delimited. Does not implicitly {@link neutron.feerefunder.FeeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.feerefunder.FeeInfo
                 * @static
                 * @param {neutron.feerefunder.IFeeInfo} message FeeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FeeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FeeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.feerefunder.FeeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.feerefunder.FeeInfo} FeeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.feerefunder.FeeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.payer = reader.string();
                            break;
                        case 2:
                            message.packet_id = $root.neutron.feerefunder.PacketID.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.fee = $root.neutron.feerefunder.Fee.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FeeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.feerefunder.FeeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.feerefunder.FeeInfo} FeeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FeeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FeeInfo message.
                 * @function verify
                 * @memberof neutron.feerefunder.FeeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FeeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.payer != null && message.hasOwnProperty("payer"))
                        if (!$util.isString(message.payer))
                            return "payer: string expected";
                    if (message.packet_id != null && message.hasOwnProperty("packet_id")) {
                        var error = $root.neutron.feerefunder.PacketID.verify(message.packet_id);
                        if (error)
                            return "packet_id." + error;
                    }
                    if (message.fee != null && message.hasOwnProperty("fee")) {
                        var error = $root.neutron.feerefunder.Fee.verify(message.fee);
                        if (error)
                            return "fee." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FeeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.feerefunder.FeeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.feerefunder.FeeInfo} FeeInfo
                 */
                FeeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.feerefunder.FeeInfo)
                        return object;
                    var message = new $root.neutron.feerefunder.FeeInfo();
                    if (object.payer != null)
                        message.payer = String(object.payer);
                    if (object.packet_id != null) {
                        if (typeof object.packet_id !== "object")
                            throw TypeError(".neutron.feerefunder.FeeInfo.packet_id: object expected");
                        message.packet_id = $root.neutron.feerefunder.PacketID.fromObject(object.packet_id);
                    }
                    if (object.fee != null) {
                        if (typeof object.fee !== "object")
                            throw TypeError(".neutron.feerefunder.FeeInfo.fee: object expected");
                        message.fee = $root.neutron.feerefunder.Fee.fromObject(object.fee);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FeeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.feerefunder.FeeInfo
                 * @static
                 * @param {neutron.feerefunder.FeeInfo} message FeeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FeeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.payer = "";
                        object.packet_id = null;
                        object.fee = null;
                    }
                    if (message.payer != null && message.hasOwnProperty("payer"))
                        object.payer = message.payer;
                    if (message.packet_id != null && message.hasOwnProperty("packet_id"))
                        object.packet_id = $root.neutron.feerefunder.PacketID.toObject(message.packet_id, options);
                    if (message.fee != null && message.hasOwnProperty("fee"))
                        object.fee = $root.neutron.feerefunder.Fee.toObject(message.fee, options);
                    return object;
                };
    
                /**
                 * Converts this FeeInfo to JSON.
                 * @function toJSON
                 * @memberof neutron.feerefunder.FeeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FeeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FeeInfo;
            })();
    
            return feerefunder;
        })();
    
        neutron.interchainqueries = (function() {
    
            /**
             * Namespace interchainqueries.
             * @memberof neutron
             * @namespace
             */
            var interchainqueries = {};
    
            interchainqueries.Msg = (function() {
    
                /**
                 * Constructs a new Msg service.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Msg#registerInterchainQuery}.
                 * @memberof neutron.interchainqueries.Msg
                 * @typedef RegisterInterchainQueryCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.MsgRegisterInterchainQueryResponse} [response] MsgRegisterInterchainQueryResponse
                 */
    
                /**
                 * Calls RegisterInterchainQuery.
                 * @function registerInterchainQuery
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgRegisterInterchainQuery} request MsgRegisterInterchainQuery message or plain object
                 * @param {neutron.interchainqueries.Msg.RegisterInterchainQueryCallback} callback Node-style callback called with the error, if any, and MsgRegisterInterchainQueryResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.registerInterchainQuery = function registerInterchainQuery(request, callback) {
                    return this.rpcCall(registerInterchainQuery, $root.neutron.interchainqueries.MsgRegisterInterchainQuery, $root.neutron.interchainqueries.MsgRegisterInterchainQueryResponse, request, callback);
                }, "name", { value: "RegisterInterchainQuery" });
    
                /**
                 * Calls RegisterInterchainQuery.
                 * @function registerInterchainQuery
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgRegisterInterchainQuery} request MsgRegisterInterchainQuery message or plain object
                 * @returns {Promise<neutron.interchainqueries.MsgRegisterInterchainQueryResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Msg#submitQueryResult}.
                 * @memberof neutron.interchainqueries.Msg
                 * @typedef SubmitQueryResultCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.MsgSubmitQueryResultResponse} [response] MsgSubmitQueryResultResponse
                 */
    
                /**
                 * Calls SubmitQueryResult.
                 * @function submitQueryResult
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgSubmitQueryResult} request MsgSubmitQueryResult message or plain object
                 * @param {neutron.interchainqueries.Msg.SubmitQueryResultCallback} callback Node-style callback called with the error, if any, and MsgSubmitQueryResultResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.submitQueryResult = function submitQueryResult(request, callback) {
                    return this.rpcCall(submitQueryResult, $root.neutron.interchainqueries.MsgSubmitQueryResult, $root.neutron.interchainqueries.MsgSubmitQueryResultResponse, request, callback);
                }, "name", { value: "SubmitQueryResult" });
    
                /**
                 * Calls SubmitQueryResult.
                 * @function submitQueryResult
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgSubmitQueryResult} request MsgSubmitQueryResult message or plain object
                 * @returns {Promise<neutron.interchainqueries.MsgSubmitQueryResultResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Msg#removeInterchainQuery}.
                 * @memberof neutron.interchainqueries.Msg
                 * @typedef RemoveInterchainQueryCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.MsgRemoveInterchainQueryResponse} [response] MsgRemoveInterchainQueryResponse
                 */
    
                /**
                 * Calls RemoveInterchainQuery.
                 * @function removeInterchainQuery
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgRemoveInterchainQueryRequest} request MsgRemoveInterchainQueryRequest message or plain object
                 * @param {neutron.interchainqueries.Msg.RemoveInterchainQueryCallback} callback Node-style callback called with the error, if any, and MsgRemoveInterchainQueryResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.removeInterchainQuery = function removeInterchainQuery(request, callback) {
                    return this.rpcCall(removeInterchainQuery, $root.neutron.interchainqueries.MsgRemoveInterchainQueryRequest, $root.neutron.interchainqueries.MsgRemoveInterchainQueryResponse, request, callback);
                }, "name", { value: "RemoveInterchainQuery" });
    
                /**
                 * Calls RemoveInterchainQuery.
                 * @function removeInterchainQuery
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgRemoveInterchainQueryRequest} request MsgRemoveInterchainQueryRequest message or plain object
                 * @returns {Promise<neutron.interchainqueries.MsgRemoveInterchainQueryResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Msg#updateInterchainQuery}.
                 * @memberof neutron.interchainqueries.Msg
                 * @typedef UpdateInterchainQueryCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.MsgUpdateInterchainQueryResponse} [response] MsgUpdateInterchainQueryResponse
                 */
    
                /**
                 * Calls UpdateInterchainQuery.
                 * @function updateInterchainQuery
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgUpdateInterchainQueryRequest} request MsgUpdateInterchainQueryRequest message or plain object
                 * @param {neutron.interchainqueries.Msg.UpdateInterchainQueryCallback} callback Node-style callback called with the error, if any, and MsgUpdateInterchainQueryResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.updateInterchainQuery = function updateInterchainQuery(request, callback) {
                    return this.rpcCall(updateInterchainQuery, $root.neutron.interchainqueries.MsgUpdateInterchainQueryRequest, $root.neutron.interchainqueries.MsgUpdateInterchainQueryResponse, request, callback);
                }, "name", { value: "UpdateInterchainQuery" });
    
                /**
                 * Calls UpdateInterchainQuery.
                 * @function updateInterchainQuery
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgUpdateInterchainQueryRequest} request MsgUpdateInterchainQueryRequest message or plain object
                 * @returns {Promise<neutron.interchainqueries.MsgUpdateInterchainQueryResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Msg#updateParams}.
                 * @memberof neutron.interchainqueries.Msg
                 * @typedef UpdateParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.MsgUpdateParamsResponse} [response] MsgUpdateParamsResponse
                 */
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @param {neutron.interchainqueries.Msg.UpdateParamsCallback} callback Node-style callback called with the error, if any, and MsgUpdateParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.updateParams = function updateParams(request, callback) {
                    return this.rpcCall(updateParams, $root.neutron.interchainqueries.MsgUpdateParams, $root.neutron.interchainqueries.MsgUpdateParamsResponse, request, callback);
                }, "name", { value: "UpdateParams" });
    
                /**
                 * Calls UpdateParams.
                 * @function updateParams
                 * @memberof neutron.interchainqueries.Msg
                 * @instance
                 * @param {neutron.interchainqueries.IMsgUpdateParams} request MsgUpdateParams message or plain object
                 * @returns {Promise<neutron.interchainqueries.MsgUpdateParamsResponse>} Promise
                 * @variation 2
                 */
    
                return Msg;
            })();
    
            interchainqueries.MsgRegisterInterchainQuery = (function() {
    
                /**
                 * Properties of a MsgRegisterInterchainQuery.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgRegisterInterchainQuery
                 * @property {string|null} [query_type] MsgRegisterInterchainQuery query_type
                 * @property {Array.<neutron.interchainqueries.IKVKey>|null} [keys] MsgRegisterInterchainQuery keys
                 * @property {string|null} [transactions_filter] MsgRegisterInterchainQuery transactions_filter
                 * @property {string|null} [connection_id] MsgRegisterInterchainQuery connection_id
                 * @property {Long|null} [update_period] MsgRegisterInterchainQuery update_period
                 * @property {string|null} [sender] MsgRegisterInterchainQuery sender
                 */
    
                /**
                 * Constructs a new MsgRegisterInterchainQuery.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgRegisterInterchainQuery.
                 * @implements IMsgRegisterInterchainQuery
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgRegisterInterchainQuery=} [properties] Properties to set
                 */
                function MsgRegisterInterchainQuery(properties) {
                    this.keys = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgRegisterInterchainQuery query_type.
                 * @member {string} query_type
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @instance
                 */
                MsgRegisterInterchainQuery.prototype.query_type = "";
    
                /**
                 * MsgRegisterInterchainQuery keys.
                 * @member {Array.<neutron.interchainqueries.IKVKey>} keys
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @instance
                 */
                MsgRegisterInterchainQuery.prototype.keys = $util.emptyArray;
    
                /**
                 * MsgRegisterInterchainQuery transactions_filter.
                 * @member {string} transactions_filter
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @instance
                 */
                MsgRegisterInterchainQuery.prototype.transactions_filter = "";
    
                /**
                 * MsgRegisterInterchainQuery connection_id.
                 * @member {string} connection_id
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @instance
                 */
                MsgRegisterInterchainQuery.prototype.connection_id = "";
    
                /**
                 * MsgRegisterInterchainQuery update_period.
                 * @member {Long} update_period
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @instance
                 */
                MsgRegisterInterchainQuery.prototype.update_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgRegisterInterchainQuery sender.
                 * @member {string} sender
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @instance
                 */
                MsgRegisterInterchainQuery.prototype.sender = "";
    
                /**
                 * Encodes the specified MsgRegisterInterchainQuery message. Does not implicitly {@link neutron.interchainqueries.MsgRegisterInterchainQuery.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @static
                 * @param {neutron.interchainqueries.IMsgRegisterInterchainQuery} message MsgRegisterInterchainQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRegisterInterchainQuery.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.query_type != null && Object.hasOwnProperty.call(message, "query_type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.query_type);
                    if (message.keys != null && message.keys.length)
                        for (var i = 0; i < message.keys.length; ++i)
                            $root.neutron.interchainqueries.KVKey.encode(message.keys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.transactions_filter != null && Object.hasOwnProperty.call(message, "transactions_filter"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.transactions_filter);
                    if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.connection_id);
                    if (message.update_period != null && Object.hasOwnProperty.call(message, "update_period"))
                        writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.update_period);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.sender);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgRegisterInterchainQuery message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgRegisterInterchainQuery.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @static
                 * @param {neutron.interchainqueries.IMsgRegisterInterchainQuery} message MsgRegisterInterchainQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRegisterInterchainQuery.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgRegisterInterchainQuery message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgRegisterInterchainQuery} MsgRegisterInterchainQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRegisterInterchainQuery.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgRegisterInterchainQuery();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.query_type = reader.string();
                            break;
                        case 2:
                            if (!(message.keys && message.keys.length))
                                message.keys = [];
                            message.keys.push($root.neutron.interchainqueries.KVKey.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.transactions_filter = reader.string();
                            break;
                        case 4:
                            message.connection_id = reader.string();
                            break;
                        case 5:
                            message.update_period = reader.uint64();
                            break;
                        case 6:
                            message.sender = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgRegisterInterchainQuery message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgRegisterInterchainQuery} MsgRegisterInterchainQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRegisterInterchainQuery.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgRegisterInterchainQuery message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgRegisterInterchainQuery.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.query_type != null && message.hasOwnProperty("query_type"))
                        if (!$util.isString(message.query_type))
                            return "query_type: string expected";
                    if (message.keys != null && message.hasOwnProperty("keys")) {
                        if (!Array.isArray(message.keys))
                            return "keys: array expected";
                        for (var i = 0; i < message.keys.length; ++i) {
                            var error = $root.neutron.interchainqueries.KVKey.verify(message.keys[i]);
                            if (error)
                                return "keys." + error;
                        }
                    }
                    if (message.transactions_filter != null && message.hasOwnProperty("transactions_filter"))
                        if (!$util.isString(message.transactions_filter))
                            return "transactions_filter: string expected";
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        if (!$util.isString(message.connection_id))
                            return "connection_id: string expected";
                    if (message.update_period != null && message.hasOwnProperty("update_period"))
                        if (!$util.isInteger(message.update_period) && !(message.update_period && $util.isInteger(message.update_period.low) && $util.isInteger(message.update_period.high)))
                            return "update_period: integer|Long expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgRegisterInterchainQuery message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgRegisterInterchainQuery} MsgRegisterInterchainQuery
                 */
                MsgRegisterInterchainQuery.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgRegisterInterchainQuery)
                        return object;
                    var message = new $root.neutron.interchainqueries.MsgRegisterInterchainQuery();
                    if (object.query_type != null)
                        message.query_type = String(object.query_type);
                    if (object.keys) {
                        if (!Array.isArray(object.keys))
                            throw TypeError(".neutron.interchainqueries.MsgRegisterInterchainQuery.keys: array expected");
                        message.keys = [];
                        for (var i = 0; i < object.keys.length; ++i) {
                            if (typeof object.keys[i] !== "object")
                                throw TypeError(".neutron.interchainqueries.MsgRegisterInterchainQuery.keys: object expected");
                            message.keys[i] = $root.neutron.interchainqueries.KVKey.fromObject(object.keys[i]);
                        }
                    }
                    if (object.transactions_filter != null)
                        message.transactions_filter = String(object.transactions_filter);
                    if (object.connection_id != null)
                        message.connection_id = String(object.connection_id);
                    if (object.update_period != null)
                        if ($util.Long)
                            (message.update_period = $util.Long.fromValue(object.update_period)).unsigned = true;
                        else if (typeof object.update_period === "string")
                            message.update_period = parseInt(object.update_period, 10);
                        else if (typeof object.update_period === "number")
                            message.update_period = object.update_period;
                        else if (typeof object.update_period === "object")
                            message.update_period = new $util.LongBits(object.update_period.low >>> 0, object.update_period.high >>> 0).toNumber(true);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgRegisterInterchainQuery message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @static
                 * @param {neutron.interchainqueries.MsgRegisterInterchainQuery} message MsgRegisterInterchainQuery
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgRegisterInterchainQuery.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.keys = [];
                    if (options.defaults) {
                        object.query_type = "";
                        object.transactions_filter = "";
                        object.connection_id = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.update_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.update_period = options.longs === String ? "0" : 0;
                        object.sender = "";
                    }
                    if (message.query_type != null && message.hasOwnProperty("query_type"))
                        object.query_type = message.query_type;
                    if (message.keys && message.keys.length) {
                        object.keys = [];
                        for (var j = 0; j < message.keys.length; ++j)
                            object.keys[j] = $root.neutron.interchainqueries.KVKey.toObject(message.keys[j], options);
                    }
                    if (message.transactions_filter != null && message.hasOwnProperty("transactions_filter"))
                        object.transactions_filter = message.transactions_filter;
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        object.connection_id = message.connection_id;
                    if (message.update_period != null && message.hasOwnProperty("update_period"))
                        if (typeof message.update_period === "number")
                            object.update_period = options.longs === String ? String(message.update_period) : message.update_period;
                        else
                            object.update_period = options.longs === String ? $util.Long.prototype.toString.call(message.update_period) : options.longs === Number ? new $util.LongBits(message.update_period.low >>> 0, message.update_period.high >>> 0).toNumber(true) : message.update_period;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    return object;
                };
    
                /**
                 * Converts this MsgRegisterInterchainQuery to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQuery
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgRegisterInterchainQuery.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgRegisterInterchainQuery;
            })();
    
            interchainqueries.MsgRegisterInterchainQueryResponse = (function() {
    
                /**
                 * Properties of a MsgRegisterInterchainQueryResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgRegisterInterchainQueryResponse
                 * @property {Long|null} [id] MsgRegisterInterchainQueryResponse id
                 */
    
                /**
                 * Constructs a new MsgRegisterInterchainQueryResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgRegisterInterchainQueryResponse.
                 * @implements IMsgRegisterInterchainQueryResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgRegisterInterchainQueryResponse=} [properties] Properties to set
                 */
                function MsgRegisterInterchainQueryResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgRegisterInterchainQueryResponse id.
                 * @member {Long} id
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQueryResponse
                 * @instance
                 */
                MsgRegisterInterchainQueryResponse.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified MsgRegisterInterchainQueryResponse message. Does not implicitly {@link neutron.interchainqueries.MsgRegisterInterchainQueryResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgRegisterInterchainQueryResponse} message MsgRegisterInterchainQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRegisterInterchainQueryResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgRegisterInterchainQueryResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgRegisterInterchainQueryResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgRegisterInterchainQueryResponse} message MsgRegisterInterchainQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRegisterInterchainQueryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgRegisterInterchainQueryResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQueryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgRegisterInterchainQueryResponse} MsgRegisterInterchainQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRegisterInterchainQueryResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgRegisterInterchainQueryResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgRegisterInterchainQueryResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQueryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgRegisterInterchainQueryResponse} MsgRegisterInterchainQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRegisterInterchainQueryResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgRegisterInterchainQueryResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQueryResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgRegisterInterchainQueryResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                            return "id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a MsgRegisterInterchainQueryResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQueryResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgRegisterInterchainQueryResponse} MsgRegisterInterchainQueryResponse
                 */
                MsgRegisterInterchainQueryResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgRegisterInterchainQueryResponse)
                        return object;
                    var message = new $root.neutron.interchainqueries.MsgRegisterInterchainQueryResponse();
                    if (object.id != null)
                        if ($util.Long)
                            (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                        else if (typeof object.id === "string")
                            message.id = parseInt(object.id, 10);
                        else if (typeof object.id === "number")
                            message.id = object.id;
                        else if (typeof object.id === "object")
                            message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgRegisterInterchainQueryResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.MsgRegisterInterchainQueryResponse} message MsgRegisterInterchainQueryResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgRegisterInterchainQueryResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.id = options.longs === String ? "0" : 0;
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (typeof message.id === "number")
                            object.id = options.longs === String ? String(message.id) : message.id;
                        else
                            object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
                    return object;
                };
    
                /**
                 * Converts this MsgRegisterInterchainQueryResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgRegisterInterchainQueryResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgRegisterInterchainQueryResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgRegisterInterchainQueryResponse;
            })();
    
            interchainqueries.MsgSubmitQueryResult = (function() {
    
                /**
                 * Properties of a MsgSubmitQueryResult.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgSubmitQueryResult
                 * @property {Long|null} [query_id] MsgSubmitQueryResult query_id
                 * @property {string|null} [sender] MsgSubmitQueryResult sender
                 * @property {string|null} [client_id] MsgSubmitQueryResult client_id
                 * @property {neutron.interchainqueries.IQueryResult|null} [result] MsgSubmitQueryResult result
                 */
    
                /**
                 * Constructs a new MsgSubmitQueryResult.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgSubmitQueryResult.
                 * @implements IMsgSubmitQueryResult
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgSubmitQueryResult=} [properties] Properties to set
                 */
                function MsgSubmitQueryResult(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgSubmitQueryResult query_id.
                 * @member {Long} query_id
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @instance
                 */
                MsgSubmitQueryResult.prototype.query_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgSubmitQueryResult sender.
                 * @member {string} sender
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @instance
                 */
                MsgSubmitQueryResult.prototype.sender = "";
    
                /**
                 * MsgSubmitQueryResult client_id.
                 * @member {string} client_id
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @instance
                 */
                MsgSubmitQueryResult.prototype.client_id = "";
    
                /**
                 * MsgSubmitQueryResult result.
                 * @member {neutron.interchainqueries.IQueryResult|null|undefined} result
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @instance
                 */
                MsgSubmitQueryResult.prototype.result = null;
    
                /**
                 * Encodes the specified MsgSubmitQueryResult message. Does not implicitly {@link neutron.interchainqueries.MsgSubmitQueryResult.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @static
                 * @param {neutron.interchainqueries.IMsgSubmitQueryResult} message MsgSubmitQueryResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSubmitQueryResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.query_id != null && Object.hasOwnProperty.call(message, "query_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.query_id);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.sender);
                    if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.client_id);
                    if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                        $root.neutron.interchainqueries.QueryResult.encode(message.result, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgSubmitQueryResult message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgSubmitQueryResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @static
                 * @param {neutron.interchainqueries.IMsgSubmitQueryResult} message MsgSubmitQueryResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSubmitQueryResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgSubmitQueryResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgSubmitQueryResult} MsgSubmitQueryResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSubmitQueryResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgSubmitQueryResult();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.query_id = reader.uint64();
                            break;
                        case 2:
                            message.sender = reader.string();
                            break;
                        case 3:
                            message.client_id = reader.string();
                            break;
                        case 4:
                            message.result = $root.neutron.interchainqueries.QueryResult.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgSubmitQueryResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgSubmitQueryResult} MsgSubmitQueryResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSubmitQueryResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgSubmitQueryResult message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgSubmitQueryResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (!$util.isInteger(message.query_id) && !(message.query_id && $util.isInteger(message.query_id.low) && $util.isInteger(message.query_id.high)))
                            return "query_id: integer|Long expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        if (!$util.isString(message.client_id))
                            return "client_id: string expected";
                    if (message.result != null && message.hasOwnProperty("result")) {
                        var error = $root.neutron.interchainqueries.QueryResult.verify(message.result);
                        if (error)
                            return "result." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MsgSubmitQueryResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgSubmitQueryResult} MsgSubmitQueryResult
                 */
                MsgSubmitQueryResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgSubmitQueryResult)
                        return object;
                    var message = new $root.neutron.interchainqueries.MsgSubmitQueryResult();
                    if (object.query_id != null)
                        if ($util.Long)
                            (message.query_id = $util.Long.fromValue(object.query_id)).unsigned = true;
                        else if (typeof object.query_id === "string")
                            message.query_id = parseInt(object.query_id, 10);
                        else if (typeof object.query_id === "number")
                            message.query_id = object.query_id;
                        else if (typeof object.query_id === "object")
                            message.query_id = new $util.LongBits(object.query_id.low >>> 0, object.query_id.high >>> 0).toNumber(true);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    if (object.client_id != null)
                        message.client_id = String(object.client_id);
                    if (object.result != null) {
                        if (typeof object.result !== "object")
                            throw TypeError(".neutron.interchainqueries.MsgSubmitQueryResult.result: object expected");
                        message.result = $root.neutron.interchainqueries.QueryResult.fromObject(object.result);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgSubmitQueryResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @static
                 * @param {neutron.interchainqueries.MsgSubmitQueryResult} message MsgSubmitQueryResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgSubmitQueryResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.query_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.query_id = options.longs === String ? "0" : 0;
                        object.sender = "";
                        object.client_id = "";
                        object.result = null;
                    }
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (typeof message.query_id === "number")
                            object.query_id = options.longs === String ? String(message.query_id) : message.query_id;
                        else
                            object.query_id = options.longs === String ? $util.Long.prototype.toString.call(message.query_id) : options.longs === Number ? new $util.LongBits(message.query_id.low >>> 0, message.query_id.high >>> 0).toNumber(true) : message.query_id;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    if (message.client_id != null && message.hasOwnProperty("client_id"))
                        object.client_id = message.client_id;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = $root.neutron.interchainqueries.QueryResult.toObject(message.result, options);
                    return object;
                };
    
                /**
                 * Converts this MsgSubmitQueryResult to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgSubmitQueryResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgSubmitQueryResult;
            })();
    
            interchainqueries.QueryResult = (function() {
    
                /**
                 * Properties of a QueryResult.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryResult
                 * @property {Array.<neutron.interchainqueries.IStorageValue>|null} [kv_results] QueryResult kv_results
                 * @property {neutron.interchainqueries.IBlock|null} [block] QueryResult block
                 * @property {Long|null} [height] QueryResult height
                 * @property {Long|null} [revision] QueryResult revision
                 * @property {boolean|null} [allow_kv_callbacks] QueryResult allow_kv_callbacks
                 */
    
                /**
                 * Constructs a new QueryResult.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryResult.
                 * @implements IQueryResult
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryResult=} [properties] Properties to set
                 */
                function QueryResult(properties) {
                    this.kv_results = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryResult kv_results.
                 * @member {Array.<neutron.interchainqueries.IStorageValue>} kv_results
                 * @memberof neutron.interchainqueries.QueryResult
                 * @instance
                 */
                QueryResult.prototype.kv_results = $util.emptyArray;
    
                /**
                 * QueryResult block.
                 * @member {neutron.interchainqueries.IBlock|null|undefined} block
                 * @memberof neutron.interchainqueries.QueryResult
                 * @instance
                 */
                QueryResult.prototype.block = null;
    
                /**
                 * QueryResult height.
                 * @member {Long} height
                 * @memberof neutron.interchainqueries.QueryResult
                 * @instance
                 */
                QueryResult.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryResult revision.
                 * @member {Long} revision
                 * @memberof neutron.interchainqueries.QueryResult
                 * @instance
                 */
                QueryResult.prototype.revision = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * QueryResult allow_kv_callbacks.
                 * @member {boolean} allow_kv_callbacks
                 * @memberof neutron.interchainqueries.QueryResult
                 * @instance
                 */
                QueryResult.prototype.allow_kv_callbacks = false;
    
                /**
                 * Encodes the specified QueryResult message. Does not implicitly {@link neutron.interchainqueries.QueryResult.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryResult
                 * @static
                 * @param {neutron.interchainqueries.IQueryResult} message QueryResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kv_results != null && message.kv_results.length)
                        for (var i = 0; i < message.kv_results.length; ++i)
                            $root.neutron.interchainqueries.StorageValue.encode(message.kv_results[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                        $root.neutron.interchainqueries.Block.encode(message.block, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.height);
                    if (message.revision != null && Object.hasOwnProperty.call(message, "revision"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.revision);
                    if (message.allow_kv_callbacks != null && Object.hasOwnProperty.call(message, "allow_kv_callbacks"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.allow_kv_callbacks);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryResult message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryResult
                 * @static
                 * @param {neutron.interchainqueries.IQueryResult} message QueryResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryResult} QueryResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryResult();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.kv_results && message.kv_results.length))
                                message.kv_results = [];
                            message.kv_results.push($root.neutron.interchainqueries.StorageValue.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.block = $root.neutron.interchainqueries.Block.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.height = reader.uint64();
                            break;
                        case 4:
                            message.revision = reader.uint64();
                            break;
                        case 5:
                            message.allow_kv_callbacks = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryResult} QueryResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryResult message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kv_results != null && message.hasOwnProperty("kv_results")) {
                        if (!Array.isArray(message.kv_results))
                            return "kv_results: array expected";
                        for (var i = 0; i < message.kv_results.length; ++i) {
                            var error = $root.neutron.interchainqueries.StorageValue.verify(message.kv_results[i]);
                            if (error)
                                return "kv_results." + error;
                        }
                    }
                    if (message.block != null && message.hasOwnProperty("block")) {
                        var error = $root.neutron.interchainqueries.Block.verify(message.block);
                        if (error)
                            return "block." + error;
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        if (!$util.isInteger(message.revision) && !(message.revision && $util.isInteger(message.revision.low) && $util.isInteger(message.revision.high)))
                            return "revision: integer|Long expected";
                    if (message.allow_kv_callbacks != null && message.hasOwnProperty("allow_kv_callbacks"))
                        if (typeof message.allow_kv_callbacks !== "boolean")
                            return "allow_kv_callbacks: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a QueryResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryResult} QueryResult
                 */
                QueryResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryResult)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryResult();
                    if (object.kv_results) {
                        if (!Array.isArray(object.kv_results))
                            throw TypeError(".neutron.interchainqueries.QueryResult.kv_results: array expected");
                        message.kv_results = [];
                        for (var i = 0; i < object.kv_results.length; ++i) {
                            if (typeof object.kv_results[i] !== "object")
                                throw TypeError(".neutron.interchainqueries.QueryResult.kv_results: object expected");
                            message.kv_results[i] = $root.neutron.interchainqueries.StorageValue.fromObject(object.kv_results[i]);
                        }
                    }
                    if (object.block != null) {
                        if (typeof object.block !== "object")
                            throw TypeError(".neutron.interchainqueries.QueryResult.block: object expected");
                        message.block = $root.neutron.interchainqueries.Block.fromObject(object.block);
                    }
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                    if (object.revision != null)
                        if ($util.Long)
                            (message.revision = $util.Long.fromValue(object.revision)).unsigned = true;
                        else if (typeof object.revision === "string")
                            message.revision = parseInt(object.revision, 10);
                        else if (typeof object.revision === "number")
                            message.revision = object.revision;
                        else if (typeof object.revision === "object")
                            message.revision = new $util.LongBits(object.revision.low >>> 0, object.revision.high >>> 0).toNumber(true);
                    if (object.allow_kv_callbacks != null)
                        message.allow_kv_callbacks = Boolean(object.allow_kv_callbacks);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryResult
                 * @static
                 * @param {neutron.interchainqueries.QueryResult} message QueryResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.kv_results = [];
                    if (options.defaults) {
                        object.block = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.revision = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.revision = options.longs === String ? "0" : 0;
                        object.allow_kv_callbacks = false;
                    }
                    if (message.kv_results && message.kv_results.length) {
                        object.kv_results = [];
                        for (var j = 0; j < message.kv_results.length; ++j)
                            object.kv_results[j] = $root.neutron.interchainqueries.StorageValue.toObject(message.kv_results[j], options);
                    }
                    if (message.block != null && message.hasOwnProperty("block"))
                        object.block = $root.neutron.interchainqueries.Block.toObject(message.block, options);
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                    if (message.revision != null && message.hasOwnProperty("revision"))
                        if (typeof message.revision === "number")
                            object.revision = options.longs === String ? String(message.revision) : message.revision;
                        else
                            object.revision = options.longs === String ? $util.Long.prototype.toString.call(message.revision) : options.longs === Number ? new $util.LongBits(message.revision.low >>> 0, message.revision.high >>> 0).toNumber(true) : message.revision;
                    if (message.allow_kv_callbacks != null && message.hasOwnProperty("allow_kv_callbacks"))
                        object.allow_kv_callbacks = message.allow_kv_callbacks;
                    return object;
                };
    
                /**
                 * Converts this QueryResult to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryResult;
            })();
    
            interchainqueries.StorageValue = (function() {
    
                /**
                 * Properties of a StorageValue.
                 * @memberof neutron.interchainqueries
                 * @interface IStorageValue
                 * @property {string|null} [storage_prefix] StorageValue storage_prefix
                 * @property {Uint8Array|null} [key] StorageValue key
                 * @property {Uint8Array|null} [value] StorageValue value
                 * @property {tendermint.crypto.IProofOps|null} [Proof] StorageValue Proof
                 */
    
                /**
                 * Constructs a new StorageValue.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a StorageValue.
                 * @implements IStorageValue
                 * @constructor
                 * @param {neutron.interchainqueries.IStorageValue=} [properties] Properties to set
                 */
                function StorageValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * StorageValue storage_prefix.
                 * @member {string} storage_prefix
                 * @memberof neutron.interchainqueries.StorageValue
                 * @instance
                 */
                StorageValue.prototype.storage_prefix = "";
    
                /**
                 * StorageValue key.
                 * @member {Uint8Array} key
                 * @memberof neutron.interchainqueries.StorageValue
                 * @instance
                 */
                StorageValue.prototype.key = $util.newBuffer([]);
    
                /**
                 * StorageValue value.
                 * @member {Uint8Array} value
                 * @memberof neutron.interchainqueries.StorageValue
                 * @instance
                 */
                StorageValue.prototype.value = $util.newBuffer([]);
    
                /**
                 * StorageValue Proof.
                 * @member {tendermint.crypto.IProofOps|null|undefined} Proof
                 * @memberof neutron.interchainqueries.StorageValue
                 * @instance
                 */
                StorageValue.prototype.Proof = null;
    
                /**
                 * Encodes the specified StorageValue message. Does not implicitly {@link neutron.interchainqueries.StorageValue.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.StorageValue
                 * @static
                 * @param {neutron.interchainqueries.IStorageValue} message StorageValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StorageValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.storage_prefix != null && Object.hasOwnProperty.call(message, "storage_prefix"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.storage_prefix);
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.key);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.value);
                    if (message.Proof != null && Object.hasOwnProperty.call(message, "Proof"))
                        $root.tendermint.crypto.ProofOps.encode(message.Proof, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified StorageValue message, length delimited. Does not implicitly {@link neutron.interchainqueries.StorageValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.StorageValue
                 * @static
                 * @param {neutron.interchainqueries.IStorageValue} message StorageValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                StorageValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a StorageValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.StorageValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.StorageValue} StorageValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StorageValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.StorageValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.storage_prefix = reader.string();
                            break;
                        case 2:
                            message.key = reader.bytes();
                            break;
                        case 3:
                            message.value = reader.bytes();
                            break;
                        case 4:
                            message.Proof = $root.tendermint.crypto.ProofOps.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a StorageValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.StorageValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.StorageValue} StorageValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                StorageValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a StorageValue message.
                 * @function verify
                 * @memberof neutron.interchainqueries.StorageValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                StorageValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.storage_prefix != null && message.hasOwnProperty("storage_prefix"))
                        if (!$util.isString(message.storage_prefix))
                            return "storage_prefix: string expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                            return "key: buffer expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    if (message.Proof != null && message.hasOwnProperty("Proof")) {
                        var error = $root.tendermint.crypto.ProofOps.verify(message.Proof);
                        if (error)
                            return "Proof." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a StorageValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.StorageValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.StorageValue} StorageValue
                 */
                StorageValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.StorageValue)
                        return object;
                    var message = new $root.neutron.interchainqueries.StorageValue();
                    if (object.storage_prefix != null)
                        message.storage_prefix = String(object.storage_prefix);
                    if (object.key != null)
                        if (typeof object.key === "string")
                            $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                        else if (object.key.length)
                            message.key = object.key;
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    if (object.Proof != null) {
                        if (typeof object.Proof !== "object")
                            throw TypeError(".neutron.interchainqueries.StorageValue.Proof: object expected");
                        message.Proof = $root.tendermint.crypto.ProofOps.fromObject(object.Proof);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a StorageValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.StorageValue
                 * @static
                 * @param {neutron.interchainqueries.StorageValue} message StorageValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                StorageValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.storage_prefix = "";
                        if (options.bytes === String)
                            object.key = "";
                        else {
                            object.key = [];
                            if (options.bytes !== Array)
                                object.key = $util.newBuffer(object.key);
                        }
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                        object.Proof = null;
                    }
                    if (message.storage_prefix != null && message.hasOwnProperty("storage_prefix"))
                        object.storage_prefix = message.storage_prefix;
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    if (message.Proof != null && message.hasOwnProperty("Proof"))
                        object.Proof = $root.tendermint.crypto.ProofOps.toObject(message.Proof, options);
                    return object;
                };
    
                /**
                 * Converts this StorageValue to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.StorageValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                StorageValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return StorageValue;
            })();
    
            interchainqueries.Block = (function() {
    
                /**
                 * Properties of a Block.
                 * @memberof neutron.interchainqueries
                 * @interface IBlock
                 * @property {google.protobuf.IAny|null} [next_block_header] Block next_block_header
                 * @property {google.protobuf.IAny|null} [header] Block header
                 * @property {neutron.interchainqueries.ITxValue|null} [tx] Block tx
                 */
    
                /**
                 * Constructs a new Block.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a Block.
                 * @implements IBlock
                 * @constructor
                 * @param {neutron.interchainqueries.IBlock=} [properties] Properties to set
                 */
                function Block(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Block next_block_header.
                 * @member {google.protobuf.IAny|null|undefined} next_block_header
                 * @memberof neutron.interchainqueries.Block
                 * @instance
                 */
                Block.prototype.next_block_header = null;
    
                /**
                 * Block header.
                 * @member {google.protobuf.IAny|null|undefined} header
                 * @memberof neutron.interchainqueries.Block
                 * @instance
                 */
                Block.prototype.header = null;
    
                /**
                 * Block tx.
                 * @member {neutron.interchainqueries.ITxValue|null|undefined} tx
                 * @memberof neutron.interchainqueries.Block
                 * @instance
                 */
                Block.prototype.tx = null;
    
                /**
                 * Encodes the specified Block message. Does not implicitly {@link neutron.interchainqueries.Block.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.Block
                 * @static
                 * @param {neutron.interchainqueries.IBlock} message Block message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Block.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.next_block_header != null && Object.hasOwnProperty.call(message, "next_block_header"))
                        $root.google.protobuf.Any.encode(message.next_block_header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                        $root.google.protobuf.Any.encode(message.header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                        $root.neutron.interchainqueries.TxValue.encode(message.tx, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Block message, length delimited. Does not implicitly {@link neutron.interchainqueries.Block.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.Block
                 * @static
                 * @param {neutron.interchainqueries.IBlock} message Block message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Block.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Block message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.Block
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.Block} Block
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Block.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.Block();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.next_block_header = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.header = $root.google.protobuf.Any.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.tx = $root.neutron.interchainqueries.TxValue.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Block message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.Block
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.Block} Block
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Block.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Block message.
                 * @function verify
                 * @memberof neutron.interchainqueries.Block
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Block.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.next_block_header != null && message.hasOwnProperty("next_block_header")) {
                        var error = $root.google.protobuf.Any.verify(message.next_block_header);
                        if (error)
                            return "next_block_header." + error;
                    }
                    if (message.header != null && message.hasOwnProperty("header")) {
                        var error = $root.google.protobuf.Any.verify(message.header);
                        if (error)
                            return "header." + error;
                    }
                    if (message.tx != null && message.hasOwnProperty("tx")) {
                        var error = $root.neutron.interchainqueries.TxValue.verify(message.tx);
                        if (error)
                            return "tx." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a Block message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.Block
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.Block} Block
                 */
                Block.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.Block)
                        return object;
                    var message = new $root.neutron.interchainqueries.Block();
                    if (object.next_block_header != null) {
                        if (typeof object.next_block_header !== "object")
                            throw TypeError(".neutron.interchainqueries.Block.next_block_header: object expected");
                        message.next_block_header = $root.google.protobuf.Any.fromObject(object.next_block_header);
                    }
                    if (object.header != null) {
                        if (typeof object.header !== "object")
                            throw TypeError(".neutron.interchainqueries.Block.header: object expected");
                        message.header = $root.google.protobuf.Any.fromObject(object.header);
                    }
                    if (object.tx != null) {
                        if (typeof object.tx !== "object")
                            throw TypeError(".neutron.interchainqueries.Block.tx: object expected");
                        message.tx = $root.neutron.interchainqueries.TxValue.fromObject(object.tx);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Block message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.Block
                 * @static
                 * @param {neutron.interchainqueries.Block} message Block
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Block.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.next_block_header = null;
                        object.header = null;
                        object.tx = null;
                    }
                    if (message.next_block_header != null && message.hasOwnProperty("next_block_header"))
                        object.next_block_header = $root.google.protobuf.Any.toObject(message.next_block_header, options);
                    if (message.header != null && message.hasOwnProperty("header"))
                        object.header = $root.google.protobuf.Any.toObject(message.header, options);
                    if (message.tx != null && message.hasOwnProperty("tx"))
                        object.tx = $root.neutron.interchainqueries.TxValue.toObject(message.tx, options);
                    return object;
                };
    
                /**
                 * Converts this Block to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.Block
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Block.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Block;
            })();
    
            interchainqueries.TxValue = (function() {
    
                /**
                 * Properties of a TxValue.
                 * @memberof neutron.interchainqueries
                 * @interface ITxValue
                 * @property {tendermint.abci.IResponseDeliverTx|null} [response] TxValue response
                 * @property {tendermint.crypto.IProof|null} [delivery_proof] TxValue delivery_proof
                 * @property {tendermint.crypto.IProof|null} [inclusion_proof] TxValue inclusion_proof
                 * @property {Uint8Array|null} [data] TxValue data
                 */
    
                /**
                 * Constructs a new TxValue.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a TxValue.
                 * @implements ITxValue
                 * @constructor
                 * @param {neutron.interchainqueries.ITxValue=} [properties] Properties to set
                 */
                function TxValue(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TxValue response.
                 * @member {tendermint.abci.IResponseDeliverTx|null|undefined} response
                 * @memberof neutron.interchainqueries.TxValue
                 * @instance
                 */
                TxValue.prototype.response = null;
    
                /**
                 * TxValue delivery_proof.
                 * @member {tendermint.crypto.IProof|null|undefined} delivery_proof
                 * @memberof neutron.interchainqueries.TxValue
                 * @instance
                 */
                TxValue.prototype.delivery_proof = null;
    
                /**
                 * TxValue inclusion_proof.
                 * @member {tendermint.crypto.IProof|null|undefined} inclusion_proof
                 * @memberof neutron.interchainqueries.TxValue
                 * @instance
                 */
                TxValue.prototype.inclusion_proof = null;
    
                /**
                 * TxValue data.
                 * @member {Uint8Array} data
                 * @memberof neutron.interchainqueries.TxValue
                 * @instance
                 */
                TxValue.prototype.data = $util.newBuffer([]);
    
                /**
                 * Encodes the specified TxValue message. Does not implicitly {@link neutron.interchainqueries.TxValue.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.TxValue
                 * @static
                 * @param {neutron.interchainqueries.ITxValue} message TxValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxValue.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                        $root.tendermint.abci.ResponseDeliverTx.encode(message.response, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.delivery_proof != null && Object.hasOwnProperty.call(message, "delivery_proof"))
                        $root.tendermint.crypto.Proof.encode(message.delivery_proof, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.inclusion_proof != null && Object.hasOwnProperty.call(message, "inclusion_proof"))
                        $root.tendermint.crypto.Proof.encode(message.inclusion_proof, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);
                    return writer;
                };
    
                /**
                 * Encodes the specified TxValue message, length delimited. Does not implicitly {@link neutron.interchainqueries.TxValue.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.TxValue
                 * @static
                 * @param {neutron.interchainqueries.ITxValue} message TxValue message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxValue.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TxValue message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.TxValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.TxValue} TxValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxValue.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.TxValue();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.response = $root.tendermint.abci.ResponseDeliverTx.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.delivery_proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.inclusion_proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a TxValue message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.TxValue
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.TxValue} TxValue
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxValue.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TxValue message.
                 * @function verify
                 * @memberof neutron.interchainqueries.TxValue
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TxValue.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.response != null && message.hasOwnProperty("response")) {
                        var error = $root.tendermint.abci.ResponseDeliverTx.verify(message.response);
                        if (error)
                            return "response." + error;
                    }
                    if (message.delivery_proof != null && message.hasOwnProperty("delivery_proof")) {
                        var error = $root.tendermint.crypto.Proof.verify(message.delivery_proof);
                        if (error)
                            return "delivery_proof." + error;
                    }
                    if (message.inclusion_proof != null && message.hasOwnProperty("inclusion_proof")) {
                        var error = $root.tendermint.crypto.Proof.verify(message.inclusion_proof);
                        if (error)
                            return "inclusion_proof." + error;
                    }
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a TxValue message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.TxValue
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.TxValue} TxValue
                 */
                TxValue.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.TxValue)
                        return object;
                    var message = new $root.neutron.interchainqueries.TxValue();
                    if (object.response != null) {
                        if (typeof object.response !== "object")
                            throw TypeError(".neutron.interchainqueries.TxValue.response: object expected");
                        message.response = $root.tendermint.abci.ResponseDeliverTx.fromObject(object.response);
                    }
                    if (object.delivery_proof != null) {
                        if (typeof object.delivery_proof !== "object")
                            throw TypeError(".neutron.interchainqueries.TxValue.delivery_proof: object expected");
                        message.delivery_proof = $root.tendermint.crypto.Proof.fromObject(object.delivery_proof);
                    }
                    if (object.inclusion_proof != null) {
                        if (typeof object.inclusion_proof !== "object")
                            throw TypeError(".neutron.interchainqueries.TxValue.inclusion_proof: object expected");
                        message.inclusion_proof = $root.tendermint.crypto.Proof.fromObject(object.inclusion_proof);
                    }
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };
    
                /**
                 * Creates a plain object from a TxValue message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.TxValue
                 * @static
                 * @param {neutron.interchainqueries.TxValue} message TxValue
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TxValue.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.response = null;
                        object.delivery_proof = null;
                        object.inclusion_proof = null;
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    }
                    if (message.response != null && message.hasOwnProperty("response"))
                        object.response = $root.tendermint.abci.ResponseDeliverTx.toObject(message.response, options);
                    if (message.delivery_proof != null && message.hasOwnProperty("delivery_proof"))
                        object.delivery_proof = $root.tendermint.crypto.Proof.toObject(message.delivery_proof, options);
                    if (message.inclusion_proof != null && message.hasOwnProperty("inclusion_proof"))
                        object.inclusion_proof = $root.tendermint.crypto.Proof.toObject(message.inclusion_proof, options);
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };
    
                /**
                 * Converts this TxValue to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.TxValue
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TxValue.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TxValue;
            })();
    
            interchainqueries.MsgSubmitQueryResultResponse = (function() {
    
                /**
                 * Properties of a MsgSubmitQueryResultResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgSubmitQueryResultResponse
                 */
    
                /**
                 * Constructs a new MsgSubmitQueryResultResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgSubmitQueryResultResponse.
                 * @implements IMsgSubmitQueryResultResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgSubmitQueryResultResponse=} [properties] Properties to set
                 */
                function MsgSubmitQueryResultResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgSubmitQueryResultResponse message. Does not implicitly {@link neutron.interchainqueries.MsgSubmitQueryResultResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResultResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgSubmitQueryResultResponse} message MsgSubmitQueryResultResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSubmitQueryResultResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgSubmitQueryResultResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgSubmitQueryResultResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResultResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgSubmitQueryResultResponse} message MsgSubmitQueryResultResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgSubmitQueryResultResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgSubmitQueryResultResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResultResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgSubmitQueryResultResponse} MsgSubmitQueryResultResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSubmitQueryResultResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgSubmitQueryResultResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgSubmitQueryResultResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResultResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgSubmitQueryResultResponse} MsgSubmitQueryResultResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgSubmitQueryResultResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgSubmitQueryResultResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResultResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgSubmitQueryResultResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgSubmitQueryResultResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResultResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgSubmitQueryResultResponse} MsgSubmitQueryResultResponse
                 */
                MsgSubmitQueryResultResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgSubmitQueryResultResponse)
                        return object;
                    return new $root.neutron.interchainqueries.MsgSubmitQueryResultResponse();
                };
    
                /**
                 * Creates a plain object from a MsgSubmitQueryResultResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResultResponse
                 * @static
                 * @param {neutron.interchainqueries.MsgSubmitQueryResultResponse} message MsgSubmitQueryResultResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgSubmitQueryResultResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgSubmitQueryResultResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgSubmitQueryResultResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgSubmitQueryResultResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgSubmitQueryResultResponse;
            })();
    
            interchainqueries.MsgRemoveInterchainQueryRequest = (function() {
    
                /**
                 * Properties of a MsgRemoveInterchainQueryRequest.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgRemoveInterchainQueryRequest
                 * @property {Long|null} [query_id] MsgRemoveInterchainQueryRequest query_id
                 * @property {string|null} [sender] MsgRemoveInterchainQueryRequest sender
                 */
    
                /**
                 * Constructs a new MsgRemoveInterchainQueryRequest.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgRemoveInterchainQueryRequest.
                 * @implements IMsgRemoveInterchainQueryRequest
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgRemoveInterchainQueryRequest=} [properties] Properties to set
                 */
                function MsgRemoveInterchainQueryRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgRemoveInterchainQueryRequest query_id.
                 * @member {Long} query_id
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @instance
                 */
                MsgRemoveInterchainQueryRequest.prototype.query_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgRemoveInterchainQueryRequest sender.
                 * @member {string} sender
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @instance
                 */
                MsgRemoveInterchainQueryRequest.prototype.sender = "";
    
                /**
                 * Encodes the specified MsgRemoveInterchainQueryRequest message. Does not implicitly {@link neutron.interchainqueries.MsgRemoveInterchainQueryRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @static
                 * @param {neutron.interchainqueries.IMsgRemoveInterchainQueryRequest} message MsgRemoveInterchainQueryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRemoveInterchainQueryRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.query_id != null && Object.hasOwnProperty.call(message, "query_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.query_id);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.sender);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgRemoveInterchainQueryRequest message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgRemoveInterchainQueryRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @static
                 * @param {neutron.interchainqueries.IMsgRemoveInterchainQueryRequest} message MsgRemoveInterchainQueryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRemoveInterchainQueryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgRemoveInterchainQueryRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgRemoveInterchainQueryRequest} MsgRemoveInterchainQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRemoveInterchainQueryRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgRemoveInterchainQueryRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.query_id = reader.uint64();
                            break;
                        case 2:
                            message.sender = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgRemoveInterchainQueryRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgRemoveInterchainQueryRequest} MsgRemoveInterchainQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRemoveInterchainQueryRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgRemoveInterchainQueryRequest message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgRemoveInterchainQueryRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (!$util.isInteger(message.query_id) && !(message.query_id && $util.isInteger(message.query_id.low) && $util.isInteger(message.query_id.high)))
                            return "query_id: integer|Long expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgRemoveInterchainQueryRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgRemoveInterchainQueryRequest} MsgRemoveInterchainQueryRequest
                 */
                MsgRemoveInterchainQueryRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgRemoveInterchainQueryRequest)
                        return object;
                    var message = new $root.neutron.interchainqueries.MsgRemoveInterchainQueryRequest();
                    if (object.query_id != null)
                        if ($util.Long)
                            (message.query_id = $util.Long.fromValue(object.query_id)).unsigned = true;
                        else if (typeof object.query_id === "string")
                            message.query_id = parseInt(object.query_id, 10);
                        else if (typeof object.query_id === "number")
                            message.query_id = object.query_id;
                        else if (typeof object.query_id === "object")
                            message.query_id = new $util.LongBits(object.query_id.low >>> 0, object.query_id.high >>> 0).toNumber(true);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgRemoveInterchainQueryRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @static
                 * @param {neutron.interchainqueries.MsgRemoveInterchainQueryRequest} message MsgRemoveInterchainQueryRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgRemoveInterchainQueryRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.query_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.query_id = options.longs === String ? "0" : 0;
                        object.sender = "";
                    }
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (typeof message.query_id === "number")
                            object.query_id = options.longs === String ? String(message.query_id) : message.query_id;
                        else
                            object.query_id = options.longs === String ? $util.Long.prototype.toString.call(message.query_id) : options.longs === Number ? new $util.LongBits(message.query_id.low >>> 0, message.query_id.high >>> 0).toNumber(true) : message.query_id;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    return object;
                };
    
                /**
                 * Converts this MsgRemoveInterchainQueryRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgRemoveInterchainQueryRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgRemoveInterchainQueryRequest;
            })();
    
            interchainqueries.MsgRemoveInterchainQueryResponse = (function() {
    
                /**
                 * Properties of a MsgRemoveInterchainQueryResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgRemoveInterchainQueryResponse
                 */
    
                /**
                 * Constructs a new MsgRemoveInterchainQueryResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgRemoveInterchainQueryResponse.
                 * @implements IMsgRemoveInterchainQueryResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgRemoveInterchainQueryResponse=} [properties] Properties to set
                 */
                function MsgRemoveInterchainQueryResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgRemoveInterchainQueryResponse message. Does not implicitly {@link neutron.interchainqueries.MsgRemoveInterchainQueryResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgRemoveInterchainQueryResponse} message MsgRemoveInterchainQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRemoveInterchainQueryResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgRemoveInterchainQueryResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgRemoveInterchainQueryResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgRemoveInterchainQueryResponse} message MsgRemoveInterchainQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgRemoveInterchainQueryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgRemoveInterchainQueryResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgRemoveInterchainQueryResponse} MsgRemoveInterchainQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRemoveInterchainQueryResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgRemoveInterchainQueryResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgRemoveInterchainQueryResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgRemoveInterchainQueryResponse} MsgRemoveInterchainQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgRemoveInterchainQueryResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgRemoveInterchainQueryResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgRemoveInterchainQueryResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgRemoveInterchainQueryResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgRemoveInterchainQueryResponse} MsgRemoveInterchainQueryResponse
                 */
                MsgRemoveInterchainQueryResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgRemoveInterchainQueryResponse)
                        return object;
                    return new $root.neutron.interchainqueries.MsgRemoveInterchainQueryResponse();
                };
    
                /**
                 * Creates a plain object from a MsgRemoveInterchainQueryResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.MsgRemoveInterchainQueryResponse} message MsgRemoveInterchainQueryResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgRemoveInterchainQueryResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgRemoveInterchainQueryResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgRemoveInterchainQueryResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgRemoveInterchainQueryResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgRemoveInterchainQueryResponse;
            })();
    
            interchainqueries.MsgUpdateInterchainQueryRequest = (function() {
    
                /**
                 * Properties of a MsgUpdateInterchainQueryRequest.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgUpdateInterchainQueryRequest
                 * @property {Long|null} [query_id] MsgUpdateInterchainQueryRequest query_id
                 * @property {Array.<neutron.interchainqueries.IKVKey>|null} [new_keys] MsgUpdateInterchainQueryRequest new_keys
                 * @property {Long|null} [new_update_period] MsgUpdateInterchainQueryRequest new_update_period
                 * @property {string|null} [new_transactions_filter] MsgUpdateInterchainQueryRequest new_transactions_filter
                 * @property {string|null} [sender] MsgUpdateInterchainQueryRequest sender
                 */
    
                /**
                 * Constructs a new MsgUpdateInterchainQueryRequest.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgUpdateInterchainQueryRequest.
                 * @implements IMsgUpdateInterchainQueryRequest
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgUpdateInterchainQueryRequest=} [properties] Properties to set
                 */
                function MsgUpdateInterchainQueryRequest(properties) {
                    this.new_keys = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgUpdateInterchainQueryRequest query_id.
                 * @member {Long} query_id
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @instance
                 */
                MsgUpdateInterchainQueryRequest.prototype.query_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgUpdateInterchainQueryRequest new_keys.
                 * @member {Array.<neutron.interchainqueries.IKVKey>} new_keys
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @instance
                 */
                MsgUpdateInterchainQueryRequest.prototype.new_keys = $util.emptyArray;
    
                /**
                 * MsgUpdateInterchainQueryRequest new_update_period.
                 * @member {Long} new_update_period
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @instance
                 */
                MsgUpdateInterchainQueryRequest.prototype.new_update_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgUpdateInterchainQueryRequest new_transactions_filter.
                 * @member {string} new_transactions_filter
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @instance
                 */
                MsgUpdateInterchainQueryRequest.prototype.new_transactions_filter = "";
    
                /**
                 * MsgUpdateInterchainQueryRequest sender.
                 * @member {string} sender
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @instance
                 */
                MsgUpdateInterchainQueryRequest.prototype.sender = "";
    
                /**
                 * Encodes the specified MsgUpdateInterchainQueryRequest message. Does not implicitly {@link neutron.interchainqueries.MsgUpdateInterchainQueryRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @static
                 * @param {neutron.interchainqueries.IMsgUpdateInterchainQueryRequest} message MsgUpdateInterchainQueryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateInterchainQueryRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.query_id != null && Object.hasOwnProperty.call(message, "query_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.query_id);
                    if (message.new_keys != null && message.new_keys.length)
                        for (var i = 0; i < message.new_keys.length; ++i)
                            $root.neutron.interchainqueries.KVKey.encode(message.new_keys[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.new_update_period != null && Object.hasOwnProperty.call(message, "new_update_period"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.new_update_period);
                    if (message.new_transactions_filter != null && Object.hasOwnProperty.call(message, "new_transactions_filter"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.new_transactions_filter);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.sender);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateInterchainQueryRequest message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgUpdateInterchainQueryRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @static
                 * @param {neutron.interchainqueries.IMsgUpdateInterchainQueryRequest} message MsgUpdateInterchainQueryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateInterchainQueryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateInterchainQueryRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgUpdateInterchainQueryRequest} MsgUpdateInterchainQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateInterchainQueryRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgUpdateInterchainQueryRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.query_id = reader.uint64();
                            break;
                        case 2:
                            if (!(message.new_keys && message.new_keys.length))
                                message.new_keys = [];
                            message.new_keys.push($root.neutron.interchainqueries.KVKey.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.new_update_period = reader.uint64();
                            break;
                        case 4:
                            message.new_transactions_filter = reader.string();
                            break;
                        case 5:
                            message.sender = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateInterchainQueryRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgUpdateInterchainQueryRequest} MsgUpdateInterchainQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateInterchainQueryRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateInterchainQueryRequest message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateInterchainQueryRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (!$util.isInteger(message.query_id) && !(message.query_id && $util.isInteger(message.query_id.low) && $util.isInteger(message.query_id.high)))
                            return "query_id: integer|Long expected";
                    if (message.new_keys != null && message.hasOwnProperty("new_keys")) {
                        if (!Array.isArray(message.new_keys))
                            return "new_keys: array expected";
                        for (var i = 0; i < message.new_keys.length; ++i) {
                            var error = $root.neutron.interchainqueries.KVKey.verify(message.new_keys[i]);
                            if (error)
                                return "new_keys." + error;
                        }
                    }
                    if (message.new_update_period != null && message.hasOwnProperty("new_update_period"))
                        if (!$util.isInteger(message.new_update_period) && !(message.new_update_period && $util.isInteger(message.new_update_period.low) && $util.isInteger(message.new_update_period.high)))
                            return "new_update_period: integer|Long expected";
                    if (message.new_transactions_filter != null && message.hasOwnProperty("new_transactions_filter"))
                        if (!$util.isString(message.new_transactions_filter))
                            return "new_transactions_filter: string expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateInterchainQueryRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgUpdateInterchainQueryRequest} MsgUpdateInterchainQueryRequest
                 */
                MsgUpdateInterchainQueryRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgUpdateInterchainQueryRequest)
                        return object;
                    var message = new $root.neutron.interchainqueries.MsgUpdateInterchainQueryRequest();
                    if (object.query_id != null)
                        if ($util.Long)
                            (message.query_id = $util.Long.fromValue(object.query_id)).unsigned = true;
                        else if (typeof object.query_id === "string")
                            message.query_id = parseInt(object.query_id, 10);
                        else if (typeof object.query_id === "number")
                            message.query_id = object.query_id;
                        else if (typeof object.query_id === "object")
                            message.query_id = new $util.LongBits(object.query_id.low >>> 0, object.query_id.high >>> 0).toNumber(true);
                    if (object.new_keys) {
                        if (!Array.isArray(object.new_keys))
                            throw TypeError(".neutron.interchainqueries.MsgUpdateInterchainQueryRequest.new_keys: array expected");
                        message.new_keys = [];
                        for (var i = 0; i < object.new_keys.length; ++i) {
                            if (typeof object.new_keys[i] !== "object")
                                throw TypeError(".neutron.interchainqueries.MsgUpdateInterchainQueryRequest.new_keys: object expected");
                            message.new_keys[i] = $root.neutron.interchainqueries.KVKey.fromObject(object.new_keys[i]);
                        }
                    }
                    if (object.new_update_period != null)
                        if ($util.Long)
                            (message.new_update_period = $util.Long.fromValue(object.new_update_period)).unsigned = true;
                        else if (typeof object.new_update_period === "string")
                            message.new_update_period = parseInt(object.new_update_period, 10);
                        else if (typeof object.new_update_period === "number")
                            message.new_update_period = object.new_update_period;
                        else if (typeof object.new_update_period === "object")
                            message.new_update_period = new $util.LongBits(object.new_update_period.low >>> 0, object.new_update_period.high >>> 0).toNumber(true);
                    if (object.new_transactions_filter != null)
                        message.new_transactions_filter = String(object.new_transactions_filter);
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgUpdateInterchainQueryRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @static
                 * @param {neutron.interchainqueries.MsgUpdateInterchainQueryRequest} message MsgUpdateInterchainQueryRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateInterchainQueryRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.new_keys = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.query_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.query_id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.new_update_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.new_update_period = options.longs === String ? "0" : 0;
                        object.new_transactions_filter = "";
                        object.sender = "";
                    }
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (typeof message.query_id === "number")
                            object.query_id = options.longs === String ? String(message.query_id) : message.query_id;
                        else
                            object.query_id = options.longs === String ? $util.Long.prototype.toString.call(message.query_id) : options.longs === Number ? new $util.LongBits(message.query_id.low >>> 0, message.query_id.high >>> 0).toNumber(true) : message.query_id;
                    if (message.new_keys && message.new_keys.length) {
                        object.new_keys = [];
                        for (var j = 0; j < message.new_keys.length; ++j)
                            object.new_keys[j] = $root.neutron.interchainqueries.KVKey.toObject(message.new_keys[j], options);
                    }
                    if (message.new_update_period != null && message.hasOwnProperty("new_update_period"))
                        if (typeof message.new_update_period === "number")
                            object.new_update_period = options.longs === String ? String(message.new_update_period) : message.new_update_period;
                        else
                            object.new_update_period = options.longs === String ? $util.Long.prototype.toString.call(message.new_update_period) : options.longs === Number ? new $util.LongBits(message.new_update_period.low >>> 0, message.new_update_period.high >>> 0).toNumber(true) : message.new_update_period;
                    if (message.new_transactions_filter != null && message.hasOwnProperty("new_transactions_filter"))
                        object.new_transactions_filter = message.new_transactions_filter;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    return object;
                };
    
                /**
                 * Converts this MsgUpdateInterchainQueryRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateInterchainQueryRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateInterchainQueryRequest;
            })();
    
            interchainqueries.MsgUpdateInterchainQueryResponse = (function() {
    
                /**
                 * Properties of a MsgUpdateInterchainQueryResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgUpdateInterchainQueryResponse
                 */
    
                /**
                 * Constructs a new MsgUpdateInterchainQueryResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgUpdateInterchainQueryResponse.
                 * @implements IMsgUpdateInterchainQueryResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgUpdateInterchainQueryResponse=} [properties] Properties to set
                 */
                function MsgUpdateInterchainQueryResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgUpdateInterchainQueryResponse message. Does not implicitly {@link neutron.interchainqueries.MsgUpdateInterchainQueryResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgUpdateInterchainQueryResponse} message MsgUpdateInterchainQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateInterchainQueryResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateInterchainQueryResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgUpdateInterchainQueryResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgUpdateInterchainQueryResponse} message MsgUpdateInterchainQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateInterchainQueryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateInterchainQueryResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgUpdateInterchainQueryResponse} MsgUpdateInterchainQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateInterchainQueryResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgUpdateInterchainQueryResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateInterchainQueryResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgUpdateInterchainQueryResponse} MsgUpdateInterchainQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateInterchainQueryResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateInterchainQueryResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateInterchainQueryResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateInterchainQueryResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgUpdateInterchainQueryResponse} MsgUpdateInterchainQueryResponse
                 */
                MsgUpdateInterchainQueryResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgUpdateInterchainQueryResponse)
                        return object;
                    return new $root.neutron.interchainqueries.MsgUpdateInterchainQueryResponse();
                };
    
                /**
                 * Creates a plain object from a MsgUpdateInterchainQueryResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.MsgUpdateInterchainQueryResponse} message MsgUpdateInterchainQueryResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateInterchainQueryResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgUpdateInterchainQueryResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgUpdateInterchainQueryResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateInterchainQueryResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateInterchainQueryResponse;
            })();
    
            interchainqueries.MsgUpdateParams = (function() {
    
                /**
                 * Properties of a MsgUpdateParams.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgUpdateParams
                 * @property {string|null} [authority] MsgUpdateParams authority
                 * @property {neutron.interchainqueries.IParams|null} [params] MsgUpdateParams params
                 */
    
                /**
                 * Constructs a new MsgUpdateParams.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgUpdateParams.
                 * @implements IMsgUpdateParams
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgUpdateParams=} [properties] Properties to set
                 */
                function MsgUpdateParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgUpdateParams authority.
                 * @member {string} authority
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.authority = "";
    
                /**
                 * MsgUpdateParams params.
                 * @member {neutron.interchainqueries.IParams|null|undefined} params
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @instance
                 */
                MsgUpdateParams.prototype.params = null;
    
                /**
                 * Encodes the specified MsgUpdateParams message. Does not implicitly {@link neutron.interchainqueries.MsgUpdateParams.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @static
                 * @param {neutron.interchainqueries.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.authority);
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.interchainqueries.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParams message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgUpdateParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @static
                 * @param {neutron.interchainqueries.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgUpdateParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.authority = reader.string();
                            break;
                        case 2:
                            message.params = $root.neutron.interchainqueries.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgUpdateParams} MsgUpdateParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParams message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        if (!$util.isString(message.authority))
                            return "authority: string expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.interchainqueries.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgUpdateParams} MsgUpdateParams
                 */
                MsgUpdateParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgUpdateParams)
                        return object;
                    var message = new $root.neutron.interchainqueries.MsgUpdateParams();
                    if (object.authority != null)
                        message.authority = String(object.authority);
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.interchainqueries.MsgUpdateParams.params: object expected");
                        message.params = $root.neutron.interchainqueries.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @static
                 * @param {neutron.interchainqueries.MsgUpdateParams} message MsgUpdateParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.authority = "";
                        object.params = null;
                    }
                    if (message.authority != null && message.hasOwnProperty("authority"))
                        object.authority = message.authority;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.interchainqueries.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this MsgUpdateParams to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgUpdateParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParams;
            })();
    
            interchainqueries.MsgUpdateParamsResponse = (function() {
    
                /**
                 * Properties of a MsgUpdateParamsResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IMsgUpdateParamsResponse
                 */
    
                /**
                 * Constructs a new MsgUpdateParamsResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a MsgUpdateParamsResponse.
                 * @implements IMsgUpdateParamsResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IMsgUpdateParamsResponse=} [properties] Properties to set
                 */
                function MsgUpdateParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message. Does not implicitly {@link neutron.interchainqueries.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgUpdateParamsResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.MsgUpdateParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.interchainqueries.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgUpdateParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.MsgUpdateParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.MsgUpdateParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgUpdateParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgUpdateParamsResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgUpdateParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a MsgUpdateParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.MsgUpdateParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                 */
                MsgUpdateParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.MsgUpdateParamsResponse)
                        return object;
                    return new $root.neutron.interchainqueries.MsgUpdateParamsResponse();
                };
    
                /**
                 * Creates a plain object from a MsgUpdateParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.MsgUpdateParamsResponse
                 * @static
                 * @param {neutron.interchainqueries.MsgUpdateParamsResponse} message MsgUpdateParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgUpdateParamsResponse.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this MsgUpdateParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.MsgUpdateParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgUpdateParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgUpdateParamsResponse;
            })();
    
            interchainqueries.Params = (function() {
    
                /**
                 * Properties of a Params.
                 * @memberof neutron.interchainqueries
                 * @interface IParams
                 * @property {Long|null} [query_submit_timeout] Params query_submit_timeout
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [query_deposit] Params query_deposit
                 * @property {Long|null} [tx_query_removal_limit] Params tx_query_removal_limit
                 */
    
                /**
                 * Constructs a new Params.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {neutron.interchainqueries.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    this.query_deposit = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Params query_submit_timeout.
                 * @member {Long} query_submit_timeout
                 * @memberof neutron.interchainqueries.Params
                 * @instance
                 */
                Params.prototype.query_submit_timeout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Params query_deposit.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} query_deposit
                 * @memberof neutron.interchainqueries.Params
                 * @instance
                 */
                Params.prototype.query_deposit = $util.emptyArray;
    
                /**
                 * Params tx_query_removal_limit.
                 * @member {Long} tx_query_removal_limit
                 * @memberof neutron.interchainqueries.Params
                 * @instance
                 */
                Params.prototype.tx_query_removal_limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified Params message. Does not implicitly {@link neutron.interchainqueries.Params.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.Params
                 * @static
                 * @param {neutron.interchainqueries.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.query_submit_timeout != null && Object.hasOwnProperty.call(message, "query_submit_timeout"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.query_submit_timeout);
                    if (message.query_deposit != null && message.query_deposit.length)
                        for (var i = 0; i < message.query_deposit.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.query_deposit[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.tx_query_removal_limit != null && Object.hasOwnProperty.call(message, "tx_query_removal_limit"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.tx_query_removal_limit);
                    return writer;
                };
    
                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link neutron.interchainqueries.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.Params
                 * @static
                 * @param {neutron.interchainqueries.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.Params();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.query_submit_timeout = reader.uint64();
                            break;
                        case 2:
                            if (!(message.query_deposit && message.query_deposit.length))
                                message.query_deposit = [];
                            message.query_deposit.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.tx_query_removal_limit = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof neutron.interchainqueries.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.query_submit_timeout != null && message.hasOwnProperty("query_submit_timeout"))
                        if (!$util.isInteger(message.query_submit_timeout) && !(message.query_submit_timeout && $util.isInteger(message.query_submit_timeout.low) && $util.isInteger(message.query_submit_timeout.high)))
                            return "query_submit_timeout: integer|Long expected";
                    if (message.query_deposit != null && message.hasOwnProperty("query_deposit")) {
                        if (!Array.isArray(message.query_deposit))
                            return "query_deposit: array expected";
                        for (var i = 0; i < message.query_deposit.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.query_deposit[i]);
                            if (error)
                                return "query_deposit." + error;
                        }
                    }
                    if (message.tx_query_removal_limit != null && message.hasOwnProperty("tx_query_removal_limit"))
                        if (!$util.isInteger(message.tx_query_removal_limit) && !(message.tx_query_removal_limit && $util.isInteger(message.tx_query_removal_limit.low) && $util.isInteger(message.tx_query_removal_limit.high)))
                            return "tx_query_removal_limit: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.Params)
                        return object;
                    var message = new $root.neutron.interchainqueries.Params();
                    if (object.query_submit_timeout != null)
                        if ($util.Long)
                            (message.query_submit_timeout = $util.Long.fromValue(object.query_submit_timeout)).unsigned = true;
                        else if (typeof object.query_submit_timeout === "string")
                            message.query_submit_timeout = parseInt(object.query_submit_timeout, 10);
                        else if (typeof object.query_submit_timeout === "number")
                            message.query_submit_timeout = object.query_submit_timeout;
                        else if (typeof object.query_submit_timeout === "object")
                            message.query_submit_timeout = new $util.LongBits(object.query_submit_timeout.low >>> 0, object.query_submit_timeout.high >>> 0).toNumber(true);
                    if (object.query_deposit) {
                        if (!Array.isArray(object.query_deposit))
                            throw TypeError(".neutron.interchainqueries.Params.query_deposit: array expected");
                        message.query_deposit = [];
                        for (var i = 0; i < object.query_deposit.length; ++i) {
                            if (typeof object.query_deposit[i] !== "object")
                                throw TypeError(".neutron.interchainqueries.Params.query_deposit: object expected");
                            message.query_deposit[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.query_deposit[i]);
                        }
                    }
                    if (object.tx_query_removal_limit != null)
                        if ($util.Long)
                            (message.tx_query_removal_limit = $util.Long.fromValue(object.tx_query_removal_limit)).unsigned = true;
                        else if (typeof object.tx_query_removal_limit === "string")
                            message.tx_query_removal_limit = parseInt(object.tx_query_removal_limit, 10);
                        else if (typeof object.tx_query_removal_limit === "number")
                            message.tx_query_removal_limit = object.tx_query_removal_limit;
                        else if (typeof object.tx_query_removal_limit === "object")
                            message.tx_query_removal_limit = new $util.LongBits(object.tx_query_removal_limit.low >>> 0, object.tx_query_removal_limit.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.Params
                 * @static
                 * @param {neutron.interchainqueries.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.query_deposit = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.query_submit_timeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.query_submit_timeout = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.tx_query_removal_limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.tx_query_removal_limit = options.longs === String ? "0" : 0;
                    }
                    if (message.query_submit_timeout != null && message.hasOwnProperty("query_submit_timeout"))
                        if (typeof message.query_submit_timeout === "number")
                            object.query_submit_timeout = options.longs === String ? String(message.query_submit_timeout) : message.query_submit_timeout;
                        else
                            object.query_submit_timeout = options.longs === String ? $util.Long.prototype.toString.call(message.query_submit_timeout) : options.longs === Number ? new $util.LongBits(message.query_submit_timeout.low >>> 0, message.query_submit_timeout.high >>> 0).toNumber(true) : message.query_submit_timeout;
                    if (message.query_deposit && message.query_deposit.length) {
                        object.query_deposit = [];
                        for (var j = 0; j < message.query_deposit.length; ++j)
                            object.query_deposit[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.query_deposit[j], options);
                    }
                    if (message.tx_query_removal_limit != null && message.hasOwnProperty("tx_query_removal_limit"))
                        if (typeof message.tx_query_removal_limit === "number")
                            object.tx_query_removal_limit = options.longs === String ? String(message.tx_query_removal_limit) : message.tx_query_removal_limit;
                        else
                            object.tx_query_removal_limit = options.longs === String ? $util.Long.prototype.toString.call(message.tx_query_removal_limit) : options.longs === Number ? new $util.LongBits(message.tx_query_removal_limit.low >>> 0, message.tx_query_removal_limit.high >>> 0).toNumber(true) : message.tx_query_removal_limit;
                    return object;
                };
    
                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Params;
            })();
    
            interchainqueries.RegisteredQuery = (function() {
    
                /**
                 * Properties of a RegisteredQuery.
                 * @memberof neutron.interchainqueries
                 * @interface IRegisteredQuery
                 * @property {Long|null} [id] RegisteredQuery id
                 * @property {string|null} [owner] RegisteredQuery owner
                 * @property {string|null} [query_type] RegisteredQuery query_type
                 * @property {Array.<neutron.interchainqueries.IKVKey>|null} [keys] RegisteredQuery keys
                 * @property {string|null} [transactions_filter] RegisteredQuery transactions_filter
                 * @property {string|null} [connection_id] RegisteredQuery connection_id
                 * @property {Long|null} [update_period] RegisteredQuery update_period
                 * @property {Long|null} [last_submitted_result_local_height] RegisteredQuery last_submitted_result_local_height
                 * @property {ibc.core.client.v1.IHeight|null} [last_submitted_result_remote_height] RegisteredQuery last_submitted_result_remote_height
                 * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [deposit] RegisteredQuery deposit
                 * @property {Long|null} [submit_timeout] RegisteredQuery submit_timeout
                 * @property {Long|null} [registered_at_height] RegisteredQuery registered_at_height
                 */
    
                /**
                 * Constructs a new RegisteredQuery.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a RegisteredQuery.
                 * @implements IRegisteredQuery
                 * @constructor
                 * @param {neutron.interchainqueries.IRegisteredQuery=} [properties] Properties to set
                 */
                function RegisteredQuery(properties) {
                    this.keys = [];
                    this.deposit = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RegisteredQuery id.
                 * @member {Long} id
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RegisteredQuery owner.
                 * @member {string} owner
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.owner = "";
    
                /**
                 * RegisteredQuery query_type.
                 * @member {string} query_type
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.query_type = "";
    
                /**
                 * RegisteredQuery keys.
                 * @member {Array.<neutron.interchainqueries.IKVKey>} keys
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.keys = $util.emptyArray;
    
                /**
                 * RegisteredQuery transactions_filter.
                 * @member {string} transactions_filter
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.transactions_filter = "";
    
                /**
                 * RegisteredQuery connection_id.
                 * @member {string} connection_id
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.connection_id = "";
    
                /**
                 * RegisteredQuery update_period.
                 * @member {Long} update_period
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.update_period = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RegisteredQuery last_submitted_result_local_height.
                 * @member {Long} last_submitted_result_local_height
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.last_submitted_result_local_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RegisteredQuery last_submitted_result_remote_height.
                 * @member {ibc.core.client.v1.IHeight|null|undefined} last_submitted_result_remote_height
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.last_submitted_result_remote_height = null;
    
                /**
                 * RegisteredQuery deposit.
                 * @member {Array.<cosmos.base.v1beta1.ICoin>} deposit
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.deposit = $util.emptyArray;
    
                /**
                 * RegisteredQuery submit_timeout.
                 * @member {Long} submit_timeout
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.submit_timeout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RegisteredQuery registered_at_height.
                 * @member {Long} registered_at_height
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 */
                RegisteredQuery.prototype.registered_at_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified RegisteredQuery message. Does not implicitly {@link neutron.interchainqueries.RegisteredQuery.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @static
                 * @param {neutron.interchainqueries.IRegisteredQuery} message RegisteredQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RegisteredQuery.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
                    if (message.owner != null && Object.hasOwnProperty.call(message, "owner"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.owner);
                    if (message.query_type != null && Object.hasOwnProperty.call(message, "query_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.query_type);
                    if (message.keys != null && message.keys.length)
                        for (var i = 0; i < message.keys.length; ++i)
                            $root.neutron.interchainqueries.KVKey.encode(message.keys[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.transactions_filter != null && Object.hasOwnProperty.call(message, "transactions_filter"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.transactions_filter);
                    if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.connection_id);
                    if (message.update_period != null && Object.hasOwnProperty.call(message, "update_period"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.update_period);
                    if (message.last_submitted_result_local_height != null && Object.hasOwnProperty.call(message, "last_submitted_result_local_height"))
                        writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.last_submitted_result_local_height);
                    if (message.last_submitted_result_remote_height != null && Object.hasOwnProperty.call(message, "last_submitted_result_remote_height"))
                        $root.ibc.core.client.v1.Height.encode(message.last_submitted_result_remote_height, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.deposit != null && message.deposit.length)
                        for (var i = 0; i < message.deposit.length; ++i)
                            $root.cosmos.base.v1beta1.Coin.encode(message.deposit[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.submit_timeout != null && Object.hasOwnProperty.call(message, "submit_timeout"))
                        writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.submit_timeout);
                    if (message.registered_at_height != null && Object.hasOwnProperty.call(message, "registered_at_height"))
                        writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.registered_at_height);
                    return writer;
                };
    
                /**
                 * Encodes the specified RegisteredQuery message, length delimited. Does not implicitly {@link neutron.interchainqueries.RegisteredQuery.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @static
                 * @param {neutron.interchainqueries.IRegisteredQuery} message RegisteredQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RegisteredQuery.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RegisteredQuery message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.RegisteredQuery} RegisteredQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RegisteredQuery.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.RegisteredQuery();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.uint64();
                            break;
                        case 2:
                            message.owner = reader.string();
                            break;
                        case 3:
                            message.query_type = reader.string();
                            break;
                        case 4:
                            if (!(message.keys && message.keys.length))
                                message.keys = [];
                            message.keys.push($root.neutron.interchainqueries.KVKey.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            message.transactions_filter = reader.string();
                            break;
                        case 6:
                            message.connection_id = reader.string();
                            break;
                        case 7:
                            message.update_period = reader.uint64();
                            break;
                        case 8:
                            message.last_submitted_result_local_height = reader.uint64();
                            break;
                        case 9:
                            message.last_submitted_result_remote_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                            break;
                        case 10:
                            if (!(message.deposit && message.deposit.length))
                                message.deposit = [];
                            message.deposit.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                            break;
                        case 11:
                            message.submit_timeout = reader.uint64();
                            break;
                        case 12:
                            message.registered_at_height = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RegisteredQuery message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.RegisteredQuery} RegisteredQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RegisteredQuery.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RegisteredQuery message.
                 * @function verify
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RegisteredQuery.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                            return "id: integer|Long expected";
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        if (!$util.isString(message.owner))
                            return "owner: string expected";
                    if (message.query_type != null && message.hasOwnProperty("query_type"))
                        if (!$util.isString(message.query_type))
                            return "query_type: string expected";
                    if (message.keys != null && message.hasOwnProperty("keys")) {
                        if (!Array.isArray(message.keys))
                            return "keys: array expected";
                        for (var i = 0; i < message.keys.length; ++i) {
                            var error = $root.neutron.interchainqueries.KVKey.verify(message.keys[i]);
                            if (error)
                                return "keys." + error;
                        }
                    }
                    if (message.transactions_filter != null && message.hasOwnProperty("transactions_filter"))
                        if (!$util.isString(message.transactions_filter))
                            return "transactions_filter: string expected";
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        if (!$util.isString(message.connection_id))
                            return "connection_id: string expected";
                    if (message.update_period != null && message.hasOwnProperty("update_period"))
                        if (!$util.isInteger(message.update_period) && !(message.update_period && $util.isInteger(message.update_period.low) && $util.isInteger(message.update_period.high)))
                            return "update_period: integer|Long expected";
                    if (message.last_submitted_result_local_height != null && message.hasOwnProperty("last_submitted_result_local_height"))
                        if (!$util.isInteger(message.last_submitted_result_local_height) && !(message.last_submitted_result_local_height && $util.isInteger(message.last_submitted_result_local_height.low) && $util.isInteger(message.last_submitted_result_local_height.high)))
                            return "last_submitted_result_local_height: integer|Long expected";
                    if (message.last_submitted_result_remote_height != null && message.hasOwnProperty("last_submitted_result_remote_height")) {
                        var error = $root.ibc.core.client.v1.Height.verify(message.last_submitted_result_remote_height);
                        if (error)
                            return "last_submitted_result_remote_height." + error;
                    }
                    if (message.deposit != null && message.hasOwnProperty("deposit")) {
                        if (!Array.isArray(message.deposit))
                            return "deposit: array expected";
                        for (var i = 0; i < message.deposit.length; ++i) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.deposit[i]);
                            if (error)
                                return "deposit." + error;
                        }
                    }
                    if (message.submit_timeout != null && message.hasOwnProperty("submit_timeout"))
                        if (!$util.isInteger(message.submit_timeout) && !(message.submit_timeout && $util.isInteger(message.submit_timeout.low) && $util.isInteger(message.submit_timeout.high)))
                            return "submit_timeout: integer|Long expected";
                    if (message.registered_at_height != null && message.hasOwnProperty("registered_at_height"))
                        if (!$util.isInteger(message.registered_at_height) && !(message.registered_at_height && $util.isInteger(message.registered_at_height.low) && $util.isInteger(message.registered_at_height.high)))
                            return "registered_at_height: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a RegisteredQuery message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.RegisteredQuery} RegisteredQuery
                 */
                RegisteredQuery.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.RegisteredQuery)
                        return object;
                    var message = new $root.neutron.interchainqueries.RegisteredQuery();
                    if (object.id != null)
                        if ($util.Long)
                            (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                        else if (typeof object.id === "string")
                            message.id = parseInt(object.id, 10);
                        else if (typeof object.id === "number")
                            message.id = object.id;
                        else if (typeof object.id === "object")
                            message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
                    if (object.owner != null)
                        message.owner = String(object.owner);
                    if (object.query_type != null)
                        message.query_type = String(object.query_type);
                    if (object.keys) {
                        if (!Array.isArray(object.keys))
                            throw TypeError(".neutron.interchainqueries.RegisteredQuery.keys: array expected");
                        message.keys = [];
                        for (var i = 0; i < object.keys.length; ++i) {
                            if (typeof object.keys[i] !== "object")
                                throw TypeError(".neutron.interchainqueries.RegisteredQuery.keys: object expected");
                            message.keys[i] = $root.neutron.interchainqueries.KVKey.fromObject(object.keys[i]);
                        }
                    }
                    if (object.transactions_filter != null)
                        message.transactions_filter = String(object.transactions_filter);
                    if (object.connection_id != null)
                        message.connection_id = String(object.connection_id);
                    if (object.update_period != null)
                        if ($util.Long)
                            (message.update_period = $util.Long.fromValue(object.update_period)).unsigned = true;
                        else if (typeof object.update_period === "string")
                            message.update_period = parseInt(object.update_period, 10);
                        else if (typeof object.update_period === "number")
                            message.update_period = object.update_period;
                        else if (typeof object.update_period === "object")
                            message.update_period = new $util.LongBits(object.update_period.low >>> 0, object.update_period.high >>> 0).toNumber(true);
                    if (object.last_submitted_result_local_height != null)
                        if ($util.Long)
                            (message.last_submitted_result_local_height = $util.Long.fromValue(object.last_submitted_result_local_height)).unsigned = true;
                        else if (typeof object.last_submitted_result_local_height === "string")
                            message.last_submitted_result_local_height = parseInt(object.last_submitted_result_local_height, 10);
                        else if (typeof object.last_submitted_result_local_height === "number")
                            message.last_submitted_result_local_height = object.last_submitted_result_local_height;
                        else if (typeof object.last_submitted_result_local_height === "object")
                            message.last_submitted_result_local_height = new $util.LongBits(object.last_submitted_result_local_height.low >>> 0, object.last_submitted_result_local_height.high >>> 0).toNumber(true);
                    if (object.last_submitted_result_remote_height != null) {
                        if (typeof object.last_submitted_result_remote_height !== "object")
                            throw TypeError(".neutron.interchainqueries.RegisteredQuery.last_submitted_result_remote_height: object expected");
                        message.last_submitted_result_remote_height = $root.ibc.core.client.v1.Height.fromObject(object.last_submitted_result_remote_height);
                    }
                    if (object.deposit) {
                        if (!Array.isArray(object.deposit))
                            throw TypeError(".neutron.interchainqueries.RegisteredQuery.deposit: array expected");
                        message.deposit = [];
                        for (var i = 0; i < object.deposit.length; ++i) {
                            if (typeof object.deposit[i] !== "object")
                                throw TypeError(".neutron.interchainqueries.RegisteredQuery.deposit: object expected");
                            message.deposit[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.deposit[i]);
                        }
                    }
                    if (object.submit_timeout != null)
                        if ($util.Long)
                            (message.submit_timeout = $util.Long.fromValue(object.submit_timeout)).unsigned = true;
                        else if (typeof object.submit_timeout === "string")
                            message.submit_timeout = parseInt(object.submit_timeout, 10);
                        else if (typeof object.submit_timeout === "number")
                            message.submit_timeout = object.submit_timeout;
                        else if (typeof object.submit_timeout === "object")
                            message.submit_timeout = new $util.LongBits(object.submit_timeout.low >>> 0, object.submit_timeout.high >>> 0).toNumber(true);
                    if (object.registered_at_height != null)
                        if ($util.Long)
                            (message.registered_at_height = $util.Long.fromValue(object.registered_at_height)).unsigned = true;
                        else if (typeof object.registered_at_height === "string")
                            message.registered_at_height = parseInt(object.registered_at_height, 10);
                        else if (typeof object.registered_at_height === "number")
                            message.registered_at_height = object.registered_at_height;
                        else if (typeof object.registered_at_height === "object")
                            message.registered_at_height = new $util.LongBits(object.registered_at_height.low >>> 0, object.registered_at_height.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RegisteredQuery message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @static
                 * @param {neutron.interchainqueries.RegisteredQuery} message RegisteredQuery
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RegisteredQuery.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.keys = [];
                        object.deposit = [];
                    }
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.id = options.longs === String ? "0" : 0;
                        object.owner = "";
                        object.query_type = "";
                        object.transactions_filter = "";
                        object.connection_id = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.update_period = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.update_period = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.last_submitted_result_local_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.last_submitted_result_local_height = options.longs === String ? "0" : 0;
                        object.last_submitted_result_remote_height = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.submit_timeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.submit_timeout = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.registered_at_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.registered_at_height = options.longs === String ? "0" : 0;
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (typeof message.id === "number")
                            object.id = options.longs === String ? String(message.id) : message.id;
                        else
                            object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
                    if (message.owner != null && message.hasOwnProperty("owner"))
                        object.owner = message.owner;
                    if (message.query_type != null && message.hasOwnProperty("query_type"))
                        object.query_type = message.query_type;
                    if (message.keys && message.keys.length) {
                        object.keys = [];
                        for (var j = 0; j < message.keys.length; ++j)
                            object.keys[j] = $root.neutron.interchainqueries.KVKey.toObject(message.keys[j], options);
                    }
                    if (message.transactions_filter != null && message.hasOwnProperty("transactions_filter"))
                        object.transactions_filter = message.transactions_filter;
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        object.connection_id = message.connection_id;
                    if (message.update_period != null && message.hasOwnProperty("update_period"))
                        if (typeof message.update_period === "number")
                            object.update_period = options.longs === String ? String(message.update_period) : message.update_period;
                        else
                            object.update_period = options.longs === String ? $util.Long.prototype.toString.call(message.update_period) : options.longs === Number ? new $util.LongBits(message.update_period.low >>> 0, message.update_period.high >>> 0).toNumber(true) : message.update_period;
                    if (message.last_submitted_result_local_height != null && message.hasOwnProperty("last_submitted_result_local_height"))
                        if (typeof message.last_submitted_result_local_height === "number")
                            object.last_submitted_result_local_height = options.longs === String ? String(message.last_submitted_result_local_height) : message.last_submitted_result_local_height;
                        else
                            object.last_submitted_result_local_height = options.longs === String ? $util.Long.prototype.toString.call(message.last_submitted_result_local_height) : options.longs === Number ? new $util.LongBits(message.last_submitted_result_local_height.low >>> 0, message.last_submitted_result_local_height.high >>> 0).toNumber(true) : message.last_submitted_result_local_height;
                    if (message.last_submitted_result_remote_height != null && message.hasOwnProperty("last_submitted_result_remote_height"))
                        object.last_submitted_result_remote_height = $root.ibc.core.client.v1.Height.toObject(message.last_submitted_result_remote_height, options);
                    if (message.deposit && message.deposit.length) {
                        object.deposit = [];
                        for (var j = 0; j < message.deposit.length; ++j)
                            object.deposit[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.deposit[j], options);
                    }
                    if (message.submit_timeout != null && message.hasOwnProperty("submit_timeout"))
                        if (typeof message.submit_timeout === "number")
                            object.submit_timeout = options.longs === String ? String(message.submit_timeout) : message.submit_timeout;
                        else
                            object.submit_timeout = options.longs === String ? $util.Long.prototype.toString.call(message.submit_timeout) : options.longs === Number ? new $util.LongBits(message.submit_timeout.low >>> 0, message.submit_timeout.high >>> 0).toNumber(true) : message.submit_timeout;
                    if (message.registered_at_height != null && message.hasOwnProperty("registered_at_height"))
                        if (typeof message.registered_at_height === "number")
                            object.registered_at_height = options.longs === String ? String(message.registered_at_height) : message.registered_at_height;
                        else
                            object.registered_at_height = options.longs === String ? $util.Long.prototype.toString.call(message.registered_at_height) : options.longs === Number ? new $util.LongBits(message.registered_at_height.low >>> 0, message.registered_at_height.high >>> 0).toNumber(true) : message.registered_at_height;
                    return object;
                };
    
                /**
                 * Converts this RegisteredQuery to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.RegisteredQuery
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RegisteredQuery.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RegisteredQuery;
            })();
    
            interchainqueries.KVKey = (function() {
    
                /**
                 * Properties of a KVKey.
                 * @memberof neutron.interchainqueries
                 * @interface IKVKey
                 * @property {string|null} [path] KVKey path
                 * @property {Uint8Array|null} [key] KVKey key
                 */
    
                /**
                 * Constructs a new KVKey.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a KVKey.
                 * @implements IKVKey
                 * @constructor
                 * @param {neutron.interchainqueries.IKVKey=} [properties] Properties to set
                 */
                function KVKey(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * KVKey path.
                 * @member {string} path
                 * @memberof neutron.interchainqueries.KVKey
                 * @instance
                 */
                KVKey.prototype.path = "";
    
                /**
                 * KVKey key.
                 * @member {Uint8Array} key
                 * @memberof neutron.interchainqueries.KVKey
                 * @instance
                 */
                KVKey.prototype.key = $util.newBuffer([]);
    
                /**
                 * Encodes the specified KVKey message. Does not implicitly {@link neutron.interchainqueries.KVKey.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.KVKey
                 * @static
                 * @param {neutron.interchainqueries.IKVKey} message KVKey message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                KVKey.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.key);
                    return writer;
                };
    
                /**
                 * Encodes the specified KVKey message, length delimited. Does not implicitly {@link neutron.interchainqueries.KVKey.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.KVKey
                 * @static
                 * @param {neutron.interchainqueries.IKVKey} message KVKey message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                KVKey.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a KVKey message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.KVKey
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.KVKey} KVKey
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                KVKey.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.KVKey();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.path = reader.string();
                            break;
                        case 2:
                            message.key = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a KVKey message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.KVKey
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.KVKey} KVKey
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                KVKey.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a KVKey message.
                 * @function verify
                 * @memberof neutron.interchainqueries.KVKey
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                KVKey.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                            return "key: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a KVKey message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.KVKey
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.KVKey} KVKey
                 */
                KVKey.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.KVKey)
                        return object;
                    var message = new $root.neutron.interchainqueries.KVKey();
                    if (object.path != null)
                        message.path = String(object.path);
                    if (object.key != null)
                        if (typeof object.key === "string")
                            $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                        else if (object.key.length)
                            message.key = object.key;
                    return message;
                };
    
                /**
                 * Creates a plain object from a KVKey message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.KVKey
                 * @static
                 * @param {neutron.interchainqueries.KVKey} message KVKey
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                KVKey.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.path = "";
                        if (options.bytes === String)
                            object.key = "";
                        else {
                            object.key = [];
                            if (options.bytes !== Array)
                                object.key = $util.newBuffer(object.key);
                        }
                    }
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                    return object;
                };
    
                /**
                 * Converts this KVKey to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.KVKey
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                KVKey.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return KVKey;
            })();
    
            interchainqueries.GenesisState = (function() {
    
                /**
                 * Properties of a GenesisState.
                 * @memberof neutron.interchainqueries
                 * @interface IGenesisState
                 * @property {neutron.interchainqueries.IParams|null} [params] GenesisState params
                 * @property {Array.<neutron.interchainqueries.IRegisteredQuery>|null} [registered_queries] GenesisState registered_queries
                 */
    
                /**
                 * Constructs a new GenesisState.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {neutron.interchainqueries.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    this.registered_queries = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GenesisState params.
                 * @member {neutron.interchainqueries.IParams|null|undefined} params
                 * @memberof neutron.interchainqueries.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;
    
                /**
                 * GenesisState registered_queries.
                 * @member {Array.<neutron.interchainqueries.IRegisteredQuery>} registered_queries
                 * @memberof neutron.interchainqueries.GenesisState
                 * @instance
                 */
                GenesisState.prototype.registered_queries = $util.emptyArray;
    
                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link neutron.interchainqueries.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.GenesisState
                 * @static
                 * @param {neutron.interchainqueries.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.interchainqueries.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.registered_queries != null && message.registered_queries.length)
                        for (var i = 0; i < message.registered_queries.length; ++i)
                            $root.neutron.interchainqueries.RegisteredQuery.encode(message.registered_queries[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link neutron.interchainqueries.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.GenesisState
                 * @static
                 * @param {neutron.interchainqueries.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.GenesisState();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.interchainqueries.Params.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.registered_queries && message.registered_queries.length))
                                message.registered_queries = [];
                            message.registered_queries.push($root.neutron.interchainqueries.RegisteredQuery.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof neutron.interchainqueries.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.interchainqueries.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    if (message.registered_queries != null && message.hasOwnProperty("registered_queries")) {
                        if (!Array.isArray(message.registered_queries))
                            return "registered_queries: array expected";
                        for (var i = 0; i < message.registered_queries.length; ++i) {
                            var error = $root.neutron.interchainqueries.RegisteredQuery.verify(message.registered_queries[i]);
                            if (error)
                                return "registered_queries." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.GenesisState)
                        return object;
                    var message = new $root.neutron.interchainqueries.GenesisState();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.interchainqueries.GenesisState.params: object expected");
                        message.params = $root.neutron.interchainqueries.Params.fromObject(object.params);
                    }
                    if (object.registered_queries) {
                        if (!Array.isArray(object.registered_queries))
                            throw TypeError(".neutron.interchainqueries.GenesisState.registered_queries: array expected");
                        message.registered_queries = [];
                        for (var i = 0; i < object.registered_queries.length; ++i) {
                            if (typeof object.registered_queries[i] !== "object")
                                throw TypeError(".neutron.interchainqueries.GenesisState.registered_queries: object expected");
                            message.registered_queries[i] = $root.neutron.interchainqueries.RegisteredQuery.fromObject(object.registered_queries[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.GenesisState
                 * @static
                 * @param {neutron.interchainqueries.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.registered_queries = [];
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.interchainqueries.Params.toObject(message.params, options);
                    if (message.registered_queries && message.registered_queries.length) {
                        object.registered_queries = [];
                        for (var j = 0; j < message.registered_queries.length; ++j)
                            object.registered_queries[j] = $root.neutron.interchainqueries.RegisteredQuery.toObject(message.registered_queries[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GenesisState;
            })();
    
            interchainqueries.Query = (function() {
    
                /**
                 * Constructs a new Query service.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Query#params}.
                 * @memberof neutron.interchainqueries.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.QueryParamsResponse} [response] QueryParamsResponse
                 */
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {neutron.interchainqueries.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.neutron.interchainqueries.QueryParamsRequest, $root.neutron.interchainqueries.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<neutron.interchainqueries.QueryParamsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Query#registeredQueries}.
                 * @memberof neutron.interchainqueries.Query
                 * @typedef RegisteredQueriesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.QueryRegisteredQueriesResponse} [response] QueryRegisteredQueriesResponse
                 */
    
                /**
                 * Calls RegisteredQueries.
                 * @function registeredQueries
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryRegisteredQueriesRequest} request QueryRegisteredQueriesRequest message or plain object
                 * @param {neutron.interchainqueries.Query.RegisteredQueriesCallback} callback Node-style callback called with the error, if any, and QueryRegisteredQueriesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.registeredQueries = function registeredQueries(request, callback) {
                    return this.rpcCall(registeredQueries, $root.neutron.interchainqueries.QueryRegisteredQueriesRequest, $root.neutron.interchainqueries.QueryRegisteredQueriesResponse, request, callback);
                }, "name", { value: "RegisteredQueries" });
    
                /**
                 * Calls RegisteredQueries.
                 * @function registeredQueries
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryRegisteredQueriesRequest} request QueryRegisteredQueriesRequest message or plain object
                 * @returns {Promise<neutron.interchainqueries.QueryRegisteredQueriesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Query#registeredQuery}.
                 * @memberof neutron.interchainqueries.Query
                 * @typedef RegisteredQueryCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.QueryRegisteredQueryResponse} [response] QueryRegisteredQueryResponse
                 */
    
                /**
                 * Calls RegisteredQuery.
                 * @function registeredQuery
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryRequest} request QueryRegisteredQueryRequest message or plain object
                 * @param {neutron.interchainqueries.Query.RegisteredQueryCallback} callback Node-style callback called with the error, if any, and QueryRegisteredQueryResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.registeredQuery = function registeredQuery(request, callback) {
                    return this.rpcCall(registeredQuery, $root.neutron.interchainqueries.QueryRegisteredQueryRequest, $root.neutron.interchainqueries.QueryRegisteredQueryResponse, request, callback);
                }, "name", { value: "RegisteredQuery" });
    
                /**
                 * Calls RegisteredQuery.
                 * @function registeredQuery
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryRequest} request QueryRegisteredQueryRequest message or plain object
                 * @returns {Promise<neutron.interchainqueries.QueryRegisteredQueryResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Query#queryResult}.
                 * @memberof neutron.interchainqueries.Query
                 * @typedef QueryResultCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.QueryRegisteredQueryResultResponse} [response] QueryRegisteredQueryResultResponse
                 */
    
                /**
                 * Calls QueryResult.
                 * @function queryResult
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResultRequest} request QueryRegisteredQueryResultRequest message or plain object
                 * @param {neutron.interchainqueries.Query.QueryResultCallback} callback Node-style callback called with the error, if any, and QueryRegisteredQueryResultResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.queryResult = function queryResult(request, callback) {
                    return this.rpcCall(queryResult, $root.neutron.interchainqueries.QueryRegisteredQueryResultRequest, $root.neutron.interchainqueries.QueryRegisteredQueryResultResponse, request, callback);
                }, "name", { value: "QueryResult" });
    
                /**
                 * Calls QueryResult.
                 * @function queryResult
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResultRequest} request QueryRegisteredQueryResultRequest message or plain object
                 * @returns {Promise<neutron.interchainqueries.QueryRegisteredQueryResultResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.interchainqueries.Query#lastRemoteHeight}.
                 * @memberof neutron.interchainqueries.Query
                 * @typedef LastRemoteHeightCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchainqueries.QueryLastRemoteHeightResponse} [response] QueryLastRemoteHeightResponse
                 */
    
                /**
                 * Calls LastRemoteHeight.
                 * @function lastRemoteHeight
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryLastRemoteHeight} request QueryLastRemoteHeight message or plain object
                 * @param {neutron.interchainqueries.Query.LastRemoteHeightCallback} callback Node-style callback called with the error, if any, and QueryLastRemoteHeightResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.lastRemoteHeight = function lastRemoteHeight(request, callback) {
                    return this.rpcCall(lastRemoteHeight, $root.neutron.interchainqueries.QueryLastRemoteHeight, $root.neutron.interchainqueries.QueryLastRemoteHeightResponse, request, callback);
                }, "name", { value: "LastRemoteHeight" });
    
                /**
                 * Calls LastRemoteHeight.
                 * @function lastRemoteHeight
                 * @memberof neutron.interchainqueries.Query
                 * @instance
                 * @param {neutron.interchainqueries.IQueryLastRemoteHeight} request QueryLastRemoteHeight message or plain object
                 * @returns {Promise<neutron.interchainqueries.QueryLastRemoteHeightResponse>} Promise
                 * @variation 2
                 */
    
                return Query;
            })();
    
            interchainqueries.QueryParamsRequest = (function() {
    
                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryParamsRequest
                 */
    
                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link neutron.interchainqueries.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryParamsRequest
                 * @static
                 * @param {neutron.interchainqueries.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryParamsRequest
                 * @static
                 * @param {neutron.interchainqueries.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryParamsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryParamsRequest)
                        return object;
                    return new $root.neutron.interchainqueries.QueryParamsRequest();
                };
    
                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryParamsRequest
                 * @static
                 * @param {neutron.interchainqueries.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsRequest;
            })();
    
            interchainqueries.QueryParamsResponse = (function() {
    
                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryParamsResponse
                 * @property {neutron.interchainqueries.IParams|null} [params] QueryParamsResponse params
                 */
    
                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryParamsResponse params.
                 * @member {neutron.interchainqueries.IParams|null|undefined} params
                 * @memberof neutron.interchainqueries.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;
    
                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link neutron.interchainqueries.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryParamsResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.interchainqueries.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryParamsResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.interchainqueries.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.interchainqueries.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryParamsResponse)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.interchainqueries.QueryParamsResponse.params: object expected");
                        message.params = $root.neutron.interchainqueries.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryParamsResponse
                 * @static
                 * @param {neutron.interchainqueries.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.interchainqueries.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsResponse;
            })();
    
            interchainqueries.QueryRegisteredQueriesRequest = (function() {
    
                /**
                 * Properties of a QueryRegisteredQueriesRequest.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryRegisteredQueriesRequest
                 * @property {Array.<string>|null} [owners] QueryRegisteredQueriesRequest owners
                 * @property {string|null} [connection_id] QueryRegisteredQueriesRequest connection_id
                 * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryRegisteredQueriesRequest pagination
                 */
    
                /**
                 * Constructs a new QueryRegisteredQueriesRequest.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryRegisteredQueriesRequest.
                 * @implements IQueryRegisteredQueriesRequest
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryRegisteredQueriesRequest=} [properties] Properties to set
                 */
                function QueryRegisteredQueriesRequest(properties) {
                    this.owners = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRegisteredQueriesRequest owners.
                 * @member {Array.<string>} owners
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @instance
                 */
                QueryRegisteredQueriesRequest.prototype.owners = $util.emptyArray;
    
                /**
                 * QueryRegisteredQueriesRequest connection_id.
                 * @member {string} connection_id
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @instance
                 */
                QueryRegisteredQueriesRequest.prototype.connection_id = "";
    
                /**
                 * QueryRegisteredQueriesRequest pagination.
                 * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @instance
                 */
                QueryRegisteredQueriesRequest.prototype.pagination = null;
    
                /**
                 * Encodes the specified QueryRegisteredQueriesRequest message. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueriesRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueriesRequest} message QueryRegisteredQueriesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueriesRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.owners != null && message.owners.length)
                        for (var i = 0; i < message.owners.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.owners[i]);
                    if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.connection_id);
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRegisteredQueriesRequest message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueriesRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueriesRequest} message QueryRegisteredQueriesRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueriesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRegisteredQueriesRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryRegisteredQueriesRequest} QueryRegisteredQueriesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueriesRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryRegisteredQueriesRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.owners && message.owners.length))
                                message.owners = [];
                            message.owners.push(reader.string());
                            break;
                        case 2:
                            message.connection_id = reader.string();
                            break;
                        case 3:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRegisteredQueriesRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryRegisteredQueriesRequest} QueryRegisteredQueriesRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueriesRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRegisteredQueriesRequest message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRegisteredQueriesRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.owners != null && message.hasOwnProperty("owners")) {
                        if (!Array.isArray(message.owners))
                            return "owners: array expected";
                        for (var i = 0; i < message.owners.length; ++i)
                            if (!$util.isString(message.owners[i]))
                                return "owners: string[] expected";
                    }
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        if (!$util.isString(message.connection_id))
                            return "connection_id: string expected";
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        var error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryRegisteredQueriesRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryRegisteredQueriesRequest} QueryRegisteredQueriesRequest
                 */
                QueryRegisteredQueriesRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryRegisteredQueriesRequest)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryRegisteredQueriesRequest();
                    if (object.owners) {
                        if (!Array.isArray(object.owners))
                            throw TypeError(".neutron.interchainqueries.QueryRegisteredQueriesRequest.owners: array expected");
                        message.owners = [];
                        for (var i = 0; i < object.owners.length; ++i)
                            message.owners[i] = String(object.owners[i]);
                    }
                    if (object.connection_id != null)
                        message.connection_id = String(object.connection_id);
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".neutron.interchainqueries.QueryRegisteredQueriesRequest.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRegisteredQueriesRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @static
                 * @param {neutron.interchainqueries.QueryRegisteredQueriesRequest} message QueryRegisteredQueriesRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRegisteredQueriesRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.owners = [];
                    if (options.defaults) {
                        object.connection_id = "";
                        object.pagination = null;
                    }
                    if (message.owners && message.owners.length) {
                        object.owners = [];
                        for (var j = 0; j < message.owners.length; ++j)
                            object.owners[j] = message.owners[j];
                    }
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        object.connection_id = message.connection_id;
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                    return object;
                };
    
                /**
                 * Converts this QueryRegisteredQueriesRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRegisteredQueriesRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRegisteredQueriesRequest;
            })();
    
            interchainqueries.QueryRegisteredQueriesResponse = (function() {
    
                /**
                 * Properties of a QueryRegisteredQueriesResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryRegisteredQueriesResponse
                 * @property {Array.<neutron.interchainqueries.IRegisteredQuery>|null} [registered_queries] QueryRegisteredQueriesResponse registered_queries
                 * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryRegisteredQueriesResponse pagination
                 */
    
                /**
                 * Constructs a new QueryRegisteredQueriesResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryRegisteredQueriesResponse.
                 * @implements IQueryRegisteredQueriesResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryRegisteredQueriesResponse=} [properties] Properties to set
                 */
                function QueryRegisteredQueriesResponse(properties) {
                    this.registered_queries = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRegisteredQueriesResponse registered_queries.
                 * @member {Array.<neutron.interchainqueries.IRegisteredQuery>} registered_queries
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @instance
                 */
                QueryRegisteredQueriesResponse.prototype.registered_queries = $util.emptyArray;
    
                /**
                 * QueryRegisteredQueriesResponse pagination.
                 * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @instance
                 */
                QueryRegisteredQueriesResponse.prototype.pagination = null;
    
                /**
                 * Encodes the specified QueryRegisteredQueriesResponse message. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueriesResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueriesResponse} message QueryRegisteredQueriesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueriesResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.registered_queries != null && message.registered_queries.length)
                        for (var i = 0; i < message.registered_queries.length; ++i)
                            $root.neutron.interchainqueries.RegisteredQuery.encode(message.registered_queries[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                        $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRegisteredQueriesResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueriesResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueriesResponse} message QueryRegisteredQueriesResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueriesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRegisteredQueriesResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryRegisteredQueriesResponse} QueryRegisteredQueriesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueriesResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryRegisteredQueriesResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.registered_queries && message.registered_queries.length))
                                message.registered_queries = [];
                            message.registered_queries.push($root.neutron.interchainqueries.RegisteredQuery.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRegisteredQueriesResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryRegisteredQueriesResponse} QueryRegisteredQueriesResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueriesResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRegisteredQueriesResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRegisteredQueriesResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.registered_queries != null && message.hasOwnProperty("registered_queries")) {
                        if (!Array.isArray(message.registered_queries))
                            return "registered_queries: array expected";
                        for (var i = 0; i < message.registered_queries.length; ++i) {
                            var error = $root.neutron.interchainqueries.RegisteredQuery.verify(message.registered_queries[i]);
                            if (error)
                                return "registered_queries." + error;
                        }
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination")) {
                        var error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                        if (error)
                            return "pagination." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryRegisteredQueriesResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryRegisteredQueriesResponse} QueryRegisteredQueriesResponse
                 */
                QueryRegisteredQueriesResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryRegisteredQueriesResponse)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryRegisteredQueriesResponse();
                    if (object.registered_queries) {
                        if (!Array.isArray(object.registered_queries))
                            throw TypeError(".neutron.interchainqueries.QueryRegisteredQueriesResponse.registered_queries: array expected");
                        message.registered_queries = [];
                        for (var i = 0; i < object.registered_queries.length; ++i) {
                            if (typeof object.registered_queries[i] !== "object")
                                throw TypeError(".neutron.interchainqueries.QueryRegisteredQueriesResponse.registered_queries: object expected");
                            message.registered_queries[i] = $root.neutron.interchainqueries.RegisteredQuery.fromObject(object.registered_queries[i]);
                        }
                    }
                    if (object.pagination != null) {
                        if (typeof object.pagination !== "object")
                            throw TypeError(".neutron.interchainqueries.QueryRegisteredQueriesResponse.pagination: object expected");
                        message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRegisteredQueriesResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @static
                 * @param {neutron.interchainqueries.QueryRegisteredQueriesResponse} message QueryRegisteredQueriesResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRegisteredQueriesResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.registered_queries = [];
                    if (options.defaults)
                        object.pagination = null;
                    if (message.registered_queries && message.registered_queries.length) {
                        object.registered_queries = [];
                        for (var j = 0; j < message.registered_queries.length; ++j)
                            object.registered_queries[j] = $root.neutron.interchainqueries.RegisteredQuery.toObject(message.registered_queries[j], options);
                    }
                    if (message.pagination != null && message.hasOwnProperty("pagination"))
                        object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                    return object;
                };
    
                /**
                 * Converts this QueryRegisteredQueriesResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryRegisteredQueriesResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRegisteredQueriesResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRegisteredQueriesResponse;
            })();
    
            interchainqueries.QueryRegisteredQueryRequest = (function() {
    
                /**
                 * Properties of a QueryRegisteredQueryRequest.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryRegisteredQueryRequest
                 * @property {Long|null} [query_id] QueryRegisteredQueryRequest query_id
                 */
    
                /**
                 * Constructs a new QueryRegisteredQueryRequest.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryRegisteredQueryRequest.
                 * @implements IQueryRegisteredQueryRequest
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryRequest=} [properties] Properties to set
                 */
                function QueryRegisteredQueryRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRegisteredQueryRequest query_id.
                 * @member {Long} query_id
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryRequest
                 * @instance
                 */
                QueryRegisteredQueryRequest.prototype.query_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryRegisteredQueryRequest message. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueryRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryRequest
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryRequest} message QueryRegisteredQueryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueryRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.query_id != null && Object.hasOwnProperty.call(message, "query_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.query_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRegisteredQueryRequest message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueryRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryRequest
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryRequest} message QueryRegisteredQueryRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueryRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRegisteredQueryRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryRequest} QueryRegisteredQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueryRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryRegisteredQueryRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.query_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRegisteredQueryRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryRequest} QueryRegisteredQueryRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueryRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRegisteredQueryRequest message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRegisteredQueryRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (!$util.isInteger(message.query_id) && !(message.query_id && $util.isInteger(message.query_id.low) && $util.isInteger(message.query_id.high)))
                            return "query_id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryRegisteredQueryRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryRequest} QueryRegisteredQueryRequest
                 */
                QueryRegisteredQueryRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryRegisteredQueryRequest)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryRegisteredQueryRequest();
                    if (object.query_id != null)
                        if ($util.Long)
                            (message.query_id = $util.Long.fromValue(object.query_id)).unsigned = true;
                        else if (typeof object.query_id === "string")
                            message.query_id = parseInt(object.query_id, 10);
                        else if (typeof object.query_id === "number")
                            message.query_id = object.query_id;
                        else if (typeof object.query_id === "object")
                            message.query_id = new $util.LongBits(object.query_id.low >>> 0, object.query_id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRegisteredQueryRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryRequest
                 * @static
                 * @param {neutron.interchainqueries.QueryRegisteredQueryRequest} message QueryRegisteredQueryRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRegisteredQueryRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.query_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.query_id = options.longs === String ? "0" : 0;
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (typeof message.query_id === "number")
                            object.query_id = options.longs === String ? String(message.query_id) : message.query_id;
                        else
                            object.query_id = options.longs === String ? $util.Long.prototype.toString.call(message.query_id) : options.longs === Number ? new $util.LongBits(message.query_id.low >>> 0, message.query_id.high >>> 0).toNumber(true) : message.query_id;
                    return object;
                };
    
                /**
                 * Converts this QueryRegisteredQueryRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRegisteredQueryRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRegisteredQueryRequest;
            })();
    
            interchainqueries.QueryRegisteredQueryResponse = (function() {
    
                /**
                 * Properties of a QueryRegisteredQueryResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryRegisteredQueryResponse
                 * @property {neutron.interchainqueries.IRegisteredQuery|null} [registered_query] QueryRegisteredQueryResponse registered_query
                 */
    
                /**
                 * Constructs a new QueryRegisteredQueryResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryRegisteredQueryResponse.
                 * @implements IQueryRegisteredQueryResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResponse=} [properties] Properties to set
                 */
                function QueryRegisteredQueryResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRegisteredQueryResponse registered_query.
                 * @member {neutron.interchainqueries.IRegisteredQuery|null|undefined} registered_query
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResponse
                 * @instance
                 */
                QueryRegisteredQueryResponse.prototype.registered_query = null;
    
                /**
                 * Encodes the specified QueryRegisteredQueryResponse message. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueryResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResponse} message QueryRegisteredQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueryResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.registered_query != null && Object.hasOwnProperty.call(message, "registered_query"))
                        $root.neutron.interchainqueries.RegisteredQuery.encode(message.registered_query, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRegisteredQueryResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueryResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResponse} message QueryRegisteredQueryResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueryResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRegisteredQueryResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryResponse} QueryRegisteredQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueryResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryRegisteredQueryResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.registered_query = $root.neutron.interchainqueries.RegisteredQuery.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRegisteredQueryResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryResponse} QueryRegisteredQueryResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueryResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRegisteredQueryResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRegisteredQueryResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.registered_query != null && message.hasOwnProperty("registered_query")) {
                        var error = $root.neutron.interchainqueries.RegisteredQuery.verify(message.registered_query);
                        if (error)
                            return "registered_query." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryRegisteredQueryResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryResponse} QueryRegisteredQueryResponse
                 */
                QueryRegisteredQueryResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryRegisteredQueryResponse)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryRegisteredQueryResponse();
                    if (object.registered_query != null) {
                        if (typeof object.registered_query !== "object")
                            throw TypeError(".neutron.interchainqueries.QueryRegisteredQueryResponse.registered_query: object expected");
                        message.registered_query = $root.neutron.interchainqueries.RegisteredQuery.fromObject(object.registered_query);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRegisteredQueryResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResponse
                 * @static
                 * @param {neutron.interchainqueries.QueryRegisteredQueryResponse} message QueryRegisteredQueryResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRegisteredQueryResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.registered_query = null;
                    if (message.registered_query != null && message.hasOwnProperty("registered_query"))
                        object.registered_query = $root.neutron.interchainqueries.RegisteredQuery.toObject(message.registered_query, options);
                    return object;
                };
    
                /**
                 * Converts this QueryRegisteredQueryResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRegisteredQueryResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRegisteredQueryResponse;
            })();
    
            interchainqueries.QueryRegisteredQueryResultRequest = (function() {
    
                /**
                 * Properties of a QueryRegisteredQueryResultRequest.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryRegisteredQueryResultRequest
                 * @property {Long|null} [query_id] QueryRegisteredQueryResultRequest query_id
                 */
    
                /**
                 * Constructs a new QueryRegisteredQueryResultRequest.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryRegisteredQueryResultRequest.
                 * @implements IQueryRegisteredQueryResultRequest
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResultRequest=} [properties] Properties to set
                 */
                function QueryRegisteredQueryResultRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRegisteredQueryResultRequest query_id.
                 * @member {Long} query_id
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultRequest
                 * @instance
                 */
                QueryRegisteredQueryResultRequest.prototype.query_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryRegisteredQueryResultRequest message. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueryResultRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultRequest
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResultRequest} message QueryRegisteredQueryResultRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueryResultRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.query_id != null && Object.hasOwnProperty.call(message, "query_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.query_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRegisteredQueryResultRequest message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueryResultRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultRequest
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResultRequest} message QueryRegisteredQueryResultRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueryResultRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRegisteredQueryResultRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryResultRequest} QueryRegisteredQueryResultRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueryResultRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryRegisteredQueryResultRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.query_id = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRegisteredQueryResultRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryResultRequest} QueryRegisteredQueryResultRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueryResultRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRegisteredQueryResultRequest message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRegisteredQueryResultRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (!$util.isInteger(message.query_id) && !(message.query_id && $util.isInteger(message.query_id.low) && $util.isInteger(message.query_id.high)))
                            return "query_id: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryRegisteredQueryResultRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryResultRequest} QueryRegisteredQueryResultRequest
                 */
                QueryRegisteredQueryResultRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryRegisteredQueryResultRequest)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryRegisteredQueryResultRequest();
                    if (object.query_id != null)
                        if ($util.Long)
                            (message.query_id = $util.Long.fromValue(object.query_id)).unsigned = true;
                        else if (typeof object.query_id === "string")
                            message.query_id = parseInt(object.query_id, 10);
                        else if (typeof object.query_id === "number")
                            message.query_id = object.query_id;
                        else if (typeof object.query_id === "object")
                            message.query_id = new $util.LongBits(object.query_id.low >>> 0, object.query_id.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRegisteredQueryResultRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultRequest
                 * @static
                 * @param {neutron.interchainqueries.QueryRegisteredQueryResultRequest} message QueryRegisteredQueryResultRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRegisteredQueryResultRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.query_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.query_id = options.longs === String ? "0" : 0;
                    if (message.query_id != null && message.hasOwnProperty("query_id"))
                        if (typeof message.query_id === "number")
                            object.query_id = options.longs === String ? String(message.query_id) : message.query_id;
                        else
                            object.query_id = options.longs === String ? $util.Long.prototype.toString.call(message.query_id) : options.longs === Number ? new $util.LongBits(message.query_id.low >>> 0, message.query_id.high >>> 0).toNumber(true) : message.query_id;
                    return object;
                };
    
                /**
                 * Converts this QueryRegisteredQueryResultRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRegisteredQueryResultRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRegisteredQueryResultRequest;
            })();
    
            interchainqueries.QueryRegisteredQueryResultResponse = (function() {
    
                /**
                 * Properties of a QueryRegisteredQueryResultResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryRegisteredQueryResultResponse
                 * @property {neutron.interchainqueries.IQueryResult|null} [result] QueryRegisteredQueryResultResponse result
                 */
    
                /**
                 * Constructs a new QueryRegisteredQueryResultResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryRegisteredQueryResultResponse.
                 * @implements IQueryRegisteredQueryResultResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResultResponse=} [properties] Properties to set
                 */
                function QueryRegisteredQueryResultResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryRegisteredQueryResultResponse result.
                 * @member {neutron.interchainqueries.IQueryResult|null|undefined} result
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultResponse
                 * @instance
                 */
                QueryRegisteredQueryResultResponse.prototype.result = null;
    
                /**
                 * Encodes the specified QueryRegisteredQueryResultResponse message. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueryResultResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResultResponse} message QueryRegisteredQueryResultResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueryResultResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                        $root.neutron.interchainqueries.QueryResult.encode(message.result, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryRegisteredQueryResultResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryRegisteredQueryResultResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryRegisteredQueryResultResponse} message QueryRegisteredQueryResultResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryRegisteredQueryResultResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryRegisteredQueryResultResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryResultResponse} QueryRegisteredQueryResultResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueryResultResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryRegisteredQueryResultResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.result = $root.neutron.interchainqueries.QueryResult.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryRegisteredQueryResultResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryResultResponse} QueryRegisteredQueryResultResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryRegisteredQueryResultResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryRegisteredQueryResultResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryRegisteredQueryResultResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.result != null && message.hasOwnProperty("result")) {
                        var error = $root.neutron.interchainqueries.QueryResult.verify(message.result);
                        if (error)
                            return "result." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryRegisteredQueryResultResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryRegisteredQueryResultResponse} QueryRegisteredQueryResultResponse
                 */
                QueryRegisteredQueryResultResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryRegisteredQueryResultResponse)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryRegisteredQueryResultResponse();
                    if (object.result != null) {
                        if (typeof object.result !== "object")
                            throw TypeError(".neutron.interchainqueries.QueryRegisteredQueryResultResponse.result: object expected");
                        message.result = $root.neutron.interchainqueries.QueryResult.fromObject(object.result);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryRegisteredQueryResultResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultResponse
                 * @static
                 * @param {neutron.interchainqueries.QueryRegisteredQueryResultResponse} message QueryRegisteredQueryResultResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryRegisteredQueryResultResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.result = null;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = $root.neutron.interchainqueries.QueryResult.toObject(message.result, options);
                    return object;
                };
    
                /**
                 * Converts this QueryRegisteredQueryResultResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryRegisteredQueryResultResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryRegisteredQueryResultResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryRegisteredQueryResultResponse;
            })();
    
            interchainqueries.Transaction = (function() {
    
                /**
                 * Properties of a Transaction.
                 * @memberof neutron.interchainqueries
                 * @interface ITransaction
                 * @property {Long|null} [id] Transaction id
                 * @property {Long|null} [height] Transaction height
                 * @property {Uint8Array|null} [data] Transaction data
                 */
    
                /**
                 * Constructs a new Transaction.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a Transaction.
                 * @implements ITransaction
                 * @constructor
                 * @param {neutron.interchainqueries.ITransaction=} [properties] Properties to set
                 */
                function Transaction(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Transaction id.
                 * @member {Long} id
                 * @memberof neutron.interchainqueries.Transaction
                 * @instance
                 */
                Transaction.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Transaction height.
                 * @member {Long} height
                 * @memberof neutron.interchainqueries.Transaction
                 * @instance
                 */
                Transaction.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Transaction data.
                 * @member {Uint8Array} data
                 * @memberof neutron.interchainqueries.Transaction
                 * @instance
                 */
                Transaction.prototype.data = $util.newBuffer([]);
    
                /**
                 * Encodes the specified Transaction message. Does not implicitly {@link neutron.interchainqueries.Transaction.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.Transaction
                 * @static
                 * @param {neutron.interchainqueries.ITransaction} message Transaction message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Transaction.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.height);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                    return writer;
                };
    
                /**
                 * Encodes the specified Transaction message, length delimited. Does not implicitly {@link neutron.interchainqueries.Transaction.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.Transaction
                 * @static
                 * @param {neutron.interchainqueries.ITransaction} message Transaction message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Transaction.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Transaction message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.Transaction
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.Transaction} Transaction
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Transaction.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.Transaction();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.id = reader.uint64();
                            break;
                        case 2:
                            message.height = reader.uint64();
                            break;
                        case 3:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Transaction message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.Transaction
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.Transaction} Transaction
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Transaction.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Transaction message.
                 * @function verify
                 * @memberof neutron.interchainqueries.Transaction
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Transaction.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                            return "id: integer|Long expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Transaction message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.Transaction
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.Transaction} Transaction
                 */
                Transaction.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.Transaction)
                        return object;
                    var message = new $root.neutron.interchainqueries.Transaction();
                    if (object.id != null)
                        if ($util.Long)
                            (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                        else if (typeof object.id === "string")
                            message.id = parseInt(object.id, 10);
                        else if (typeof object.id === "number")
                            message.id = object.id;
                        else if (typeof object.id === "object")
                            message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Transaction message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.Transaction
                 * @static
                 * @param {neutron.interchainqueries.Transaction} message Transaction
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Transaction.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.id = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                        if (typeof message.id === "number")
                            object.id = options.longs === String ? String(message.id) : message.id;
                        else
                            object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };
    
                /**
                 * Converts this Transaction to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.Transaction
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Transaction.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Transaction;
            })();
    
            interchainqueries.QueryLastRemoteHeight = (function() {
    
                /**
                 * Properties of a QueryLastRemoteHeight.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryLastRemoteHeight
                 * @property {string|null} [connection_id] QueryLastRemoteHeight connection_id
                 */
    
                /**
                 * Constructs a new QueryLastRemoteHeight.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryLastRemoteHeight.
                 * @implements IQueryLastRemoteHeight
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryLastRemoteHeight=} [properties] Properties to set
                 */
                function QueryLastRemoteHeight(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryLastRemoteHeight connection_id.
                 * @member {string} connection_id
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeight
                 * @instance
                 */
                QueryLastRemoteHeight.prototype.connection_id = "";
    
                /**
                 * Encodes the specified QueryLastRemoteHeight message. Does not implicitly {@link neutron.interchainqueries.QueryLastRemoteHeight.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeight
                 * @static
                 * @param {neutron.interchainqueries.IQueryLastRemoteHeight} message QueryLastRemoteHeight message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLastRemoteHeight.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.connection_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryLastRemoteHeight message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryLastRemoteHeight.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeight
                 * @static
                 * @param {neutron.interchainqueries.IQueryLastRemoteHeight} message QueryLastRemoteHeight message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLastRemoteHeight.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryLastRemoteHeight message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeight
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryLastRemoteHeight} QueryLastRemoteHeight
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLastRemoteHeight.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryLastRemoteHeight();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.connection_id = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryLastRemoteHeight message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeight
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryLastRemoteHeight} QueryLastRemoteHeight
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLastRemoteHeight.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryLastRemoteHeight message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeight
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLastRemoteHeight.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        if (!$util.isString(message.connection_id))
                            return "connection_id: string expected";
                    return null;
                };
    
                /**
                 * Creates a QueryLastRemoteHeight message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeight
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryLastRemoteHeight} QueryLastRemoteHeight
                 */
                QueryLastRemoteHeight.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryLastRemoteHeight)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryLastRemoteHeight();
                    if (object.connection_id != null)
                        message.connection_id = String(object.connection_id);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryLastRemoteHeight message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeight
                 * @static
                 * @param {neutron.interchainqueries.QueryLastRemoteHeight} message QueryLastRemoteHeight
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLastRemoteHeight.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.connection_id = "";
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        object.connection_id = message.connection_id;
                    return object;
                };
    
                /**
                 * Converts this QueryLastRemoteHeight to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeight
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLastRemoteHeight.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryLastRemoteHeight;
            })();
    
            interchainqueries.QueryLastRemoteHeightResponse = (function() {
    
                /**
                 * Properties of a QueryLastRemoteHeightResponse.
                 * @memberof neutron.interchainqueries
                 * @interface IQueryLastRemoteHeightResponse
                 * @property {Long|null} [height] QueryLastRemoteHeightResponse height
                 */
    
                /**
                 * Constructs a new QueryLastRemoteHeightResponse.
                 * @memberof neutron.interchainqueries
                 * @classdesc Represents a QueryLastRemoteHeightResponse.
                 * @implements IQueryLastRemoteHeightResponse
                 * @constructor
                 * @param {neutron.interchainqueries.IQueryLastRemoteHeightResponse=} [properties] Properties to set
                 */
                function QueryLastRemoteHeightResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryLastRemoteHeightResponse height.
                 * @member {Long} height
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeightResponse
                 * @instance
                 */
                QueryLastRemoteHeightResponse.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified QueryLastRemoteHeightResponse message. Does not implicitly {@link neutron.interchainqueries.QueryLastRemoteHeightResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeightResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryLastRemoteHeightResponse} message QueryLastRemoteHeightResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLastRemoteHeightResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryLastRemoteHeightResponse message, length delimited. Does not implicitly {@link neutron.interchainqueries.QueryLastRemoteHeightResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeightResponse
                 * @static
                 * @param {neutron.interchainqueries.IQueryLastRemoteHeightResponse} message QueryLastRemoteHeightResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryLastRemoteHeightResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryLastRemoteHeightResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeightResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchainqueries.QueryLastRemoteHeightResponse} QueryLastRemoteHeightResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLastRemoteHeightResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchainqueries.QueryLastRemoteHeightResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.height = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryLastRemoteHeightResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeightResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchainqueries.QueryLastRemoteHeightResponse} QueryLastRemoteHeightResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryLastRemoteHeightResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryLastRemoteHeightResponse message.
                 * @function verify
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeightResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryLastRemoteHeightResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a QueryLastRemoteHeightResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeightResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchainqueries.QueryLastRemoteHeightResponse} QueryLastRemoteHeightResponse
                 */
                QueryLastRemoteHeightResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchainqueries.QueryLastRemoteHeightResponse)
                        return object;
                    var message = new $root.neutron.interchainqueries.QueryLastRemoteHeightResponse();
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryLastRemoteHeightResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeightResponse
                 * @static
                 * @param {neutron.interchainqueries.QueryLastRemoteHeightResponse} message QueryLastRemoteHeightResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryLastRemoteHeightResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                    return object;
                };
    
                /**
                 * Converts this QueryLastRemoteHeightResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchainqueries.QueryLastRemoteHeightResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryLastRemoteHeightResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryLastRemoteHeightResponse;
            })();
    
            return interchainqueries;
        })();
    
        neutron.interchaintxs = (function() {
    
            /**
             * Namespace interchaintxs.
             * @memberof neutron
             * @namespace
             */
            var interchaintxs = {};
    
            interchaintxs.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof neutron.interchaintxs
                 * @namespace
                 */
                var v1 = {};
    
                v1.Msg = (function() {
    
                    /**
                     * Constructs a new Msg service.
                     * @memberof neutron.interchaintxs.v1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;
    
                    /**
                     * Callback as used by {@link neutron.interchaintxs.v1.Msg#registerInterchainAccount}.
                     * @memberof neutron.interchaintxs.v1.Msg
                     * @typedef RegisterInterchainAccountCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse} [response] MsgRegisterInterchainAccountResponse
                     */
    
                    /**
                     * Calls RegisterInterchainAccount.
                     * @function registerInterchainAccount
                     * @memberof neutron.interchaintxs.v1.Msg
                     * @instance
                     * @param {neutron.interchaintxs.v1.IMsgRegisterInterchainAccount} request MsgRegisterInterchainAccount message or plain object
                     * @param {neutron.interchaintxs.v1.Msg.RegisterInterchainAccountCallback} callback Node-style callback called with the error, if any, and MsgRegisterInterchainAccountResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.registerInterchainAccount = function registerInterchainAccount(request, callback) {
                        return this.rpcCall(registerInterchainAccount, $root.neutron.interchaintxs.v1.MsgRegisterInterchainAccount, $root.neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse, request, callback);
                    }, "name", { value: "RegisterInterchainAccount" });
    
                    /**
                     * Calls RegisterInterchainAccount.
                     * @function registerInterchainAccount
                     * @memberof neutron.interchaintxs.v1.Msg
                     * @instance
                     * @param {neutron.interchaintxs.v1.IMsgRegisterInterchainAccount} request MsgRegisterInterchainAccount message or plain object
                     * @returns {Promise<neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link neutron.interchaintxs.v1.Msg#submitTx}.
                     * @memberof neutron.interchaintxs.v1.Msg
                     * @typedef SubmitTxCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {neutron.interchaintxs.v1.MsgSubmitTxResponse} [response] MsgSubmitTxResponse
                     */
    
                    /**
                     * Calls SubmitTx.
                     * @function submitTx
                     * @memberof neutron.interchaintxs.v1.Msg
                     * @instance
                     * @param {neutron.interchaintxs.v1.IMsgSubmitTx} request MsgSubmitTx message or plain object
                     * @param {neutron.interchaintxs.v1.Msg.SubmitTxCallback} callback Node-style callback called with the error, if any, and MsgSubmitTxResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.submitTx = function submitTx(request, callback) {
                        return this.rpcCall(submitTx, $root.neutron.interchaintxs.v1.MsgSubmitTx, $root.neutron.interchaintxs.v1.MsgSubmitTxResponse, request, callback);
                    }, "name", { value: "SubmitTx" });
    
                    /**
                     * Calls SubmitTx.
                     * @function submitTx
                     * @memberof neutron.interchaintxs.v1.Msg
                     * @instance
                     * @param {neutron.interchaintxs.v1.IMsgSubmitTx} request MsgSubmitTx message or plain object
                     * @returns {Promise<neutron.interchaintxs.v1.MsgSubmitTxResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link neutron.interchaintxs.v1.Msg#updateParams}.
                     * @memberof neutron.interchaintxs.v1.Msg
                     * @typedef UpdateParamsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {neutron.interchaintxs.v1.MsgUpdateParamsResponse} [response] MsgUpdateParamsResponse
                     */
    
                    /**
                     * Calls UpdateParams.
                     * @function updateParams
                     * @memberof neutron.interchaintxs.v1.Msg
                     * @instance
                     * @param {neutron.interchaintxs.v1.IMsgUpdateParams} request MsgUpdateParams message or plain object
                     * @param {neutron.interchaintxs.v1.Msg.UpdateParamsCallback} callback Node-style callback called with the error, if any, and MsgUpdateParamsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.updateParams = function updateParams(request, callback) {
                        return this.rpcCall(updateParams, $root.neutron.interchaintxs.v1.MsgUpdateParams, $root.neutron.interchaintxs.v1.MsgUpdateParamsResponse, request, callback);
                    }, "name", { value: "UpdateParams" });
    
                    /**
                     * Calls UpdateParams.
                     * @function updateParams
                     * @memberof neutron.interchaintxs.v1.Msg
                     * @instance
                     * @param {neutron.interchaintxs.v1.IMsgUpdateParams} request MsgUpdateParams message or plain object
                     * @returns {Promise<neutron.interchaintxs.v1.MsgUpdateParamsResponse>} Promise
                     * @variation 2
                     */
    
                    return Msg;
                })();
    
                v1.MsgRegisterInterchainAccount = (function() {
    
                    /**
                     * Properties of a MsgRegisterInterchainAccount.
                     * @memberof neutron.interchaintxs.v1
                     * @interface IMsgRegisterInterchainAccount
                     * @property {string|null} [from_address] MsgRegisterInterchainAccount from_address
                     * @property {string|null} [connection_id] MsgRegisterInterchainAccount connection_id
                     * @property {string|null} [interchain_account_id] MsgRegisterInterchainAccount interchain_account_id
                     */
    
                    /**
                     * Constructs a new MsgRegisterInterchainAccount.
                     * @memberof neutron.interchaintxs.v1
                     * @classdesc Represents a MsgRegisterInterchainAccount.
                     * @implements IMsgRegisterInterchainAccount
                     * @constructor
                     * @param {neutron.interchaintxs.v1.IMsgRegisterInterchainAccount=} [properties] Properties to set
                     */
                    function MsgRegisterInterchainAccount(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgRegisterInterchainAccount from_address.
                     * @member {string} from_address
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @instance
                     */
                    MsgRegisterInterchainAccount.prototype.from_address = "";
    
                    /**
                     * MsgRegisterInterchainAccount connection_id.
                     * @member {string} connection_id
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @instance
                     */
                    MsgRegisterInterchainAccount.prototype.connection_id = "";
    
                    /**
                     * MsgRegisterInterchainAccount interchain_account_id.
                     * @member {string} interchain_account_id
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @instance
                     */
                    MsgRegisterInterchainAccount.prototype.interchain_account_id = "";
    
                    /**
                     * Encodes the specified MsgRegisterInterchainAccount message. Does not implicitly {@link neutron.interchaintxs.v1.MsgRegisterInterchainAccount.verify|verify} messages.
                     * @function encode
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgRegisterInterchainAccount} message MsgRegisterInterchainAccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRegisterInterchainAccount.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.from_address != null && Object.hasOwnProperty.call(message, "from_address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.from_address);
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.connection_id);
                        if (message.interchain_account_id != null && Object.hasOwnProperty.call(message, "interchain_account_id"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.interchain_account_id);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgRegisterInterchainAccount message, length delimited. Does not implicitly {@link neutron.interchaintxs.v1.MsgRegisterInterchainAccount.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgRegisterInterchainAccount} message MsgRegisterInterchainAccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRegisterInterchainAccount.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgRegisterInterchainAccount message from the specified reader or buffer.
                     * @function decode
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {neutron.interchaintxs.v1.MsgRegisterInterchainAccount} MsgRegisterInterchainAccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRegisterInterchainAccount.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.v1.MsgRegisterInterchainAccount();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.from_address = reader.string();
                                break;
                            case 2:
                                message.connection_id = reader.string();
                                break;
                            case 3:
                                message.interchain_account_id = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgRegisterInterchainAccount message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {neutron.interchaintxs.v1.MsgRegisterInterchainAccount} MsgRegisterInterchainAccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRegisterInterchainAccount.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgRegisterInterchainAccount message.
                     * @function verify
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgRegisterInterchainAccount.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.from_address != null && message.hasOwnProperty("from_address"))
                            if (!$util.isString(message.from_address))
                                return "from_address: string expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.interchain_account_id != null && message.hasOwnProperty("interchain_account_id"))
                            if (!$util.isString(message.interchain_account_id))
                                return "interchain_account_id: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgRegisterInterchainAccount message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {neutron.interchaintxs.v1.MsgRegisterInterchainAccount} MsgRegisterInterchainAccount
                     */
                    MsgRegisterInterchainAccount.fromObject = function fromObject(object) {
                        if (object instanceof $root.neutron.interchaintxs.v1.MsgRegisterInterchainAccount)
                            return object;
                        var message = new $root.neutron.interchaintxs.v1.MsgRegisterInterchainAccount();
                        if (object.from_address != null)
                            message.from_address = String(object.from_address);
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.interchain_account_id != null)
                            message.interchain_account_id = String(object.interchain_account_id);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgRegisterInterchainAccount message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @static
                     * @param {neutron.interchaintxs.v1.MsgRegisterInterchainAccount} message MsgRegisterInterchainAccount
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgRegisterInterchainAccount.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.from_address = "";
                            object.connection_id = "";
                            object.interchain_account_id = "";
                        }
                        if (message.from_address != null && message.hasOwnProperty("from_address"))
                            object.from_address = message.from_address;
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.interchain_account_id != null && message.hasOwnProperty("interchain_account_id"))
                            object.interchain_account_id = message.interchain_account_id;
                        return object;
                    };
    
                    /**
                     * Converts this MsgRegisterInterchainAccount to JSON.
                     * @function toJSON
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccount
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgRegisterInterchainAccount.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgRegisterInterchainAccount;
                })();
    
                v1.MsgRegisterInterchainAccountResponse = (function() {
    
                    /**
                     * Properties of a MsgRegisterInterchainAccountResponse.
                     * @memberof neutron.interchaintxs.v1
                     * @interface IMsgRegisterInterchainAccountResponse
                     */
    
                    /**
                     * Constructs a new MsgRegisterInterchainAccountResponse.
                     * @memberof neutron.interchaintxs.v1
                     * @classdesc Represents a MsgRegisterInterchainAccountResponse.
                     * @implements IMsgRegisterInterchainAccountResponse
                     * @constructor
                     * @param {neutron.interchaintxs.v1.IMsgRegisterInterchainAccountResponse=} [properties] Properties to set
                     */
                    function MsgRegisterInterchainAccountResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified MsgRegisterInterchainAccountResponse message. Does not implicitly {@link neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse.verify|verify} messages.
                     * @function encode
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgRegisterInterchainAccountResponse} message MsgRegisterInterchainAccountResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRegisterInterchainAccountResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgRegisterInterchainAccountResponse message, length delimited. Does not implicitly {@link neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgRegisterInterchainAccountResponse} message MsgRegisterInterchainAccountResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgRegisterInterchainAccountResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgRegisterInterchainAccountResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse} MsgRegisterInterchainAccountResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRegisterInterchainAccountResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgRegisterInterchainAccountResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse} MsgRegisterInterchainAccountResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgRegisterInterchainAccountResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgRegisterInterchainAccountResponse message.
                     * @function verify
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgRegisterInterchainAccountResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgRegisterInterchainAccountResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse} MsgRegisterInterchainAccountResponse
                     */
                    MsgRegisterInterchainAccountResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse)
                            return object;
                        return new $root.neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse();
                    };
    
                    /**
                     * Creates a plain object from a MsgRegisterInterchainAccountResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse
                     * @static
                     * @param {neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse} message MsgRegisterInterchainAccountResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgRegisterInterchainAccountResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MsgRegisterInterchainAccountResponse to JSON.
                     * @function toJSON
                     * @memberof neutron.interchaintxs.v1.MsgRegisterInterchainAccountResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgRegisterInterchainAccountResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgRegisterInterchainAccountResponse;
                })();
    
                v1.MsgSubmitTx = (function() {
    
                    /**
                     * Properties of a MsgSubmitTx.
                     * @memberof neutron.interchaintxs.v1
                     * @interface IMsgSubmitTx
                     * @property {string|null} [from_address] MsgSubmitTx from_address
                     * @property {string|null} [interchain_account_id] MsgSubmitTx interchain_account_id
                     * @property {string|null} [connection_id] MsgSubmitTx connection_id
                     * @property {Array.<google.protobuf.IAny>|null} [msgs] MsgSubmitTx msgs
                     * @property {string|null} [memo] MsgSubmitTx memo
                     * @property {Long|null} [timeout] MsgSubmitTx timeout
                     * @property {neutron.feerefunder.IFee|null} [fee] MsgSubmitTx fee
                     */
    
                    /**
                     * Constructs a new MsgSubmitTx.
                     * @memberof neutron.interchaintxs.v1
                     * @classdesc Represents a MsgSubmitTx.
                     * @implements IMsgSubmitTx
                     * @constructor
                     * @param {neutron.interchaintxs.v1.IMsgSubmitTx=} [properties] Properties to set
                     */
                    function MsgSubmitTx(properties) {
                        this.msgs = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgSubmitTx from_address.
                     * @member {string} from_address
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @instance
                     */
                    MsgSubmitTx.prototype.from_address = "";
    
                    /**
                     * MsgSubmitTx interchain_account_id.
                     * @member {string} interchain_account_id
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @instance
                     */
                    MsgSubmitTx.prototype.interchain_account_id = "";
    
                    /**
                     * MsgSubmitTx connection_id.
                     * @member {string} connection_id
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @instance
                     */
                    MsgSubmitTx.prototype.connection_id = "";
    
                    /**
                     * MsgSubmitTx msgs.
                     * @member {Array.<google.protobuf.IAny>} msgs
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @instance
                     */
                    MsgSubmitTx.prototype.msgs = $util.emptyArray;
    
                    /**
                     * MsgSubmitTx memo.
                     * @member {string} memo
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @instance
                     */
                    MsgSubmitTx.prototype.memo = "";
    
                    /**
                     * MsgSubmitTx timeout.
                     * @member {Long} timeout
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @instance
                     */
                    MsgSubmitTx.prototype.timeout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * MsgSubmitTx fee.
                     * @member {neutron.feerefunder.IFee|null|undefined} fee
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @instance
                     */
                    MsgSubmitTx.prototype.fee = null;
    
                    /**
                     * Encodes the specified MsgSubmitTx message. Does not implicitly {@link neutron.interchaintxs.v1.MsgSubmitTx.verify|verify} messages.
                     * @function encode
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgSubmitTx} message MsgSubmitTx message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitTx.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.from_address != null && Object.hasOwnProperty.call(message, "from_address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.from_address);
                        if (message.interchain_account_id != null && Object.hasOwnProperty.call(message, "interchain_account_id"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.interchain_account_id);
                        if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.connection_id);
                        if (message.msgs != null && message.msgs.length)
                            for (var i = 0; i < message.msgs.length; ++i)
                                $root.google.protobuf.Any.encode(message.msgs[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.memo != null && Object.hasOwnProperty.call(message, "memo"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.memo);
                        if (message.timeout != null && Object.hasOwnProperty.call(message, "timeout"))
                            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.timeout);
                        if (message.fee != null && Object.hasOwnProperty.call(message, "fee"))
                            $root.neutron.feerefunder.Fee.encode(message.fee, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgSubmitTx message, length delimited. Does not implicitly {@link neutron.interchaintxs.v1.MsgSubmitTx.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgSubmitTx} message MsgSubmitTx message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitTx.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgSubmitTx message from the specified reader or buffer.
                     * @function decode
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {neutron.interchaintxs.v1.MsgSubmitTx} MsgSubmitTx
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitTx.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.v1.MsgSubmitTx();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.from_address = reader.string();
                                break;
                            case 2:
                                message.interchain_account_id = reader.string();
                                break;
                            case 3:
                                message.connection_id = reader.string();
                                break;
                            case 4:
                                if (!(message.msgs && message.msgs.length))
                                    message.msgs = [];
                                message.msgs.push($root.google.protobuf.Any.decode(reader, reader.uint32()));
                                break;
                            case 5:
                                message.memo = reader.string();
                                break;
                            case 6:
                                message.timeout = reader.uint64();
                                break;
                            case 7:
                                message.fee = $root.neutron.feerefunder.Fee.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgSubmitTx message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {neutron.interchaintxs.v1.MsgSubmitTx} MsgSubmitTx
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitTx.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgSubmitTx message.
                     * @function verify
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSubmitTx.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.from_address != null && message.hasOwnProperty("from_address"))
                            if (!$util.isString(message.from_address))
                                return "from_address: string expected";
                        if (message.interchain_account_id != null && message.hasOwnProperty("interchain_account_id"))
                            if (!$util.isString(message.interchain_account_id))
                                return "interchain_account_id: string expected";
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            if (!$util.isString(message.connection_id))
                                return "connection_id: string expected";
                        if (message.msgs != null && message.hasOwnProperty("msgs")) {
                            if (!Array.isArray(message.msgs))
                                return "msgs: array expected";
                            for (var i = 0; i < message.msgs.length; ++i) {
                                var error = $root.google.protobuf.Any.verify(message.msgs[i]);
                                if (error)
                                    return "msgs." + error;
                            }
                        }
                        if (message.memo != null && message.hasOwnProperty("memo"))
                            if (!$util.isString(message.memo))
                                return "memo: string expected";
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            if (!$util.isInteger(message.timeout) && !(message.timeout && $util.isInteger(message.timeout.low) && $util.isInteger(message.timeout.high)))
                                return "timeout: integer|Long expected";
                        if (message.fee != null && message.hasOwnProperty("fee")) {
                            var error = $root.neutron.feerefunder.Fee.verify(message.fee);
                            if (error)
                                return "fee." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MsgSubmitTx message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {neutron.interchaintxs.v1.MsgSubmitTx} MsgSubmitTx
                     */
                    MsgSubmitTx.fromObject = function fromObject(object) {
                        if (object instanceof $root.neutron.interchaintxs.v1.MsgSubmitTx)
                            return object;
                        var message = new $root.neutron.interchaintxs.v1.MsgSubmitTx();
                        if (object.from_address != null)
                            message.from_address = String(object.from_address);
                        if (object.interchain_account_id != null)
                            message.interchain_account_id = String(object.interchain_account_id);
                        if (object.connection_id != null)
                            message.connection_id = String(object.connection_id);
                        if (object.msgs) {
                            if (!Array.isArray(object.msgs))
                                throw TypeError(".neutron.interchaintxs.v1.MsgSubmitTx.msgs: array expected");
                            message.msgs = [];
                            for (var i = 0; i < object.msgs.length; ++i) {
                                if (typeof object.msgs[i] !== "object")
                                    throw TypeError(".neutron.interchaintxs.v1.MsgSubmitTx.msgs: object expected");
                                message.msgs[i] = $root.google.protobuf.Any.fromObject(object.msgs[i]);
                            }
                        }
                        if (object.memo != null)
                            message.memo = String(object.memo);
                        if (object.timeout != null)
                            if ($util.Long)
                                (message.timeout = $util.Long.fromValue(object.timeout)).unsigned = true;
                            else if (typeof object.timeout === "string")
                                message.timeout = parseInt(object.timeout, 10);
                            else if (typeof object.timeout === "number")
                                message.timeout = object.timeout;
                            else if (typeof object.timeout === "object")
                                message.timeout = new $util.LongBits(object.timeout.low >>> 0, object.timeout.high >>> 0).toNumber(true);
                        if (object.fee != null) {
                            if (typeof object.fee !== "object")
                                throw TypeError(".neutron.interchaintxs.v1.MsgSubmitTx.fee: object expected");
                            message.fee = $root.neutron.feerefunder.Fee.fromObject(object.fee);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgSubmitTx message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @static
                     * @param {neutron.interchaintxs.v1.MsgSubmitTx} message MsgSubmitTx
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSubmitTx.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.msgs = [];
                        if (options.defaults) {
                            object.from_address = "";
                            object.interchain_account_id = "";
                            object.connection_id = "";
                            object.memo = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.timeout = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timeout = options.longs === String ? "0" : 0;
                            object.fee = null;
                        }
                        if (message.from_address != null && message.hasOwnProperty("from_address"))
                            object.from_address = message.from_address;
                        if (message.interchain_account_id != null && message.hasOwnProperty("interchain_account_id"))
                            object.interchain_account_id = message.interchain_account_id;
                        if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                            object.connection_id = message.connection_id;
                        if (message.msgs && message.msgs.length) {
                            object.msgs = [];
                            for (var j = 0; j < message.msgs.length; ++j)
                                object.msgs[j] = $root.google.protobuf.Any.toObject(message.msgs[j], options);
                        }
                        if (message.memo != null && message.hasOwnProperty("memo"))
                            object.memo = message.memo;
                        if (message.timeout != null && message.hasOwnProperty("timeout"))
                            if (typeof message.timeout === "number")
                                object.timeout = options.longs === String ? String(message.timeout) : message.timeout;
                            else
                                object.timeout = options.longs === String ? $util.Long.prototype.toString.call(message.timeout) : options.longs === Number ? new $util.LongBits(message.timeout.low >>> 0, message.timeout.high >>> 0).toNumber(true) : message.timeout;
                        if (message.fee != null && message.hasOwnProperty("fee"))
                            object.fee = $root.neutron.feerefunder.Fee.toObject(message.fee, options);
                        return object;
                    };
    
                    /**
                     * Converts this MsgSubmitTx to JSON.
                     * @function toJSON
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTx
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSubmitTx.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgSubmitTx;
                })();
    
                v1.MsgSubmitTxResponse = (function() {
    
                    /**
                     * Properties of a MsgSubmitTxResponse.
                     * @memberof neutron.interchaintxs.v1
                     * @interface IMsgSubmitTxResponse
                     * @property {Long|null} [sequence_id] MsgSubmitTxResponse sequence_id
                     * @property {string|null} [channel] MsgSubmitTxResponse channel
                     */
    
                    /**
                     * Constructs a new MsgSubmitTxResponse.
                     * @memberof neutron.interchaintxs.v1
                     * @classdesc Represents a MsgSubmitTxResponse.
                     * @implements IMsgSubmitTxResponse
                     * @constructor
                     * @param {neutron.interchaintxs.v1.IMsgSubmitTxResponse=} [properties] Properties to set
                     */
                    function MsgSubmitTxResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgSubmitTxResponse sequence_id.
                     * @member {Long} sequence_id
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @instance
                     */
                    MsgSubmitTxResponse.prototype.sequence_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * MsgSubmitTxResponse channel.
                     * @member {string} channel
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @instance
                     */
                    MsgSubmitTxResponse.prototype.channel = "";
    
                    /**
                     * Encodes the specified MsgSubmitTxResponse message. Does not implicitly {@link neutron.interchaintxs.v1.MsgSubmitTxResponse.verify|verify} messages.
                     * @function encode
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgSubmitTxResponse} message MsgSubmitTxResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitTxResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sequence_id != null && Object.hasOwnProperty.call(message, "sequence_id"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence_id);
                        if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgSubmitTxResponse message, length delimited. Does not implicitly {@link neutron.interchaintxs.v1.MsgSubmitTxResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgSubmitTxResponse} message MsgSubmitTxResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSubmitTxResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgSubmitTxResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {neutron.interchaintxs.v1.MsgSubmitTxResponse} MsgSubmitTxResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitTxResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.v1.MsgSubmitTxResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sequence_id = reader.uint64();
                                break;
                            case 2:
                                message.channel = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgSubmitTxResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {neutron.interchaintxs.v1.MsgSubmitTxResponse} MsgSubmitTxResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSubmitTxResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgSubmitTxResponse message.
                     * @function verify
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSubmitTxResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sequence_id != null && message.hasOwnProperty("sequence_id"))
                            if (!$util.isInteger(message.sequence_id) && !(message.sequence_id && $util.isInteger(message.sequence_id.low) && $util.isInteger(message.sequence_id.high)))
                                return "sequence_id: integer|Long expected";
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            if (!$util.isString(message.channel))
                                return "channel: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgSubmitTxResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {neutron.interchaintxs.v1.MsgSubmitTxResponse} MsgSubmitTxResponse
                     */
                    MsgSubmitTxResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.neutron.interchaintxs.v1.MsgSubmitTxResponse)
                            return object;
                        var message = new $root.neutron.interchaintxs.v1.MsgSubmitTxResponse();
                        if (object.sequence_id != null)
                            if ($util.Long)
                                (message.sequence_id = $util.Long.fromValue(object.sequence_id)).unsigned = true;
                            else if (typeof object.sequence_id === "string")
                                message.sequence_id = parseInt(object.sequence_id, 10);
                            else if (typeof object.sequence_id === "number")
                                message.sequence_id = object.sequence_id;
                            else if (typeof object.sequence_id === "object")
                                message.sequence_id = new $util.LongBits(object.sequence_id.low >>> 0, object.sequence_id.high >>> 0).toNumber(true);
                        if (object.channel != null)
                            message.channel = String(object.channel);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgSubmitTxResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @static
                     * @param {neutron.interchaintxs.v1.MsgSubmitTxResponse} message MsgSubmitTxResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSubmitTxResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.sequence_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.sequence_id = options.longs === String ? "0" : 0;
                            object.channel = "";
                        }
                        if (message.sequence_id != null && message.hasOwnProperty("sequence_id"))
                            if (typeof message.sequence_id === "number")
                                object.sequence_id = options.longs === String ? String(message.sequence_id) : message.sequence_id;
                            else
                                object.sequence_id = options.longs === String ? $util.Long.prototype.toString.call(message.sequence_id) : options.longs === Number ? new $util.LongBits(message.sequence_id.low >>> 0, message.sequence_id.high >>> 0).toNumber(true) : message.sequence_id;
                        if (message.channel != null && message.hasOwnProperty("channel"))
                            object.channel = message.channel;
                        return object;
                    };
    
                    /**
                     * Converts this MsgSubmitTxResponse to JSON.
                     * @function toJSON
                     * @memberof neutron.interchaintxs.v1.MsgSubmitTxResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSubmitTxResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgSubmitTxResponse;
                })();
    
                v1.MsgUpdateParams = (function() {
    
                    /**
                     * Properties of a MsgUpdateParams.
                     * @memberof neutron.interchaintxs.v1
                     * @interface IMsgUpdateParams
                     * @property {string|null} [authority] MsgUpdateParams authority
                     * @property {neutron.interchaintxs.IParams|null} [params] MsgUpdateParams params
                     */
    
                    /**
                     * Constructs a new MsgUpdateParams.
                     * @memberof neutron.interchaintxs.v1
                     * @classdesc Represents a MsgUpdateParams.
                     * @implements IMsgUpdateParams
                     * @constructor
                     * @param {neutron.interchaintxs.v1.IMsgUpdateParams=} [properties] Properties to set
                     */
                    function MsgUpdateParams(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgUpdateParams authority.
                     * @member {string} authority
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @instance
                     */
                    MsgUpdateParams.prototype.authority = "";
    
                    /**
                     * MsgUpdateParams params.
                     * @member {neutron.interchaintxs.IParams|null|undefined} params
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @instance
                     */
                    MsgUpdateParams.prototype.params = null;
    
                    /**
                     * Encodes the specified MsgUpdateParams message. Does not implicitly {@link neutron.interchaintxs.v1.MsgUpdateParams.verify|verify} messages.
                     * @function encode
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateParams.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.authority);
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.neutron.interchaintxs.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgUpdateParams message, length delimited. Does not implicitly {@link neutron.interchaintxs.v1.MsgUpdateParams.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateParams.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgUpdateParams message from the specified reader or buffer.
                     * @function decode
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {neutron.interchaintxs.v1.MsgUpdateParams} MsgUpdateParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateParams.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.v1.MsgUpdateParams();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.authority = reader.string();
                                break;
                            case 2:
                                message.params = $root.neutron.interchaintxs.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgUpdateParams message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {neutron.interchaintxs.v1.MsgUpdateParams} MsgUpdateParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateParams.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgUpdateParams message.
                     * @function verify
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpdateParams.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.authority != null && message.hasOwnProperty("authority"))
                            if (!$util.isString(message.authority))
                                return "authority: string expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            var error = $root.neutron.interchaintxs.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MsgUpdateParams message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {neutron.interchaintxs.v1.MsgUpdateParams} MsgUpdateParams
                     */
                    MsgUpdateParams.fromObject = function fromObject(object) {
                        if (object instanceof $root.neutron.interchaintxs.v1.MsgUpdateParams)
                            return object;
                        var message = new $root.neutron.interchaintxs.v1.MsgUpdateParams();
                        if (object.authority != null)
                            message.authority = String(object.authority);
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".neutron.interchaintxs.v1.MsgUpdateParams.params: object expected");
                            message.params = $root.neutron.interchaintxs.Params.fromObject(object.params);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgUpdateParams message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @static
                     * @param {neutron.interchaintxs.v1.MsgUpdateParams} message MsgUpdateParams
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpdateParams.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.authority = "";
                            object.params = null;
                        }
                        if (message.authority != null && message.hasOwnProperty("authority"))
                            object.authority = message.authority;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.neutron.interchaintxs.Params.toObject(message.params, options);
                        return object;
                    };
    
                    /**
                     * Converts this MsgUpdateParams to JSON.
                     * @function toJSON
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParams
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpdateParams.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgUpdateParams;
                })();
    
                v1.MsgUpdateParamsResponse = (function() {
    
                    /**
                     * Properties of a MsgUpdateParamsResponse.
                     * @memberof neutron.interchaintxs.v1
                     * @interface IMsgUpdateParamsResponse
                     */
    
                    /**
                     * Constructs a new MsgUpdateParamsResponse.
                     * @memberof neutron.interchaintxs.v1
                     * @classdesc Represents a MsgUpdateParamsResponse.
                     * @implements IMsgUpdateParamsResponse
                     * @constructor
                     * @param {neutron.interchaintxs.v1.IMsgUpdateParamsResponse=} [properties] Properties to set
                     */
                    function MsgUpdateParamsResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified MsgUpdateParamsResponse message. Does not implicitly {@link neutron.interchaintxs.v1.MsgUpdateParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParamsResponse
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateParamsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgUpdateParamsResponse message, length delimited. Does not implicitly {@link neutron.interchaintxs.v1.MsgUpdateParamsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParamsResponse
                     * @static
                     * @param {neutron.interchaintxs.v1.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {neutron.interchaintxs.v1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateParamsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.v1.MsgUpdateParamsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {neutron.interchaintxs.v1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgUpdateParamsResponse message.
                     * @function verify
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParamsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpdateParamsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgUpdateParamsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParamsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {neutron.interchaintxs.v1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                     */
                    MsgUpdateParamsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.neutron.interchaintxs.v1.MsgUpdateParamsResponse)
                            return object;
                        return new $root.neutron.interchaintxs.v1.MsgUpdateParamsResponse();
                    };
    
                    /**
                     * Creates a plain object from a MsgUpdateParamsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParamsResponse
                     * @static
                     * @param {neutron.interchaintxs.v1.MsgUpdateParamsResponse} message MsgUpdateParamsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpdateParamsResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MsgUpdateParamsResponse to JSON.
                     * @function toJSON
                     * @memberof neutron.interchaintxs.v1.MsgUpdateParamsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpdateParamsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgUpdateParamsResponse;
                })();
    
                return v1;
            })();
    
            interchaintxs.Params = (function() {
    
                /**
                 * Properties of a Params.
                 * @memberof neutron.interchaintxs
                 * @interface IParams
                 * @property {Long|null} [msg_submit_tx_max_messages] Params msg_submit_tx_max_messages
                 */
    
                /**
                 * Constructs a new Params.
                 * @memberof neutron.interchaintxs
                 * @classdesc Represents a Params.
                 * @implements IParams
                 * @constructor
                 * @param {neutron.interchaintxs.IParams=} [properties] Properties to set
                 */
                function Params(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Params msg_submit_tx_max_messages.
                 * @member {Long} msg_submit_tx_max_messages
                 * @memberof neutron.interchaintxs.Params
                 * @instance
                 */
                Params.prototype.msg_submit_tx_max_messages = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified Params message. Does not implicitly {@link neutron.interchaintxs.Params.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchaintxs.Params
                 * @static
                 * @param {neutron.interchaintxs.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.msg_submit_tx_max_messages != null && Object.hasOwnProperty.call(message, "msg_submit_tx_max_messages"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.msg_submit_tx_max_messages);
                    return writer;
                };
    
                /**
                 * Encodes the specified Params message, length delimited. Does not implicitly {@link neutron.interchaintxs.Params.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchaintxs.Params
                 * @static
                 * @param {neutron.interchaintxs.IParams} message Params message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Params.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchaintxs.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchaintxs.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.Params();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.msg_submit_tx_max_messages = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Params message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchaintxs.Params
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchaintxs.Params} Params
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Params.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Params message.
                 * @function verify
                 * @memberof neutron.interchaintxs.Params
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Params.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.msg_submit_tx_max_messages != null && message.hasOwnProperty("msg_submit_tx_max_messages"))
                        if (!$util.isInteger(message.msg_submit_tx_max_messages) && !(message.msg_submit_tx_max_messages && $util.isInteger(message.msg_submit_tx_max_messages.low) && $util.isInteger(message.msg_submit_tx_max_messages.high)))
                            return "msg_submit_tx_max_messages: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a Params message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchaintxs.Params
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchaintxs.Params} Params
                 */
                Params.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchaintxs.Params)
                        return object;
                    var message = new $root.neutron.interchaintxs.Params();
                    if (object.msg_submit_tx_max_messages != null)
                        if ($util.Long)
                            (message.msg_submit_tx_max_messages = $util.Long.fromValue(object.msg_submit_tx_max_messages)).unsigned = true;
                        else if (typeof object.msg_submit_tx_max_messages === "string")
                            message.msg_submit_tx_max_messages = parseInt(object.msg_submit_tx_max_messages, 10);
                        else if (typeof object.msg_submit_tx_max_messages === "number")
                            message.msg_submit_tx_max_messages = object.msg_submit_tx_max_messages;
                        else if (typeof object.msg_submit_tx_max_messages === "object")
                            message.msg_submit_tx_max_messages = new $util.LongBits(object.msg_submit_tx_max_messages.low >>> 0, object.msg_submit_tx_max_messages.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Params message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchaintxs.Params
                 * @static
                 * @param {neutron.interchaintxs.Params} message Params
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Params.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.msg_submit_tx_max_messages = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.msg_submit_tx_max_messages = options.longs === String ? "0" : 0;
                    if (message.msg_submit_tx_max_messages != null && message.hasOwnProperty("msg_submit_tx_max_messages"))
                        if (typeof message.msg_submit_tx_max_messages === "number")
                            object.msg_submit_tx_max_messages = options.longs === String ? String(message.msg_submit_tx_max_messages) : message.msg_submit_tx_max_messages;
                        else
                            object.msg_submit_tx_max_messages = options.longs === String ? $util.Long.prototype.toString.call(message.msg_submit_tx_max_messages) : options.longs === Number ? new $util.LongBits(message.msg_submit_tx_max_messages.low >>> 0, message.msg_submit_tx_max_messages.high >>> 0).toNumber(true) : message.msg_submit_tx_max_messages;
                    return object;
                };
    
                /**
                 * Converts this Params to JSON.
                 * @function toJSON
                 * @memberof neutron.interchaintxs.Params
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Params.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Params;
            })();
    
            interchaintxs.Query = (function() {
    
                /**
                 * Constructs a new Query service.
                 * @memberof neutron.interchaintxs
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                /**
                 * Callback as used by {@link neutron.interchaintxs.Query#params}.
                 * @memberof neutron.interchaintxs.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchaintxs.QueryParamsResponse} [response] QueryParamsResponse
                 */
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.interchaintxs.Query
                 * @instance
                 * @param {neutron.interchaintxs.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {neutron.interchaintxs.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.neutron.interchaintxs.QueryParamsRequest, $root.neutron.interchaintxs.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.interchaintxs.Query
                 * @instance
                 * @param {neutron.interchaintxs.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<neutron.interchaintxs.QueryParamsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.interchaintxs.Query#interchainAccountAddress}.
                 * @memberof neutron.interchaintxs.Query
                 * @typedef InterchainAccountAddressCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.interchaintxs.QueryInterchainAccountAddressResponse} [response] QueryInterchainAccountAddressResponse
                 */
    
                /**
                 * Calls InterchainAccountAddress.
                 * @function interchainAccountAddress
                 * @memberof neutron.interchaintxs.Query
                 * @instance
                 * @param {neutron.interchaintxs.IQueryInterchainAccountAddressRequest} request QueryInterchainAccountAddressRequest message or plain object
                 * @param {neutron.interchaintxs.Query.InterchainAccountAddressCallback} callback Node-style callback called with the error, if any, and QueryInterchainAccountAddressResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.interchainAccountAddress = function interchainAccountAddress(request, callback) {
                    return this.rpcCall(interchainAccountAddress, $root.neutron.interchaintxs.QueryInterchainAccountAddressRequest, $root.neutron.interchaintxs.QueryInterchainAccountAddressResponse, request, callback);
                }, "name", { value: "InterchainAccountAddress" });
    
                /**
                 * Calls InterchainAccountAddress.
                 * @function interchainAccountAddress
                 * @memberof neutron.interchaintxs.Query
                 * @instance
                 * @param {neutron.interchaintxs.IQueryInterchainAccountAddressRequest} request QueryInterchainAccountAddressRequest message or plain object
                 * @returns {Promise<neutron.interchaintxs.QueryInterchainAccountAddressResponse>} Promise
                 * @variation 2
                 */
    
                return Query;
            })();
    
            interchaintxs.QueryParamsRequest = (function() {
    
                /**
                 * Properties of a QueryParamsRequest.
                 * @memberof neutron.interchaintxs
                 * @interface IQueryParamsRequest
                 */
    
                /**
                 * Constructs a new QueryParamsRequest.
                 * @memberof neutron.interchaintxs
                 * @classdesc Represents a QueryParamsRequest.
                 * @implements IQueryParamsRequest
                 * @constructor
                 * @param {neutron.interchaintxs.IQueryParamsRequest=} [properties] Properties to set
                 */
                function QueryParamsRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified QueryParamsRequest message. Does not implicitly {@link neutron.interchaintxs.QueryParamsRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchaintxs.QueryParamsRequest
                 * @static
                 * @param {neutron.interchaintxs.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link neutron.interchaintxs.QueryParamsRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchaintxs.QueryParamsRequest
                 * @static
                 * @param {neutron.interchaintxs.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchaintxs.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchaintxs.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.QueryParamsRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchaintxs.QueryParamsRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchaintxs.QueryParamsRequest} QueryParamsRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsRequest message.
                 * @function verify
                 * @memberof neutron.interchaintxs.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchaintxs.QueryParamsRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchaintxs.QueryParamsRequest} QueryParamsRequest
                 */
                QueryParamsRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchaintxs.QueryParamsRequest)
                        return object;
                    return new $root.neutron.interchaintxs.QueryParamsRequest();
                };
    
                /**
                 * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchaintxs.QueryParamsRequest
                 * @static
                 * @param {neutron.interchaintxs.QueryParamsRequest} message QueryParamsRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsRequest.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this QueryParamsRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.interchaintxs.QueryParamsRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsRequest;
            })();
    
            interchaintxs.QueryParamsResponse = (function() {
    
                /**
                 * Properties of a QueryParamsResponse.
                 * @memberof neutron.interchaintxs
                 * @interface IQueryParamsResponse
                 * @property {neutron.interchaintxs.IParams|null} [params] QueryParamsResponse params
                 */
    
                /**
                 * Constructs a new QueryParamsResponse.
                 * @memberof neutron.interchaintxs
                 * @classdesc Represents a QueryParamsResponse.
                 * @implements IQueryParamsResponse
                 * @constructor
                 * @param {neutron.interchaintxs.IQueryParamsResponse=} [properties] Properties to set
                 */
                function QueryParamsResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryParamsResponse params.
                 * @member {neutron.interchaintxs.IParams|null|undefined} params
                 * @memberof neutron.interchaintxs.QueryParamsResponse
                 * @instance
                 */
                QueryParamsResponse.prototype.params = null;
    
                /**
                 * Encodes the specified QueryParamsResponse message. Does not implicitly {@link neutron.interchaintxs.QueryParamsResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchaintxs.QueryParamsResponse
                 * @static
                 * @param {neutron.interchaintxs.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.interchaintxs.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link neutron.interchaintxs.QueryParamsResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchaintxs.QueryParamsResponse
                 * @static
                 * @param {neutron.interchaintxs.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchaintxs.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchaintxs.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.QueryParamsResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.interchaintxs.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchaintxs.QueryParamsResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchaintxs.QueryParamsResponse} QueryParamsResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryParamsResponse message.
                 * @function verify
                 * @memberof neutron.interchaintxs.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryParamsResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.interchaintxs.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchaintxs.QueryParamsResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchaintxs.QueryParamsResponse} QueryParamsResponse
                 */
                QueryParamsResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchaintxs.QueryParamsResponse)
                        return object;
                    var message = new $root.neutron.interchaintxs.QueryParamsResponse();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.interchaintxs.QueryParamsResponse.params: object expected");
                        message.params = $root.neutron.interchaintxs.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchaintxs.QueryParamsResponse
                 * @static
                 * @param {neutron.interchaintxs.QueryParamsResponse} message QueryParamsResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryParamsResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.interchaintxs.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this QueryParamsResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchaintxs.QueryParamsResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryParamsResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryParamsResponse;
            })();
    
            interchaintxs.QueryInterchainAccountAddressRequest = (function() {
    
                /**
                 * Properties of a QueryInterchainAccountAddressRequest.
                 * @memberof neutron.interchaintxs
                 * @interface IQueryInterchainAccountAddressRequest
                 * @property {string|null} [owner_address] QueryInterchainAccountAddressRequest owner_address
                 * @property {string|null} [interchain_account_id] QueryInterchainAccountAddressRequest interchain_account_id
                 * @property {string|null} [connection_id] QueryInterchainAccountAddressRequest connection_id
                 */
    
                /**
                 * Constructs a new QueryInterchainAccountAddressRequest.
                 * @memberof neutron.interchaintxs
                 * @classdesc Represents a QueryInterchainAccountAddressRequest.
                 * @implements IQueryInterchainAccountAddressRequest
                 * @constructor
                 * @param {neutron.interchaintxs.IQueryInterchainAccountAddressRequest=} [properties] Properties to set
                 */
                function QueryInterchainAccountAddressRequest(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryInterchainAccountAddressRequest owner_address.
                 * @member {string} owner_address
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @instance
                 */
                QueryInterchainAccountAddressRequest.prototype.owner_address = "";
    
                /**
                 * QueryInterchainAccountAddressRequest interchain_account_id.
                 * @member {string} interchain_account_id
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @instance
                 */
                QueryInterchainAccountAddressRequest.prototype.interchain_account_id = "";
    
                /**
                 * QueryInterchainAccountAddressRequest connection_id.
                 * @member {string} connection_id
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @instance
                 */
                QueryInterchainAccountAddressRequest.prototype.connection_id = "";
    
                /**
                 * Encodes the specified QueryInterchainAccountAddressRequest message. Does not implicitly {@link neutron.interchaintxs.QueryInterchainAccountAddressRequest.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @static
                 * @param {neutron.interchaintxs.IQueryInterchainAccountAddressRequest} message QueryInterchainAccountAddressRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryInterchainAccountAddressRequest.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.owner_address != null && Object.hasOwnProperty.call(message, "owner_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.owner_address);
                    if (message.interchain_account_id != null && Object.hasOwnProperty.call(message, "interchain_account_id"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.interchain_account_id);
                    if (message.connection_id != null && Object.hasOwnProperty.call(message, "connection_id"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.connection_id);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryInterchainAccountAddressRequest message, length delimited. Does not implicitly {@link neutron.interchaintxs.QueryInterchainAccountAddressRequest.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @static
                 * @param {neutron.interchaintxs.IQueryInterchainAccountAddressRequest} message QueryInterchainAccountAddressRequest message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryInterchainAccountAddressRequest.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryInterchainAccountAddressRequest message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchaintxs.QueryInterchainAccountAddressRequest} QueryInterchainAccountAddressRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryInterchainAccountAddressRequest.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.QueryInterchainAccountAddressRequest();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.owner_address = reader.string();
                            break;
                        case 2:
                            message.interchain_account_id = reader.string();
                            break;
                        case 3:
                            message.connection_id = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryInterchainAccountAddressRequest message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchaintxs.QueryInterchainAccountAddressRequest} QueryInterchainAccountAddressRequest
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryInterchainAccountAddressRequest.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryInterchainAccountAddressRequest message.
                 * @function verify
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryInterchainAccountAddressRequest.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.owner_address != null && message.hasOwnProperty("owner_address"))
                        if (!$util.isString(message.owner_address))
                            return "owner_address: string expected";
                    if (message.interchain_account_id != null && message.hasOwnProperty("interchain_account_id"))
                        if (!$util.isString(message.interchain_account_id))
                            return "interchain_account_id: string expected";
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        if (!$util.isString(message.connection_id))
                            return "connection_id: string expected";
                    return null;
                };
    
                /**
                 * Creates a QueryInterchainAccountAddressRequest message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchaintxs.QueryInterchainAccountAddressRequest} QueryInterchainAccountAddressRequest
                 */
                QueryInterchainAccountAddressRequest.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchaintxs.QueryInterchainAccountAddressRequest)
                        return object;
                    var message = new $root.neutron.interchaintxs.QueryInterchainAccountAddressRequest();
                    if (object.owner_address != null)
                        message.owner_address = String(object.owner_address);
                    if (object.interchain_account_id != null)
                        message.interchain_account_id = String(object.interchain_account_id);
                    if (object.connection_id != null)
                        message.connection_id = String(object.connection_id);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryInterchainAccountAddressRequest message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @static
                 * @param {neutron.interchaintxs.QueryInterchainAccountAddressRequest} message QueryInterchainAccountAddressRequest
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryInterchainAccountAddressRequest.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.owner_address = "";
                        object.interchain_account_id = "";
                        object.connection_id = "";
                    }
                    if (message.owner_address != null && message.hasOwnProperty("owner_address"))
                        object.owner_address = message.owner_address;
                    if (message.interchain_account_id != null && message.hasOwnProperty("interchain_account_id"))
                        object.interchain_account_id = message.interchain_account_id;
                    if (message.connection_id != null && message.hasOwnProperty("connection_id"))
                        object.connection_id = message.connection_id;
                    return object;
                };
    
                /**
                 * Converts this QueryInterchainAccountAddressRequest to JSON.
                 * @function toJSON
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressRequest
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryInterchainAccountAddressRequest.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryInterchainAccountAddressRequest;
            })();
    
            interchaintxs.QueryInterchainAccountAddressResponse = (function() {
    
                /**
                 * Properties of a QueryInterchainAccountAddressResponse.
                 * @memberof neutron.interchaintxs
                 * @interface IQueryInterchainAccountAddressResponse
                 * @property {string|null} [interchain_account_address] QueryInterchainAccountAddressResponse interchain_account_address
                 */
    
                /**
                 * Constructs a new QueryInterchainAccountAddressResponse.
                 * @memberof neutron.interchaintxs
                 * @classdesc Represents a QueryInterchainAccountAddressResponse.
                 * @implements IQueryInterchainAccountAddressResponse
                 * @constructor
                 * @param {neutron.interchaintxs.IQueryInterchainAccountAddressResponse=} [properties] Properties to set
                 */
                function QueryInterchainAccountAddressResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * QueryInterchainAccountAddressResponse interchain_account_address.
                 * @member {string} interchain_account_address
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressResponse
                 * @instance
                 */
                QueryInterchainAccountAddressResponse.prototype.interchain_account_address = "";
    
                /**
                 * Encodes the specified QueryInterchainAccountAddressResponse message. Does not implicitly {@link neutron.interchaintxs.QueryInterchainAccountAddressResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressResponse
                 * @static
                 * @param {neutron.interchaintxs.IQueryInterchainAccountAddressResponse} message QueryInterchainAccountAddressResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryInterchainAccountAddressResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.interchain_account_address != null && Object.hasOwnProperty.call(message, "interchain_account_address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.interchain_account_address);
                    return writer;
                };
    
                /**
                 * Encodes the specified QueryInterchainAccountAddressResponse message, length delimited. Does not implicitly {@link neutron.interchaintxs.QueryInterchainAccountAddressResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressResponse
                 * @static
                 * @param {neutron.interchaintxs.IQueryInterchainAccountAddressResponse} message QueryInterchainAccountAddressResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                QueryInterchainAccountAddressResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a QueryInterchainAccountAddressResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchaintxs.QueryInterchainAccountAddressResponse} QueryInterchainAccountAddressResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryInterchainAccountAddressResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.QueryInterchainAccountAddressResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.interchain_account_address = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a QueryInterchainAccountAddressResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchaintxs.QueryInterchainAccountAddressResponse} QueryInterchainAccountAddressResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                QueryInterchainAccountAddressResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a QueryInterchainAccountAddressResponse message.
                 * @function verify
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                QueryInterchainAccountAddressResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.interchain_account_address != null && message.hasOwnProperty("interchain_account_address"))
                        if (!$util.isString(message.interchain_account_address))
                            return "interchain_account_address: string expected";
                    return null;
                };
    
                /**
                 * Creates a QueryInterchainAccountAddressResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchaintxs.QueryInterchainAccountAddressResponse} QueryInterchainAccountAddressResponse
                 */
                QueryInterchainAccountAddressResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchaintxs.QueryInterchainAccountAddressResponse)
                        return object;
                    var message = new $root.neutron.interchaintxs.QueryInterchainAccountAddressResponse();
                    if (object.interchain_account_address != null)
                        message.interchain_account_address = String(object.interchain_account_address);
                    return message;
                };
    
                /**
                 * Creates a plain object from a QueryInterchainAccountAddressResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressResponse
                 * @static
                 * @param {neutron.interchaintxs.QueryInterchainAccountAddressResponse} message QueryInterchainAccountAddressResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                QueryInterchainAccountAddressResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.interchain_account_address = "";
                    if (message.interchain_account_address != null && message.hasOwnProperty("interchain_account_address"))
                        object.interchain_account_address = message.interchain_account_address;
                    return object;
                };
    
                /**
                 * Converts this QueryInterchainAccountAddressResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.interchaintxs.QueryInterchainAccountAddressResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                QueryInterchainAccountAddressResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return QueryInterchainAccountAddressResponse;
            })();
    
            interchaintxs.GenesisState = (function() {
    
                /**
                 * Properties of a GenesisState.
                 * @memberof neutron.interchaintxs
                 * @interface IGenesisState
                 * @property {neutron.interchaintxs.IParams|null} [params] GenesisState params
                 */
    
                /**
                 * Constructs a new GenesisState.
                 * @memberof neutron.interchaintxs
                 * @classdesc Represents a GenesisState.
                 * @implements IGenesisState
                 * @constructor
                 * @param {neutron.interchaintxs.IGenesisState=} [properties] Properties to set
                 */
                function GenesisState(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GenesisState params.
                 * @member {neutron.interchaintxs.IParams|null|undefined} params
                 * @memberof neutron.interchaintxs.GenesisState
                 * @instance
                 */
                GenesisState.prototype.params = null;
    
                /**
                 * Encodes the specified GenesisState message. Does not implicitly {@link neutron.interchaintxs.GenesisState.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.interchaintxs.GenesisState
                 * @static
                 * @param {neutron.interchaintxs.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                        $root.neutron.interchaintxs.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link neutron.interchaintxs.GenesisState.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.interchaintxs.GenesisState
                 * @static
                 * @param {neutron.interchaintxs.IGenesisState} message GenesisState message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.interchaintxs.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.interchaintxs.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.interchaintxs.GenesisState();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.params = $root.neutron.interchaintxs.Params.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.interchaintxs.GenesisState
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.interchaintxs.GenesisState} GenesisState
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GenesisState.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GenesisState message.
                 * @function verify
                 * @memberof neutron.interchaintxs.GenesisState
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GenesisState.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.params != null && message.hasOwnProperty("params")) {
                        var error = $root.neutron.interchaintxs.Params.verify(message.params);
                        if (error)
                            return "params." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.interchaintxs.GenesisState
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.interchaintxs.GenesisState} GenesisState
                 */
                GenesisState.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.interchaintxs.GenesisState)
                        return object;
                    var message = new $root.neutron.interchaintxs.GenesisState();
                    if (object.params != null) {
                        if (typeof object.params !== "object")
                            throw TypeError(".neutron.interchaintxs.GenesisState.params: object expected");
                        message.params = $root.neutron.interchaintxs.Params.fromObject(object.params);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.interchaintxs.GenesisState
                 * @static
                 * @param {neutron.interchaintxs.GenesisState} message GenesisState
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GenesisState.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.params = null;
                    if (message.params != null && message.hasOwnProperty("params"))
                        object.params = $root.neutron.interchaintxs.Params.toObject(message.params, options);
                    return object;
                };
    
                /**
                 * Converts this GenesisState to JSON.
                 * @function toJSON
                 * @memberof neutron.interchaintxs.GenesisState
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GenesisState.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return GenesisState;
            })();
    
            return interchaintxs;
        })();
    
        neutron.transfer = (function() {
    
            /**
             * Namespace transfer.
             * @memberof neutron
             * @namespace
             */
            var transfer = {};
    
            transfer.Msg = (function() {
    
                /**
                 * Constructs a new Msg service.
                 * @memberof neutron.transfer
                 * @classdesc Represents a Msg
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Msg(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;
    
                /**
                 * Callback as used by {@link neutron.transfer.Msg#transfer}.
                 * @memberof neutron.transfer.Msg
                 * @typedef TransferCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {neutron.transfer.MsgTransferResponse} [response] MsgTransferResponse
                 */
    
                /**
                 * Calls Transfer.
                 * @function transfer
                 * @memberof neutron.transfer.Msg
                 * @instance
                 * @param {neutron.transfer.IMsgTransfer} request MsgTransfer message or plain object
                 * @param {neutron.transfer.Msg.TransferCallback} callback Node-style callback called with the error, if any, and MsgTransferResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Msg.prototype.transfer = function transfer(request, callback) {
                    return this.rpcCall(transfer, $root.neutron.transfer.MsgTransfer, $root.neutron.transfer.MsgTransferResponse, request, callback);
                }, "name", { value: "Transfer" });
    
                /**
                 * Calls Transfer.
                 * @function transfer
                 * @memberof neutron.transfer.Msg
                 * @instance
                 * @param {neutron.transfer.IMsgTransfer} request MsgTransfer message or plain object
                 * @returns {Promise<neutron.transfer.MsgTransferResponse>} Promise
                 * @variation 2
                 */
    
                return Msg;
            })();
    
            transfer.MsgTransfer = (function() {
    
                /**
                 * Properties of a MsgTransfer.
                 * @memberof neutron.transfer
                 * @interface IMsgTransfer
                 * @property {string|null} [source_port] MsgTransfer source_port
                 * @property {string|null} [source_channel] MsgTransfer source_channel
                 * @property {cosmos.base.v1beta1.ICoin|null} [token] MsgTransfer token
                 * @property {string|null} [sender] MsgTransfer sender
                 * @property {string|null} [receiver] MsgTransfer receiver
                 * @property {ibc.core.client.v1.IHeight|null} [timeout_height] MsgTransfer timeout_height
                 * @property {Long|null} [timeout_timestamp] MsgTransfer timeout_timestamp
                 * @property {string|null} [memo] MsgTransfer memo
                 * @property {neutron.feerefunder.IFee|null} [fee] MsgTransfer fee
                 */
    
                /**
                 * Constructs a new MsgTransfer.
                 * @memberof neutron.transfer
                 * @classdesc Represents a MsgTransfer.
                 * @implements IMsgTransfer
                 * @constructor
                 * @param {neutron.transfer.IMsgTransfer=} [properties] Properties to set
                 */
                function MsgTransfer(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgTransfer source_port.
                 * @member {string} source_port
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 */
                MsgTransfer.prototype.source_port = "";
    
                /**
                 * MsgTransfer source_channel.
                 * @member {string} source_channel
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 */
                MsgTransfer.prototype.source_channel = "";
    
                /**
                 * MsgTransfer token.
                 * @member {cosmos.base.v1beta1.ICoin|null|undefined} token
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 */
                MsgTransfer.prototype.token = null;
    
                /**
                 * MsgTransfer sender.
                 * @member {string} sender
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 */
                MsgTransfer.prototype.sender = "";
    
                /**
                 * MsgTransfer receiver.
                 * @member {string} receiver
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 */
                MsgTransfer.prototype.receiver = "";
    
                /**
                 * MsgTransfer timeout_height.
                 * @member {ibc.core.client.v1.IHeight|null|undefined} timeout_height
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 */
                MsgTransfer.prototype.timeout_height = null;
    
                /**
                 * MsgTransfer timeout_timestamp.
                 * @member {Long} timeout_timestamp
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 */
                MsgTransfer.prototype.timeout_timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgTransfer memo.
                 * @member {string} memo
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 */
                MsgTransfer.prototype.memo = "";
    
                /**
                 * MsgTransfer fee.
                 * @member {neutron.feerefunder.IFee|null|undefined} fee
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 */
                MsgTransfer.prototype.fee = null;
    
                /**
                 * Encodes the specified MsgTransfer message. Does not implicitly {@link neutron.transfer.MsgTransfer.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.transfer.MsgTransfer
                 * @static
                 * @param {neutron.transfer.IMsgTransfer} message MsgTransfer message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgTransfer.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.source_port != null && Object.hasOwnProperty.call(message, "source_port"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.source_port);
                    if (message.source_channel != null && Object.hasOwnProperty.call(message, "source_channel"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_channel);
                    if (message.token != null && Object.hasOwnProperty.call(message, "token"))
                        $root.cosmos.base.v1beta1.Coin.encode(message.token, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.sender);
                    if (message.receiver != null && Object.hasOwnProperty.call(message, "receiver"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message.receiver);
                    if (message.timeout_height != null && Object.hasOwnProperty.call(message, "timeout_height"))
                        $root.ibc.core.client.v1.Height.encode(message.timeout_height, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.timeout_timestamp != null && Object.hasOwnProperty.call(message, "timeout_timestamp"))
                        writer.uint32(/* id 7, wireType 0 =*/56).uint64(message.timeout_timestamp);
                    if (message.memo != null && Object.hasOwnProperty.call(message, "memo"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.memo);
                    if (message.fee != null && Object.hasOwnProperty.call(message, "fee"))
                        $root.neutron.feerefunder.Fee.encode(message.fee, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgTransfer message, length delimited. Does not implicitly {@link neutron.transfer.MsgTransfer.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.transfer.MsgTransfer
                 * @static
                 * @param {neutron.transfer.IMsgTransfer} message MsgTransfer message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgTransfer.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgTransfer message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.transfer.MsgTransfer
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.transfer.MsgTransfer} MsgTransfer
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgTransfer.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.transfer.MsgTransfer();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.source_port = reader.string();
                            break;
                        case 2:
                            message.source_channel = reader.string();
                            break;
                        case 3:
                            message.token = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.sender = reader.string();
                            break;
                        case 5:
                            message.receiver = reader.string();
                            break;
                        case 6:
                            message.timeout_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.timeout_timestamp = reader.uint64();
                            break;
                        case 8:
                            message.memo = reader.string();
                            break;
                        case 9:
                            message.fee = $root.neutron.feerefunder.Fee.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgTransfer message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.transfer.MsgTransfer
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.transfer.MsgTransfer} MsgTransfer
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgTransfer.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgTransfer message.
                 * @function verify
                 * @memberof neutron.transfer.MsgTransfer
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgTransfer.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.source_port != null && message.hasOwnProperty("source_port"))
                        if (!$util.isString(message.source_port))
                            return "source_port: string expected";
                    if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                        if (!$util.isString(message.source_channel))
                            return "source_channel: string expected";
                    if (message.token != null && message.hasOwnProperty("token")) {
                        var error = $root.cosmos.base.v1beta1.Coin.verify(message.token);
                        if (error)
                            return "token." + error;
                    }
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    if (message.receiver != null && message.hasOwnProperty("receiver"))
                        if (!$util.isString(message.receiver))
                            return "receiver: string expected";
                    if (message.timeout_height != null && message.hasOwnProperty("timeout_height")) {
                        var error = $root.ibc.core.client.v1.Height.verify(message.timeout_height);
                        if (error)
                            return "timeout_height." + error;
                    }
                    if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                        if (!$util.isInteger(message.timeout_timestamp) && !(message.timeout_timestamp && $util.isInteger(message.timeout_timestamp.low) && $util.isInteger(message.timeout_timestamp.high)))
                            return "timeout_timestamp: integer|Long expected";
                    if (message.memo != null && message.hasOwnProperty("memo"))
                        if (!$util.isString(message.memo))
                            return "memo: string expected";
                    if (message.fee != null && message.hasOwnProperty("fee")) {
                        var error = $root.neutron.feerefunder.Fee.verify(message.fee);
                        if (error)
                            return "fee." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MsgTransfer message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.transfer.MsgTransfer
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.transfer.MsgTransfer} MsgTransfer
                 */
                MsgTransfer.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.transfer.MsgTransfer)
                        return object;
                    var message = new $root.neutron.transfer.MsgTransfer();
                    if (object.source_port != null)
                        message.source_port = String(object.source_port);
                    if (object.source_channel != null)
                        message.source_channel = String(object.source_channel);
                    if (object.token != null) {
                        if (typeof object.token !== "object")
                            throw TypeError(".neutron.transfer.MsgTransfer.token: object expected");
                        message.token = $root.cosmos.base.v1beta1.Coin.fromObject(object.token);
                    }
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    if (object.receiver != null)
                        message.receiver = String(object.receiver);
                    if (object.timeout_height != null) {
                        if (typeof object.timeout_height !== "object")
                            throw TypeError(".neutron.transfer.MsgTransfer.timeout_height: object expected");
                        message.timeout_height = $root.ibc.core.client.v1.Height.fromObject(object.timeout_height);
                    }
                    if (object.timeout_timestamp != null)
                        if ($util.Long)
                            (message.timeout_timestamp = $util.Long.fromValue(object.timeout_timestamp)).unsigned = true;
                        else if (typeof object.timeout_timestamp === "string")
                            message.timeout_timestamp = parseInt(object.timeout_timestamp, 10);
                        else if (typeof object.timeout_timestamp === "number")
                            message.timeout_timestamp = object.timeout_timestamp;
                        else if (typeof object.timeout_timestamp === "object")
                            message.timeout_timestamp = new $util.LongBits(object.timeout_timestamp.low >>> 0, object.timeout_timestamp.high >>> 0).toNumber(true);
                    if (object.memo != null)
                        message.memo = String(object.memo);
                    if (object.fee != null) {
                        if (typeof object.fee !== "object")
                            throw TypeError(".neutron.transfer.MsgTransfer.fee: object expected");
                        message.fee = $root.neutron.feerefunder.Fee.fromObject(object.fee);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgTransfer message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.transfer.MsgTransfer
                 * @static
                 * @param {neutron.transfer.MsgTransfer} message MsgTransfer
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgTransfer.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.source_port = "";
                        object.source_channel = "";
                        object.token = null;
                        object.sender = "";
                        object.receiver = "";
                        object.timeout_height = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.timeout_timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.timeout_timestamp = options.longs === String ? "0" : 0;
                        object.memo = "";
                        object.fee = null;
                    }
                    if (message.source_port != null && message.hasOwnProperty("source_port"))
                        object.source_port = message.source_port;
                    if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                        object.source_channel = message.source_channel;
                    if (message.token != null && message.hasOwnProperty("token"))
                        object.token = $root.cosmos.base.v1beta1.Coin.toObject(message.token, options);
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    if (message.receiver != null && message.hasOwnProperty("receiver"))
                        object.receiver = message.receiver;
                    if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                        object.timeout_height = $root.ibc.core.client.v1.Height.toObject(message.timeout_height, options);
                    if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                        if (typeof message.timeout_timestamp === "number")
                            object.timeout_timestamp = options.longs === String ? String(message.timeout_timestamp) : message.timeout_timestamp;
                        else
                            object.timeout_timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeout_timestamp) : options.longs === Number ? new $util.LongBits(message.timeout_timestamp.low >>> 0, message.timeout_timestamp.high >>> 0).toNumber(true) : message.timeout_timestamp;
                    if (message.memo != null && message.hasOwnProperty("memo"))
                        object.memo = message.memo;
                    if (message.fee != null && message.hasOwnProperty("fee"))
                        object.fee = $root.neutron.feerefunder.Fee.toObject(message.fee, options);
                    return object;
                };
    
                /**
                 * Converts this MsgTransfer to JSON.
                 * @function toJSON
                 * @memberof neutron.transfer.MsgTransfer
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgTransfer.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgTransfer;
            })();
    
            transfer.MsgTransferResponse = (function() {
    
                /**
                 * Properties of a MsgTransferResponse.
                 * @memberof neutron.transfer
                 * @interface IMsgTransferResponse
                 * @property {Long|null} [sequence_id] MsgTransferResponse sequence_id
                 * @property {string|null} [channel] MsgTransferResponse channel
                 */
    
                /**
                 * Constructs a new MsgTransferResponse.
                 * @memberof neutron.transfer
                 * @classdesc Represents a MsgTransferResponse.
                 * @implements IMsgTransferResponse
                 * @constructor
                 * @param {neutron.transfer.IMsgTransferResponse=} [properties] Properties to set
                 */
                function MsgTransferResponse(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MsgTransferResponse sequence_id.
                 * @member {Long} sequence_id
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @instance
                 */
                MsgTransferResponse.prototype.sequence_id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * MsgTransferResponse channel.
                 * @member {string} channel
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @instance
                 */
                MsgTransferResponse.prototype.channel = "";
    
                /**
                 * Encodes the specified MsgTransferResponse message. Does not implicitly {@link neutron.transfer.MsgTransferResponse.verify|verify} messages.
                 * @function encode
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @static
                 * @param {neutron.transfer.IMsgTransferResponse} message MsgTransferResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgTransferResponse.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.sequence_id != null && Object.hasOwnProperty.call(message, "sequence_id"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence_id);
                    if (message.channel != null && Object.hasOwnProperty.call(message, "channel"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel);
                    return writer;
                };
    
                /**
                 * Encodes the specified MsgTransferResponse message, length delimited. Does not implicitly {@link neutron.transfer.MsgTransferResponse.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @static
                 * @param {neutron.transfer.IMsgTransferResponse} message MsgTransferResponse message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MsgTransferResponse.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MsgTransferResponse message from the specified reader or buffer.
                 * @function decode
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {neutron.transfer.MsgTransferResponse} MsgTransferResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgTransferResponse.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.neutron.transfer.MsgTransferResponse();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.sequence_id = reader.uint64();
                            break;
                        case 2:
                            message.channel = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MsgTransferResponse message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {neutron.transfer.MsgTransferResponse} MsgTransferResponse
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MsgTransferResponse.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MsgTransferResponse message.
                 * @function verify
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MsgTransferResponse.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.sequence_id != null && message.hasOwnProperty("sequence_id"))
                        if (!$util.isInteger(message.sequence_id) && !(message.sequence_id && $util.isInteger(message.sequence_id.low) && $util.isInteger(message.sequence_id.high)))
                            return "sequence_id: integer|Long expected";
                    if (message.channel != null && message.hasOwnProperty("channel"))
                        if (!$util.isString(message.channel))
                            return "channel: string expected";
                    return null;
                };
    
                /**
                 * Creates a MsgTransferResponse message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {neutron.transfer.MsgTransferResponse} MsgTransferResponse
                 */
                MsgTransferResponse.fromObject = function fromObject(object) {
                    if (object instanceof $root.neutron.transfer.MsgTransferResponse)
                        return object;
                    var message = new $root.neutron.transfer.MsgTransferResponse();
                    if (object.sequence_id != null)
                        if ($util.Long)
                            (message.sequence_id = $util.Long.fromValue(object.sequence_id)).unsigned = true;
                        else if (typeof object.sequence_id === "string")
                            message.sequence_id = parseInt(object.sequence_id, 10);
                        else if (typeof object.sequence_id === "number")
                            message.sequence_id = object.sequence_id;
                        else if (typeof object.sequence_id === "object")
                            message.sequence_id = new $util.LongBits(object.sequence_id.low >>> 0, object.sequence_id.high >>> 0).toNumber(true);
                    if (object.channel != null)
                        message.channel = String(object.channel);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MsgTransferResponse message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @static
                 * @param {neutron.transfer.MsgTransferResponse} message MsgTransferResponse
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MsgTransferResponse.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.sequence_id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.sequence_id = options.longs === String ? "0" : 0;
                        object.channel = "";
                    }
                    if (message.sequence_id != null && message.hasOwnProperty("sequence_id"))
                        if (typeof message.sequence_id === "number")
                            object.sequence_id = options.longs === String ? String(message.sequence_id) : message.sequence_id;
                        else
                            object.sequence_id = options.longs === String ? $util.Long.prototype.toString.call(message.sequence_id) : options.longs === Number ? new $util.LongBits(message.sequence_id.low >>> 0, message.sequence_id.high >>> 0).toNumber(true) : message.sequence_id;
                    if (message.channel != null && message.hasOwnProperty("channel"))
                        object.channel = message.channel;
                    return object;
                };
    
                /**
                 * Converts this MsgTransferResponse to JSON.
                 * @function toJSON
                 * @memberof neutron.transfer.MsgTransferResponse
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MsgTransferResponse.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MsgTransferResponse;
            })();
    
            transfer.Query = (function() {
    
                /**
                 * Constructs a new Query service.
                 * @memberof neutron.transfer
                 * @classdesc Represents a Query
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function Query(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                /**
                 * Callback as used by {@link neutron.transfer.Query#denomTrace}.
                 * @memberof neutron.transfer.Query
                 * @typedef DenomTraceCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ibc.applications.transfer.v1.QueryDenomTraceResponse} [response] QueryDenomTraceResponse
                 */
    
                /**
                 * Calls DenomTrace.
                 * @function denomTrace
                 * @memberof neutron.transfer.Query
                 * @instance
                 * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} request QueryDenomTraceRequest message or plain object
                 * @param {neutron.transfer.Query.DenomTraceCallback} callback Node-style callback called with the error, if any, and QueryDenomTraceResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.denomTrace = function denomTrace(request, callback) {
                    return this.rpcCall(denomTrace, $root.ibc.applications.transfer.v1.QueryDenomTraceRequest, $root.ibc.applications.transfer.v1.QueryDenomTraceResponse, request, callback);
                }, "name", { value: "DenomTrace" });
    
                /**
                 * Calls DenomTrace.
                 * @function denomTrace
                 * @memberof neutron.transfer.Query
                 * @instance
                 * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} request QueryDenomTraceRequest message or plain object
                 * @returns {Promise<ibc.applications.transfer.v1.QueryDenomTraceResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.transfer.Query#denomTraces}.
                 * @memberof neutron.transfer.Query
                 * @typedef DenomTracesCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ibc.applications.transfer.v1.QueryDenomTracesResponse} [response] QueryDenomTracesResponse
                 */
    
                /**
                 * Calls DenomTraces.
                 * @function denomTraces
                 * @memberof neutron.transfer.Query
                 * @instance
                 * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} request QueryDenomTracesRequest message or plain object
                 * @param {neutron.transfer.Query.DenomTracesCallback} callback Node-style callback called with the error, if any, and QueryDenomTracesResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.denomTraces = function denomTraces(request, callback) {
                    return this.rpcCall(denomTraces, $root.ibc.applications.transfer.v1.QueryDenomTracesRequest, $root.ibc.applications.transfer.v1.QueryDenomTracesResponse, request, callback);
                }, "name", { value: "DenomTraces" });
    
                /**
                 * Calls DenomTraces.
                 * @function denomTraces
                 * @memberof neutron.transfer.Query
                 * @instance
                 * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} request QueryDenomTracesRequest message or plain object
                 * @returns {Promise<ibc.applications.transfer.v1.QueryDenomTracesResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.transfer.Query#params}.
                 * @memberof neutron.transfer.Query
                 * @typedef ParamsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ibc.applications.transfer.v1.QueryParamsResponse} [response] QueryParamsResponse
                 */
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.transfer.Query
                 * @instance
                 * @param {ibc.applications.transfer.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @param {neutron.transfer.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.params = function params(request, callback) {
                    return this.rpcCall(params, $root.ibc.applications.transfer.v1.QueryParamsRequest, $root.ibc.applications.transfer.v1.QueryParamsResponse, request, callback);
                }, "name", { value: "Params" });
    
                /**
                 * Calls Params.
                 * @function params
                 * @memberof neutron.transfer.Query
                 * @instance
                 * @param {ibc.applications.transfer.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                 * @returns {Promise<ibc.applications.transfer.v1.QueryParamsResponse>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link neutron.transfer.Query#denomHash}.
                 * @memberof neutron.transfer.Query
                 * @typedef DenomHashCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {ibc.applications.transfer.v1.QueryDenomHashResponse} [response] QueryDenomHashResponse
                 */
    
                /**
                 * Calls DenomHash.
                 * @function denomHash
                 * @memberof neutron.transfer.Query
                 * @instance
                 * @param {ibc.applications.transfer.v1.IQueryDenomHashRequest} request QueryDenomHashRequest message or plain object
                 * @param {neutron.transfer.Query.DenomHashCallback} callback Node-style callback called with the error, if any, and QueryDenomHashResponse
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(Query.prototype.denomHash = function denomHash(request, callback) {
                    return this.rpcCall(denomHash, $root.ibc.applications.transfer.v1.QueryDenomHashRequest, $root.ibc.applications.transfer.v1.QueryDenomHashResponse, request, callback);
                }, "name", { value: "DenomHash" });
    
                /**
                 * Calls DenomHash.
                 * @function denomHash
                 * @memberof neutron.transfer.Query
                 * @instance
                 * @param {ibc.applications.transfer.v1.IQueryDenomHashRequest} request QueryDenomHashRequest message or plain object
                 * @returns {Promise<ibc.applications.transfer.v1.QueryDenomHashResponse>} Promise
                 * @variation 2
                 */
    
                return Query;
            })();
    
            return transfer;
        })();
    
        return neutron;
    })();
    
    $root.gogoproto = (function() {
    
        /**
         * Namespace gogoproto.
         * @exports gogoproto
         * @namespace
         */
        var gogoproto = {};
    
        return gogoproto;
    })();
    
    $root.ibc = (function() {
    
        /**
         * Namespace ibc.
         * @exports ibc
         * @namespace
         */
        var ibc = {};
    
        ibc.core = (function() {
    
            /**
             * Namespace core.
             * @memberof ibc
             * @namespace
             */
            var core = {};
    
            core.channel = (function() {
    
                /**
                 * Namespace channel.
                 * @memberof ibc.core
                 * @namespace
                 */
                var channel = {};
    
                channel.v1 = (function() {
    
                    /**
                     * Namespace v1.
                     * @memberof ibc.core.channel
                     * @namespace
                     */
                    var v1 = {};
    
                    v1.Channel = (function() {
    
                        /**
                         * Properties of a Channel.
                         * @memberof ibc.core.channel.v1
                         * @interface IChannel
                         * @property {ibc.core.channel.v1.State|null} [state] Channel state
                         * @property {ibc.core.channel.v1.Order|null} [ordering] Channel ordering
                         * @property {ibc.core.channel.v1.ICounterparty|null} [counterparty] Channel counterparty
                         * @property {Array.<string>|null} [connection_hops] Channel connection_hops
                         * @property {string|null} [version] Channel version
                         */
    
                        /**
                         * Constructs a new Channel.
                         * @memberof ibc.core.channel.v1
                         * @classdesc Represents a Channel.
                         * @implements IChannel
                         * @constructor
                         * @param {ibc.core.channel.v1.IChannel=} [properties] Properties to set
                         */
                        function Channel(properties) {
                            this.connection_hops = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Channel state.
                         * @member {ibc.core.channel.v1.State} state
                         * @memberof ibc.core.channel.v1.Channel
                         * @instance
                         */
                        Channel.prototype.state = 0;
    
                        /**
                         * Channel ordering.
                         * @member {ibc.core.channel.v1.Order} ordering
                         * @memberof ibc.core.channel.v1.Channel
                         * @instance
                         */
                        Channel.prototype.ordering = 0;
    
                        /**
                         * Channel counterparty.
                         * @member {ibc.core.channel.v1.ICounterparty|null|undefined} counterparty
                         * @memberof ibc.core.channel.v1.Channel
                         * @instance
                         */
                        Channel.prototype.counterparty = null;
    
                        /**
                         * Channel connection_hops.
                         * @member {Array.<string>} connection_hops
                         * @memberof ibc.core.channel.v1.Channel
                         * @instance
                         */
                        Channel.prototype.connection_hops = $util.emptyArray;
    
                        /**
                         * Channel version.
                         * @member {string} version
                         * @memberof ibc.core.channel.v1.Channel
                         * @instance
                         */
                        Channel.prototype.version = "";
    
                        /**
                         * Encodes the specified Channel message. Does not implicitly {@link ibc.core.channel.v1.Channel.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.channel.v1.Channel
                         * @static
                         * @param {ibc.core.channel.v1.IChannel} message Channel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Channel.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                            if (message.ordering != null && Object.hasOwnProperty.call(message, "ordering"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ordering);
                            if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                                $root.ibc.core.channel.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.connection_hops != null && message.connection_hops.length)
                                for (var i = 0; i < message.connection_hops.length; ++i)
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.connection_hops[i]);
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Channel message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Channel.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.channel.v1.Channel
                         * @static
                         * @param {ibc.core.channel.v1.IChannel} message Channel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Channel.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Channel message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.channel.v1.Channel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.channel.v1.Channel} Channel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Channel.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Channel();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.state = reader.int32();
                                    break;
                                case 2:
                                    message.ordering = reader.int32();
                                    break;
                                case 3:
                                    message.counterparty = $root.ibc.core.channel.v1.Counterparty.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    if (!(message.connection_hops && message.connection_hops.length))
                                        message.connection_hops = [];
                                    message.connection_hops.push(reader.string());
                                    break;
                                case 5:
                                    message.version = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Channel message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.channel.v1.Channel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.channel.v1.Channel} Channel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Channel.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Channel message.
                         * @function verify
                         * @memberof ibc.core.channel.v1.Channel
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Channel.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.ordering != null && message.hasOwnProperty("ordering"))
                                switch (message.ordering) {
                                default:
                                    return "ordering: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                                var error = $root.ibc.core.channel.v1.Counterparty.verify(message.counterparty);
                                if (error)
                                    return "counterparty." + error;
                            }
                            if (message.connection_hops != null && message.hasOwnProperty("connection_hops")) {
                                if (!Array.isArray(message.connection_hops))
                                    return "connection_hops: array expected";
                                for (var i = 0; i < message.connection_hops.length; ++i)
                                    if (!$util.isString(message.connection_hops[i]))
                                        return "connection_hops: string[] expected";
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Channel message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.channel.v1.Channel
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.channel.v1.Channel} Channel
                         */
                        Channel.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.channel.v1.Channel)
                                return object;
                            var message = new $root.ibc.core.channel.v1.Channel();
                            switch (object.state) {
                            case "STATE_UNINITIALIZED_UNSPECIFIED":
                            case 0:
                                message.state = 0;
                                break;
                            case "STATE_INIT":
                            case 1:
                                message.state = 1;
                                break;
                            case "STATE_TRYOPEN":
                            case 2:
                                message.state = 2;
                                break;
                            case "STATE_OPEN":
                            case 3:
                                message.state = 3;
                                break;
                            case "STATE_CLOSED":
                            case 4:
                                message.state = 4;
                                break;
                            }
                            switch (object.ordering) {
                            case "ORDER_NONE_UNSPECIFIED":
                            case 0:
                                message.ordering = 0;
                                break;
                            case "ORDER_UNORDERED":
                            case 1:
                                message.ordering = 1;
                                break;
                            case "ORDER_ORDERED":
                            case 2:
                                message.ordering = 2;
                                break;
                            }
                            if (object.counterparty != null) {
                                if (typeof object.counterparty !== "object")
                                    throw TypeError(".ibc.core.channel.v1.Channel.counterparty: object expected");
                                message.counterparty = $root.ibc.core.channel.v1.Counterparty.fromObject(object.counterparty);
                            }
                            if (object.connection_hops) {
                                if (!Array.isArray(object.connection_hops))
                                    throw TypeError(".ibc.core.channel.v1.Channel.connection_hops: array expected");
                                message.connection_hops = [];
                                for (var i = 0; i < object.connection_hops.length; ++i)
                                    message.connection_hops[i] = String(object.connection_hops[i]);
                            }
                            if (object.version != null)
                                message.version = String(object.version);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Channel message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.channel.v1.Channel
                         * @static
                         * @param {ibc.core.channel.v1.Channel} message Channel
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Channel.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.connection_hops = [];
                            if (options.defaults) {
                                object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                                object.ordering = options.enums === String ? "ORDER_NONE_UNSPECIFIED" : 0;
                                object.counterparty = null;
                                object.version = "";
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.ibc.core.channel.v1.State[message.state] : message.state;
                            if (message.ordering != null && message.hasOwnProperty("ordering"))
                                object.ordering = options.enums === String ? $root.ibc.core.channel.v1.Order[message.ordering] : message.ordering;
                            if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                                object.counterparty = $root.ibc.core.channel.v1.Counterparty.toObject(message.counterparty, options);
                            if (message.connection_hops && message.connection_hops.length) {
                                object.connection_hops = [];
                                for (var j = 0; j < message.connection_hops.length; ++j)
                                    object.connection_hops[j] = message.connection_hops[j];
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            return object;
                        };
    
                        /**
                         * Converts this Channel to JSON.
                         * @function toJSON
                         * @memberof ibc.core.channel.v1.Channel
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Channel.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Channel;
                    })();
    
                    v1.IdentifiedChannel = (function() {
    
                        /**
                         * Properties of an IdentifiedChannel.
                         * @memberof ibc.core.channel.v1
                         * @interface IIdentifiedChannel
                         * @property {ibc.core.channel.v1.State|null} [state] IdentifiedChannel state
                         * @property {ibc.core.channel.v1.Order|null} [ordering] IdentifiedChannel ordering
                         * @property {ibc.core.channel.v1.ICounterparty|null} [counterparty] IdentifiedChannel counterparty
                         * @property {Array.<string>|null} [connection_hops] IdentifiedChannel connection_hops
                         * @property {string|null} [version] IdentifiedChannel version
                         * @property {string|null} [port_id] IdentifiedChannel port_id
                         * @property {string|null} [channel_id] IdentifiedChannel channel_id
                         */
    
                        /**
                         * Constructs a new IdentifiedChannel.
                         * @memberof ibc.core.channel.v1
                         * @classdesc Represents an IdentifiedChannel.
                         * @implements IIdentifiedChannel
                         * @constructor
                         * @param {ibc.core.channel.v1.IIdentifiedChannel=} [properties] Properties to set
                         */
                        function IdentifiedChannel(properties) {
                            this.connection_hops = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * IdentifiedChannel state.
                         * @member {ibc.core.channel.v1.State} state
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @instance
                         */
                        IdentifiedChannel.prototype.state = 0;
    
                        /**
                         * IdentifiedChannel ordering.
                         * @member {ibc.core.channel.v1.Order} ordering
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @instance
                         */
                        IdentifiedChannel.prototype.ordering = 0;
    
                        /**
                         * IdentifiedChannel counterparty.
                         * @member {ibc.core.channel.v1.ICounterparty|null|undefined} counterparty
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @instance
                         */
                        IdentifiedChannel.prototype.counterparty = null;
    
                        /**
                         * IdentifiedChannel connection_hops.
                         * @member {Array.<string>} connection_hops
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @instance
                         */
                        IdentifiedChannel.prototype.connection_hops = $util.emptyArray;
    
                        /**
                         * IdentifiedChannel version.
                         * @member {string} version
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @instance
                         */
                        IdentifiedChannel.prototype.version = "";
    
                        /**
                         * IdentifiedChannel port_id.
                         * @member {string} port_id
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @instance
                         */
                        IdentifiedChannel.prototype.port_id = "";
    
                        /**
                         * IdentifiedChannel channel_id.
                         * @member {string} channel_id
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @instance
                         */
                        IdentifiedChannel.prototype.channel_id = "";
    
                        /**
                         * Encodes the specified IdentifiedChannel message. Does not implicitly {@link ibc.core.channel.v1.IdentifiedChannel.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @static
                         * @param {ibc.core.channel.v1.IIdentifiedChannel} message IdentifiedChannel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        IdentifiedChannel.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.state);
                            if (message.ordering != null && Object.hasOwnProperty.call(message, "ordering"))
                                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.ordering);
                            if (message.counterparty != null && Object.hasOwnProperty.call(message, "counterparty"))
                                $root.ibc.core.channel.v1.Counterparty.encode(message.counterparty, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.connection_hops != null && message.connection_hops.length)
                                for (var i = 0; i < message.connection_hops.length; ++i)
                                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.connection_hops[i]);
                            if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);
                            if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.port_id);
                            if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                                writer.uint32(/* id 7, wireType 2 =*/58).string(message.channel_id);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified IdentifiedChannel message, length delimited. Does not implicitly {@link ibc.core.channel.v1.IdentifiedChannel.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @static
                         * @param {ibc.core.channel.v1.IIdentifiedChannel} message IdentifiedChannel message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        IdentifiedChannel.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an IdentifiedChannel message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        IdentifiedChannel.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.IdentifiedChannel();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.state = reader.int32();
                                    break;
                                case 2:
                                    message.ordering = reader.int32();
                                    break;
                                case 3:
                                    message.counterparty = $root.ibc.core.channel.v1.Counterparty.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    if (!(message.connection_hops && message.connection_hops.length))
                                        message.connection_hops = [];
                                    message.connection_hops.push(reader.string());
                                    break;
                                case 5:
                                    message.version = reader.string();
                                    break;
                                case 6:
                                    message.port_id = reader.string();
                                    break;
                                case 7:
                                    message.channel_id = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an IdentifiedChannel message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        IdentifiedChannel.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an IdentifiedChannel message.
                         * @function verify
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        IdentifiedChannel.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.state != null && message.hasOwnProperty("state"))
                                switch (message.state) {
                                default:
                                    return "state: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                case 3:
                                case 4:
                                    break;
                                }
                            if (message.ordering != null && message.hasOwnProperty("ordering"))
                                switch (message.ordering) {
                                default:
                                    return "ordering: enum value expected";
                                case 0:
                                case 1:
                                case 2:
                                    break;
                                }
                            if (message.counterparty != null && message.hasOwnProperty("counterparty")) {
                                var error = $root.ibc.core.channel.v1.Counterparty.verify(message.counterparty);
                                if (error)
                                    return "counterparty." + error;
                            }
                            if (message.connection_hops != null && message.hasOwnProperty("connection_hops")) {
                                if (!Array.isArray(message.connection_hops))
                                    return "connection_hops: array expected";
                                for (var i = 0; i < message.connection_hops.length; ++i)
                                    if (!$util.isString(message.connection_hops[i]))
                                        return "connection_hops: string[] expected";
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                if (!$util.isString(message.version))
                                    return "version: string expected";
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                if (!$util.isString(message.port_id))
                                    return "port_id: string expected";
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                if (!$util.isString(message.channel_id))
                                    return "channel_id: string expected";
                            return null;
                        };
    
                        /**
                         * Creates an IdentifiedChannel message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.channel.v1.IdentifiedChannel} IdentifiedChannel
                         */
                        IdentifiedChannel.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.channel.v1.IdentifiedChannel)
                                return object;
                            var message = new $root.ibc.core.channel.v1.IdentifiedChannel();
                            switch (object.state) {
                            case "STATE_UNINITIALIZED_UNSPECIFIED":
                            case 0:
                                message.state = 0;
                                break;
                            case "STATE_INIT":
                            case 1:
                                message.state = 1;
                                break;
                            case "STATE_TRYOPEN":
                            case 2:
                                message.state = 2;
                                break;
                            case "STATE_OPEN":
                            case 3:
                                message.state = 3;
                                break;
                            case "STATE_CLOSED":
                            case 4:
                                message.state = 4;
                                break;
                            }
                            switch (object.ordering) {
                            case "ORDER_NONE_UNSPECIFIED":
                            case 0:
                                message.ordering = 0;
                                break;
                            case "ORDER_UNORDERED":
                            case 1:
                                message.ordering = 1;
                                break;
                            case "ORDER_ORDERED":
                            case 2:
                                message.ordering = 2;
                                break;
                            }
                            if (object.counterparty != null) {
                                if (typeof object.counterparty !== "object")
                                    throw TypeError(".ibc.core.channel.v1.IdentifiedChannel.counterparty: object expected");
                                message.counterparty = $root.ibc.core.channel.v1.Counterparty.fromObject(object.counterparty);
                            }
                            if (object.connection_hops) {
                                if (!Array.isArray(object.connection_hops))
                                    throw TypeError(".ibc.core.channel.v1.IdentifiedChannel.connection_hops: array expected");
                                message.connection_hops = [];
                                for (var i = 0; i < object.connection_hops.length; ++i)
                                    message.connection_hops[i] = String(object.connection_hops[i]);
                            }
                            if (object.version != null)
                                message.version = String(object.version);
                            if (object.port_id != null)
                                message.port_id = String(object.port_id);
                            if (object.channel_id != null)
                                message.channel_id = String(object.channel_id);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an IdentifiedChannel message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @static
                         * @param {ibc.core.channel.v1.IdentifiedChannel} message IdentifiedChannel
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        IdentifiedChannel.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.connection_hops = [];
                            if (options.defaults) {
                                object.state = options.enums === String ? "STATE_UNINITIALIZED_UNSPECIFIED" : 0;
                                object.ordering = options.enums === String ? "ORDER_NONE_UNSPECIFIED" : 0;
                                object.counterparty = null;
                                object.version = "";
                                object.port_id = "";
                                object.channel_id = "";
                            }
                            if (message.state != null && message.hasOwnProperty("state"))
                                object.state = options.enums === String ? $root.ibc.core.channel.v1.State[message.state] : message.state;
                            if (message.ordering != null && message.hasOwnProperty("ordering"))
                                object.ordering = options.enums === String ? $root.ibc.core.channel.v1.Order[message.ordering] : message.ordering;
                            if (message.counterparty != null && message.hasOwnProperty("counterparty"))
                                object.counterparty = $root.ibc.core.channel.v1.Counterparty.toObject(message.counterparty, options);
                            if (message.connection_hops && message.connection_hops.length) {
                                object.connection_hops = [];
                                for (var j = 0; j < message.connection_hops.length; ++j)
                                    object.connection_hops[j] = message.connection_hops[j];
                            }
                            if (message.version != null && message.hasOwnProperty("version"))
                                object.version = message.version;
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                object.port_id = message.port_id;
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                object.channel_id = message.channel_id;
                            return object;
                        };
    
                        /**
                         * Converts this IdentifiedChannel to JSON.
                         * @function toJSON
                         * @memberof ibc.core.channel.v1.IdentifiedChannel
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        IdentifiedChannel.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return IdentifiedChannel;
                    })();
    
                    /**
                     * State enum.
                     * @name ibc.core.channel.v1.State
                     * @enum {number}
                     * @property {number} STATE_UNINITIALIZED_UNSPECIFIED=0 STATE_UNINITIALIZED_UNSPECIFIED value
                     * @property {number} STATE_INIT=1 STATE_INIT value
                     * @property {number} STATE_TRYOPEN=2 STATE_TRYOPEN value
                     * @property {number} STATE_OPEN=3 STATE_OPEN value
                     * @property {number} STATE_CLOSED=4 STATE_CLOSED value
                     */
                    v1.State = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "STATE_UNINITIALIZED_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "STATE_INIT"] = 1;
                        values[valuesById[2] = "STATE_TRYOPEN"] = 2;
                        values[valuesById[3] = "STATE_OPEN"] = 3;
                        values[valuesById[4] = "STATE_CLOSED"] = 4;
                        return values;
                    })();
    
                    /**
                     * Order enum.
                     * @name ibc.core.channel.v1.Order
                     * @enum {number}
                     * @property {number} ORDER_NONE_UNSPECIFIED=0 ORDER_NONE_UNSPECIFIED value
                     * @property {number} ORDER_UNORDERED=1 ORDER_UNORDERED value
                     * @property {number} ORDER_ORDERED=2 ORDER_ORDERED value
                     */
                    v1.Order = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "ORDER_NONE_UNSPECIFIED"] = 0;
                        values[valuesById[1] = "ORDER_UNORDERED"] = 1;
                        values[valuesById[2] = "ORDER_ORDERED"] = 2;
                        return values;
                    })();
    
                    v1.Counterparty = (function() {
    
                        /**
                         * Properties of a Counterparty.
                         * @memberof ibc.core.channel.v1
                         * @interface ICounterparty
                         * @property {string|null} [port_id] Counterparty port_id
                         * @property {string|null} [channel_id] Counterparty channel_id
                         */
    
                        /**
                         * Constructs a new Counterparty.
                         * @memberof ibc.core.channel.v1
                         * @classdesc Represents a Counterparty.
                         * @implements ICounterparty
                         * @constructor
                         * @param {ibc.core.channel.v1.ICounterparty=} [properties] Properties to set
                         */
                        function Counterparty(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Counterparty port_id.
                         * @member {string} port_id
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @instance
                         */
                        Counterparty.prototype.port_id = "";
    
                        /**
                         * Counterparty channel_id.
                         * @member {string} channel_id
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @instance
                         */
                        Counterparty.prototype.channel_id = "";
    
                        /**
                         * Encodes the specified Counterparty message. Does not implicitly {@link ibc.core.channel.v1.Counterparty.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @static
                         * @param {ibc.core.channel.v1.ICounterparty} message Counterparty message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Counterparty.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                            if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Counterparty message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Counterparty.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @static
                         * @param {ibc.core.channel.v1.ICounterparty} message Counterparty message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Counterparty.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Counterparty message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Counterparty.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Counterparty();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.port_id = reader.string();
                                    break;
                                case 2:
                                    message.channel_id = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Counterparty message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Counterparty.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Counterparty message.
                         * @function verify
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Counterparty.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                if (!$util.isString(message.port_id))
                                    return "port_id: string expected";
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                if (!$util.isString(message.channel_id))
                                    return "channel_id: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a Counterparty message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.channel.v1.Counterparty} Counterparty
                         */
                        Counterparty.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.channel.v1.Counterparty)
                                return object;
                            var message = new $root.ibc.core.channel.v1.Counterparty();
                            if (object.port_id != null)
                                message.port_id = String(object.port_id);
                            if (object.channel_id != null)
                                message.channel_id = String(object.channel_id);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Counterparty message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @static
                         * @param {ibc.core.channel.v1.Counterparty} message Counterparty
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Counterparty.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.port_id = "";
                                object.channel_id = "";
                            }
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                object.port_id = message.port_id;
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                object.channel_id = message.channel_id;
                            return object;
                        };
    
                        /**
                         * Converts this Counterparty to JSON.
                         * @function toJSON
                         * @memberof ibc.core.channel.v1.Counterparty
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Counterparty.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Counterparty;
                    })();
    
                    v1.Packet = (function() {
    
                        /**
                         * Properties of a Packet.
                         * @memberof ibc.core.channel.v1
                         * @interface IPacket
                         * @property {Long|null} [sequence] Packet sequence
                         * @property {string|null} [source_port] Packet source_port
                         * @property {string|null} [source_channel] Packet source_channel
                         * @property {string|null} [destination_port] Packet destination_port
                         * @property {string|null} [destination_channel] Packet destination_channel
                         * @property {Uint8Array|null} [data] Packet data
                         * @property {ibc.core.client.v1.IHeight|null} [timeout_height] Packet timeout_height
                         * @property {Long|null} [timeout_timestamp] Packet timeout_timestamp
                         */
    
                        /**
                         * Constructs a new Packet.
                         * @memberof ibc.core.channel.v1
                         * @classdesc Represents a Packet.
                         * @implements IPacket
                         * @constructor
                         * @param {ibc.core.channel.v1.IPacket=} [properties] Properties to set
                         */
                        function Packet(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Packet sequence.
                         * @member {Long} sequence
                         * @memberof ibc.core.channel.v1.Packet
                         * @instance
                         */
                        Packet.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                        /**
                         * Packet source_port.
                         * @member {string} source_port
                         * @memberof ibc.core.channel.v1.Packet
                         * @instance
                         */
                        Packet.prototype.source_port = "";
    
                        /**
                         * Packet source_channel.
                         * @member {string} source_channel
                         * @memberof ibc.core.channel.v1.Packet
                         * @instance
                         */
                        Packet.prototype.source_channel = "";
    
                        /**
                         * Packet destination_port.
                         * @member {string} destination_port
                         * @memberof ibc.core.channel.v1.Packet
                         * @instance
                         */
                        Packet.prototype.destination_port = "";
    
                        /**
                         * Packet destination_channel.
                         * @member {string} destination_channel
                         * @memberof ibc.core.channel.v1.Packet
                         * @instance
                         */
                        Packet.prototype.destination_channel = "";
    
                        /**
                         * Packet data.
                         * @member {Uint8Array} data
                         * @memberof ibc.core.channel.v1.Packet
                         * @instance
                         */
                        Packet.prototype.data = $util.newBuffer([]);
    
                        /**
                         * Packet timeout_height.
                         * @member {ibc.core.client.v1.IHeight|null|undefined} timeout_height
                         * @memberof ibc.core.channel.v1.Packet
                         * @instance
                         */
                        Packet.prototype.timeout_height = null;
    
                        /**
                         * Packet timeout_timestamp.
                         * @member {Long} timeout_timestamp
                         * @memberof ibc.core.channel.v1.Packet
                         * @instance
                         */
                        Packet.prototype.timeout_timestamp = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                        /**
                         * Encodes the specified Packet message. Does not implicitly {@link ibc.core.channel.v1.Packet.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.channel.v1.Packet
                         * @static
                         * @param {ibc.core.channel.v1.IPacket} message Packet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Packet.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.sequence);
                            if (message.source_port != null && Object.hasOwnProperty.call(message, "source_port"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_port);
                            if (message.source_channel != null && Object.hasOwnProperty.call(message, "source_channel"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.source_channel);
                            if (message.destination_port != null && Object.hasOwnProperty.call(message, "destination_port"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.destination_port);
                            if (message.destination_channel != null && Object.hasOwnProperty.call(message, "destination_channel"))
                                writer.uint32(/* id 5, wireType 2 =*/42).string(message.destination_channel);
                            if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.data);
                            if (message.timeout_height != null && Object.hasOwnProperty.call(message, "timeout_height"))
                                $root.ibc.core.client.v1.Height.encode(message.timeout_height, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                            if (message.timeout_timestamp != null && Object.hasOwnProperty.call(message, "timeout_timestamp"))
                                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.timeout_timestamp);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Packet message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Packet.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.channel.v1.Packet
                         * @static
                         * @param {ibc.core.channel.v1.IPacket} message Packet message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Packet.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Packet message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.channel.v1.Packet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.channel.v1.Packet} Packet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Packet.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Packet();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.sequence = reader.uint64();
                                    break;
                                case 2:
                                    message.source_port = reader.string();
                                    break;
                                case 3:
                                    message.source_channel = reader.string();
                                    break;
                                case 4:
                                    message.destination_port = reader.string();
                                    break;
                                case 5:
                                    message.destination_channel = reader.string();
                                    break;
                                case 6:
                                    message.data = reader.bytes();
                                    break;
                                case 7:
                                    message.timeout_height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                    break;
                                case 8:
                                    message.timeout_timestamp = reader.uint64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Packet message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.channel.v1.Packet
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.channel.v1.Packet} Packet
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Packet.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Packet message.
                         * @function verify
                         * @memberof ibc.core.channel.v1.Packet
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Packet.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.sequence != null && message.hasOwnProperty("sequence"))
                                if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                    return "sequence: integer|Long expected";
                            if (message.source_port != null && message.hasOwnProperty("source_port"))
                                if (!$util.isString(message.source_port))
                                    return "source_port: string expected";
                            if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                                if (!$util.isString(message.source_channel))
                                    return "source_channel: string expected";
                            if (message.destination_port != null && message.hasOwnProperty("destination_port"))
                                if (!$util.isString(message.destination_port))
                                    return "destination_port: string expected";
                            if (message.destination_channel != null && message.hasOwnProperty("destination_channel"))
                                if (!$util.isString(message.destination_channel))
                                    return "destination_channel: string expected";
                            if (message.data != null && message.hasOwnProperty("data"))
                                if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                    return "data: buffer expected";
                            if (message.timeout_height != null && message.hasOwnProperty("timeout_height")) {
                                var error = $root.ibc.core.client.v1.Height.verify(message.timeout_height);
                                if (error)
                                    return "timeout_height." + error;
                            }
                            if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                                if (!$util.isInteger(message.timeout_timestamp) && !(message.timeout_timestamp && $util.isInteger(message.timeout_timestamp.low) && $util.isInteger(message.timeout_timestamp.high)))
                                    return "timeout_timestamp: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a Packet message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.channel.v1.Packet
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.channel.v1.Packet} Packet
                         */
                        Packet.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.channel.v1.Packet)
                                return object;
                            var message = new $root.ibc.core.channel.v1.Packet();
                            if (object.sequence != null)
                                if ($util.Long)
                                    (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                                else if (typeof object.sequence === "string")
                                    message.sequence = parseInt(object.sequence, 10);
                                else if (typeof object.sequence === "number")
                                    message.sequence = object.sequence;
                                else if (typeof object.sequence === "object")
                                    message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                            if (object.source_port != null)
                                message.source_port = String(object.source_port);
                            if (object.source_channel != null)
                                message.source_channel = String(object.source_channel);
                            if (object.destination_port != null)
                                message.destination_port = String(object.destination_port);
                            if (object.destination_channel != null)
                                message.destination_channel = String(object.destination_channel);
                            if (object.data != null)
                                if (typeof object.data === "string")
                                    $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                                else if (object.data.length)
                                    message.data = object.data;
                            if (object.timeout_height != null) {
                                if (typeof object.timeout_height !== "object")
                                    throw TypeError(".ibc.core.channel.v1.Packet.timeout_height: object expected");
                                message.timeout_height = $root.ibc.core.client.v1.Height.fromObject(object.timeout_height);
                            }
                            if (object.timeout_timestamp != null)
                                if ($util.Long)
                                    (message.timeout_timestamp = $util.Long.fromValue(object.timeout_timestamp)).unsigned = true;
                                else if (typeof object.timeout_timestamp === "string")
                                    message.timeout_timestamp = parseInt(object.timeout_timestamp, 10);
                                else if (typeof object.timeout_timestamp === "number")
                                    message.timeout_timestamp = object.timeout_timestamp;
                                else if (typeof object.timeout_timestamp === "object")
                                    message.timeout_timestamp = new $util.LongBits(object.timeout_timestamp.low >>> 0, object.timeout_timestamp.high >>> 0).toNumber(true);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Packet message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.channel.v1.Packet
                         * @static
                         * @param {ibc.core.channel.v1.Packet} message Packet
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Packet.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, true);
                                    object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.sequence = options.longs === String ? "0" : 0;
                                object.source_port = "";
                                object.source_channel = "";
                                object.destination_port = "";
                                object.destination_channel = "";
                                if (options.bytes === String)
                                    object.data = "";
                                else {
                                    object.data = [];
                                    if (options.bytes !== Array)
                                        object.data = $util.newBuffer(object.data);
                                }
                                object.timeout_height = null;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, true);
                                    object.timeout_timestamp = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.timeout_timestamp = options.longs === String ? "0" : 0;
                            }
                            if (message.sequence != null && message.hasOwnProperty("sequence"))
                                if (typeof message.sequence === "number")
                                    object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                                else
                                    object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                            if (message.source_port != null && message.hasOwnProperty("source_port"))
                                object.source_port = message.source_port;
                            if (message.source_channel != null && message.hasOwnProperty("source_channel"))
                                object.source_channel = message.source_channel;
                            if (message.destination_port != null && message.hasOwnProperty("destination_port"))
                                object.destination_port = message.destination_port;
                            if (message.destination_channel != null && message.hasOwnProperty("destination_channel"))
                                object.destination_channel = message.destination_channel;
                            if (message.data != null && message.hasOwnProperty("data"))
                                object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                            if (message.timeout_height != null && message.hasOwnProperty("timeout_height"))
                                object.timeout_height = $root.ibc.core.client.v1.Height.toObject(message.timeout_height, options);
                            if (message.timeout_timestamp != null && message.hasOwnProperty("timeout_timestamp"))
                                if (typeof message.timeout_timestamp === "number")
                                    object.timeout_timestamp = options.longs === String ? String(message.timeout_timestamp) : message.timeout_timestamp;
                                else
                                    object.timeout_timestamp = options.longs === String ? $util.Long.prototype.toString.call(message.timeout_timestamp) : options.longs === Number ? new $util.LongBits(message.timeout_timestamp.low >>> 0, message.timeout_timestamp.high >>> 0).toNumber(true) : message.timeout_timestamp;
                            return object;
                        };
    
                        /**
                         * Converts this Packet to JSON.
                         * @function toJSON
                         * @memberof ibc.core.channel.v1.Packet
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Packet.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Packet;
                    })();
    
                    v1.PacketState = (function() {
    
                        /**
                         * Properties of a PacketState.
                         * @memberof ibc.core.channel.v1
                         * @interface IPacketState
                         * @property {string|null} [port_id] PacketState port_id
                         * @property {string|null} [channel_id] PacketState channel_id
                         * @property {Long|null} [sequence] PacketState sequence
                         * @property {Uint8Array|null} [data] PacketState data
                         */
    
                        /**
                         * Constructs a new PacketState.
                         * @memberof ibc.core.channel.v1
                         * @classdesc Represents a PacketState.
                         * @implements IPacketState
                         * @constructor
                         * @param {ibc.core.channel.v1.IPacketState=} [properties] Properties to set
                         */
                        function PacketState(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PacketState port_id.
                         * @member {string} port_id
                         * @memberof ibc.core.channel.v1.PacketState
                         * @instance
                         */
                        PacketState.prototype.port_id = "";
    
                        /**
                         * PacketState channel_id.
                         * @member {string} channel_id
                         * @memberof ibc.core.channel.v1.PacketState
                         * @instance
                         */
                        PacketState.prototype.channel_id = "";
    
                        /**
                         * PacketState sequence.
                         * @member {Long} sequence
                         * @memberof ibc.core.channel.v1.PacketState
                         * @instance
                         */
                        PacketState.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                        /**
                         * PacketState data.
                         * @member {Uint8Array} data
                         * @memberof ibc.core.channel.v1.PacketState
                         * @instance
                         */
                        PacketState.prototype.data = $util.newBuffer([]);
    
                        /**
                         * Encodes the specified PacketState message. Does not implicitly {@link ibc.core.channel.v1.PacketState.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.channel.v1.PacketState
                         * @static
                         * @param {ibc.core.channel.v1.IPacketState} message PacketState message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PacketState.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                            if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                            if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                            if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.data);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PacketState message, length delimited. Does not implicitly {@link ibc.core.channel.v1.PacketState.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.channel.v1.PacketState
                         * @static
                         * @param {ibc.core.channel.v1.IPacketState} message PacketState message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PacketState.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PacketState message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.channel.v1.PacketState
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.channel.v1.PacketState} PacketState
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PacketState.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.PacketState();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.port_id = reader.string();
                                    break;
                                case 2:
                                    message.channel_id = reader.string();
                                    break;
                                case 3:
                                    message.sequence = reader.uint64();
                                    break;
                                case 4:
                                    message.data = reader.bytes();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PacketState message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.channel.v1.PacketState
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.channel.v1.PacketState} PacketState
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PacketState.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PacketState message.
                         * @function verify
                         * @memberof ibc.core.channel.v1.PacketState
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PacketState.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                if (!$util.isString(message.port_id))
                                    return "port_id: string expected";
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                if (!$util.isString(message.channel_id))
                                    return "channel_id: string expected";
                            if (message.sequence != null && message.hasOwnProperty("sequence"))
                                if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                    return "sequence: integer|Long expected";
                            if (message.data != null && message.hasOwnProperty("data"))
                                if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                                    return "data: buffer expected";
                            return null;
                        };
    
                        /**
                         * Creates a PacketState message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.channel.v1.PacketState
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.channel.v1.PacketState} PacketState
                         */
                        PacketState.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.channel.v1.PacketState)
                                return object;
                            var message = new $root.ibc.core.channel.v1.PacketState();
                            if (object.port_id != null)
                                message.port_id = String(object.port_id);
                            if (object.channel_id != null)
                                message.channel_id = String(object.channel_id);
                            if (object.sequence != null)
                                if ($util.Long)
                                    (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                                else if (typeof object.sequence === "string")
                                    message.sequence = parseInt(object.sequence, 10);
                                else if (typeof object.sequence === "number")
                                    message.sequence = object.sequence;
                                else if (typeof object.sequence === "object")
                                    message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                            if (object.data != null)
                                if (typeof object.data === "string")
                                    $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                                else if (object.data.length)
                                    message.data = object.data;
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PacketState message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.channel.v1.PacketState
                         * @static
                         * @param {ibc.core.channel.v1.PacketState} message PacketState
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PacketState.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.port_id = "";
                                object.channel_id = "";
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, true);
                                    object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.sequence = options.longs === String ? "0" : 0;
                                if (options.bytes === String)
                                    object.data = "";
                                else {
                                    object.data = [];
                                    if (options.bytes !== Array)
                                        object.data = $util.newBuffer(object.data);
                                }
                            }
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                object.port_id = message.port_id;
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                object.channel_id = message.channel_id;
                            if (message.sequence != null && message.hasOwnProperty("sequence"))
                                if (typeof message.sequence === "number")
                                    object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                                else
                                    object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                            if (message.data != null && message.hasOwnProperty("data"))
                                object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                            return object;
                        };
    
                        /**
                         * Converts this PacketState to JSON.
                         * @function toJSON
                         * @memberof ibc.core.channel.v1.PacketState
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PacketState.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return PacketState;
                    })();
    
                    v1.PacketId = (function() {
    
                        /**
                         * Properties of a PacketId.
                         * @memberof ibc.core.channel.v1
                         * @interface IPacketId
                         * @property {string|null} [port_id] PacketId port_id
                         * @property {string|null} [channel_id] PacketId channel_id
                         * @property {Long|null} [sequence] PacketId sequence
                         */
    
                        /**
                         * Constructs a new PacketId.
                         * @memberof ibc.core.channel.v1
                         * @classdesc Represents a PacketId.
                         * @implements IPacketId
                         * @constructor
                         * @param {ibc.core.channel.v1.IPacketId=} [properties] Properties to set
                         */
                        function PacketId(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PacketId port_id.
                         * @member {string} port_id
                         * @memberof ibc.core.channel.v1.PacketId
                         * @instance
                         */
                        PacketId.prototype.port_id = "";
    
                        /**
                         * PacketId channel_id.
                         * @member {string} channel_id
                         * @memberof ibc.core.channel.v1.PacketId
                         * @instance
                         */
                        PacketId.prototype.channel_id = "";
    
                        /**
                         * PacketId sequence.
                         * @member {Long} sequence
                         * @memberof ibc.core.channel.v1.PacketId
                         * @instance
                         */
                        PacketId.prototype.sequence = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                        /**
                         * Encodes the specified PacketId message. Does not implicitly {@link ibc.core.channel.v1.PacketId.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.channel.v1.PacketId
                         * @static
                         * @param {ibc.core.channel.v1.IPacketId} message PacketId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PacketId.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                            if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                            if (message.sequence != null && Object.hasOwnProperty.call(message, "sequence"))
                                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.sequence);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PacketId message, length delimited. Does not implicitly {@link ibc.core.channel.v1.PacketId.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.channel.v1.PacketId
                         * @static
                         * @param {ibc.core.channel.v1.IPacketId} message PacketId message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PacketId.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PacketId message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.channel.v1.PacketId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.channel.v1.PacketId} PacketId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PacketId.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.PacketId();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.port_id = reader.string();
                                    break;
                                case 2:
                                    message.channel_id = reader.string();
                                    break;
                                case 3:
                                    message.sequence = reader.uint64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PacketId message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.channel.v1.PacketId
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.channel.v1.PacketId} PacketId
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PacketId.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PacketId message.
                         * @function verify
                         * @memberof ibc.core.channel.v1.PacketId
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PacketId.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                if (!$util.isString(message.port_id))
                                    return "port_id: string expected";
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                if (!$util.isString(message.channel_id))
                                    return "channel_id: string expected";
                            if (message.sequence != null && message.hasOwnProperty("sequence"))
                                if (!$util.isInteger(message.sequence) && !(message.sequence && $util.isInteger(message.sequence.low) && $util.isInteger(message.sequence.high)))
                                    return "sequence: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a PacketId message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.channel.v1.PacketId
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.channel.v1.PacketId} PacketId
                         */
                        PacketId.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.channel.v1.PacketId)
                                return object;
                            var message = new $root.ibc.core.channel.v1.PacketId();
                            if (object.port_id != null)
                                message.port_id = String(object.port_id);
                            if (object.channel_id != null)
                                message.channel_id = String(object.channel_id);
                            if (object.sequence != null)
                                if ($util.Long)
                                    (message.sequence = $util.Long.fromValue(object.sequence)).unsigned = true;
                                else if (typeof object.sequence === "string")
                                    message.sequence = parseInt(object.sequence, 10);
                                else if (typeof object.sequence === "number")
                                    message.sequence = object.sequence;
                                else if (typeof object.sequence === "object")
                                    message.sequence = new $util.LongBits(object.sequence.low >>> 0, object.sequence.high >>> 0).toNumber(true);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PacketId message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.channel.v1.PacketId
                         * @static
                         * @param {ibc.core.channel.v1.PacketId} message PacketId
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PacketId.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.port_id = "";
                                object.channel_id = "";
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, true);
                                    object.sequence = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.sequence = options.longs === String ? "0" : 0;
                            }
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                object.port_id = message.port_id;
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                object.channel_id = message.channel_id;
                            if (message.sequence != null && message.hasOwnProperty("sequence"))
                                if (typeof message.sequence === "number")
                                    object.sequence = options.longs === String ? String(message.sequence) : message.sequence;
                                else
                                    object.sequence = options.longs === String ? $util.Long.prototype.toString.call(message.sequence) : options.longs === Number ? new $util.LongBits(message.sequence.low >>> 0, message.sequence.high >>> 0).toNumber(true) : message.sequence;
                            return object;
                        };
    
                        /**
                         * Converts this PacketId to JSON.
                         * @function toJSON
                         * @memberof ibc.core.channel.v1.PacketId
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PacketId.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return PacketId;
                    })();
    
                    v1.Acknowledgement = (function() {
    
                        /**
                         * Properties of an Acknowledgement.
                         * @memberof ibc.core.channel.v1
                         * @interface IAcknowledgement
                         * @property {Uint8Array|null} [result] Acknowledgement result
                         * @property {string|null} [error] Acknowledgement error
                         */
    
                        /**
                         * Constructs a new Acknowledgement.
                         * @memberof ibc.core.channel.v1
                         * @classdesc Represents an Acknowledgement.
                         * @implements IAcknowledgement
                         * @constructor
                         * @param {ibc.core.channel.v1.IAcknowledgement=} [properties] Properties to set
                         */
                        function Acknowledgement(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Acknowledgement result.
                         * @member {Uint8Array|null|undefined} result
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @instance
                         */
                        Acknowledgement.prototype.result = null;
    
                        /**
                         * Acknowledgement error.
                         * @member {string|null|undefined} error
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @instance
                         */
                        Acknowledgement.prototype.error = null;
    
                        // OneOf field names bound to virtual getters and setters
                        var $oneOfFields;
    
                        /**
                         * Acknowledgement response.
                         * @member {"result"|"error"|undefined} response
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @instance
                         */
                        Object.defineProperty(Acknowledgement.prototype, "response", {
                            get: $util.oneOfGetter($oneOfFields = ["result", "error"]),
                            set: $util.oneOfSetter($oneOfFields)
                        });
    
                        /**
                         * Encodes the specified Acknowledgement message. Does not implicitly {@link ibc.core.channel.v1.Acknowledgement.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @static
                         * @param {ibc.core.channel.v1.IAcknowledgement} message Acknowledgement message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Acknowledgement.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                                writer.uint32(/* id 21, wireType 2 =*/170).bytes(message.result);
                            if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                                writer.uint32(/* id 22, wireType 2 =*/178).string(message.error);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Acknowledgement message, length delimited. Does not implicitly {@link ibc.core.channel.v1.Acknowledgement.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @static
                         * @param {ibc.core.channel.v1.IAcknowledgement} message Acknowledgement message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Acknowledgement.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Acknowledgement message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Acknowledgement.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.channel.v1.Acknowledgement();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 21:
                                    message.result = reader.bytes();
                                    break;
                                case 22:
                                    message.error = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Acknowledgement message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Acknowledgement.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Acknowledgement message.
                         * @function verify
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Acknowledgement.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            var properties = {};
                            if (message.result != null && message.hasOwnProperty("result")) {
                                properties.response = 1;
                                if (!(message.result && typeof message.result.length === "number" || $util.isString(message.result)))
                                    return "result: buffer expected";
                            }
                            if (message.error != null && message.hasOwnProperty("error")) {
                                if (properties.response === 1)
                                    return "response: multiple values";
                                properties.response = 1;
                                if (!$util.isString(message.error))
                                    return "error: string expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates an Acknowledgement message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.channel.v1.Acknowledgement} Acknowledgement
                         */
                        Acknowledgement.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.channel.v1.Acknowledgement)
                                return object;
                            var message = new $root.ibc.core.channel.v1.Acknowledgement();
                            if (object.result != null)
                                if (typeof object.result === "string")
                                    $util.base64.decode(object.result, message.result = $util.newBuffer($util.base64.length(object.result)), 0);
                                else if (object.result.length)
                                    message.result = object.result;
                            if (object.error != null)
                                message.error = String(object.error);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Acknowledgement message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @static
                         * @param {ibc.core.channel.v1.Acknowledgement} message Acknowledgement
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Acknowledgement.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (message.result != null && message.hasOwnProperty("result")) {
                                object.result = options.bytes === String ? $util.base64.encode(message.result, 0, message.result.length) : options.bytes === Array ? Array.prototype.slice.call(message.result) : message.result;
                                if (options.oneofs)
                                    object.response = "result";
                            }
                            if (message.error != null && message.hasOwnProperty("error")) {
                                object.error = message.error;
                                if (options.oneofs)
                                    object.response = "error";
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Acknowledgement to JSON.
                         * @function toJSON
                         * @memberof ibc.core.channel.v1.Acknowledgement
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Acknowledgement.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Acknowledgement;
                    })();
    
                    return v1;
                })();
    
                return channel;
            })();
    
            core.client = (function() {
    
                /**
                 * Namespace client.
                 * @memberof ibc.core
                 * @namespace
                 */
                var client = {};
    
                client.v1 = (function() {
    
                    /**
                     * Namespace v1.
                     * @memberof ibc.core.client
                     * @namespace
                     */
                    var v1 = {};
    
                    v1.IdentifiedClientState = (function() {
    
                        /**
                         * Properties of an IdentifiedClientState.
                         * @memberof ibc.core.client.v1
                         * @interface IIdentifiedClientState
                         * @property {string|null} [client_id] IdentifiedClientState client_id
                         * @property {google.protobuf.IAny|null} [client_state] IdentifiedClientState client_state
                         */
    
                        /**
                         * Constructs a new IdentifiedClientState.
                         * @memberof ibc.core.client.v1
                         * @classdesc Represents an IdentifiedClientState.
                         * @implements IIdentifiedClientState
                         * @constructor
                         * @param {ibc.core.client.v1.IIdentifiedClientState=} [properties] Properties to set
                         */
                        function IdentifiedClientState(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * IdentifiedClientState client_id.
                         * @member {string} client_id
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @instance
                         */
                        IdentifiedClientState.prototype.client_id = "";
    
                        /**
                         * IdentifiedClientState client_state.
                         * @member {google.protobuf.IAny|null|undefined} client_state
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @instance
                         */
                        IdentifiedClientState.prototype.client_state = null;
    
                        /**
                         * Encodes the specified IdentifiedClientState message. Does not implicitly {@link ibc.core.client.v1.IdentifiedClientState.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @static
                         * @param {ibc.core.client.v1.IIdentifiedClientState} message IdentifiedClientState message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        IdentifiedClientState.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                            if (message.client_state != null && Object.hasOwnProperty.call(message, "client_state"))
                                $root.google.protobuf.Any.encode(message.client_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified IdentifiedClientState message, length delimited. Does not implicitly {@link ibc.core.client.v1.IdentifiedClientState.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @static
                         * @param {ibc.core.client.v1.IIdentifiedClientState} message IdentifiedClientState message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        IdentifiedClientState.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an IdentifiedClientState message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        IdentifiedClientState.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.IdentifiedClientState();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.client_id = reader.string();
                                    break;
                                case 2:
                                    message.client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an IdentifiedClientState message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        IdentifiedClientState.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an IdentifiedClientState message.
                         * @function verify
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        IdentifiedClientState.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.client_id != null && message.hasOwnProperty("client_id"))
                                if (!$util.isString(message.client_id))
                                    return "client_id: string expected";
                            if (message.client_state != null && message.hasOwnProperty("client_state")) {
                                var error = $root.google.protobuf.Any.verify(message.client_state);
                                if (error)
                                    return "client_state." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an IdentifiedClientState message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.client.v1.IdentifiedClientState} IdentifiedClientState
                         */
                        IdentifiedClientState.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.client.v1.IdentifiedClientState)
                                return object;
                            var message = new $root.ibc.core.client.v1.IdentifiedClientState();
                            if (object.client_id != null)
                                message.client_id = String(object.client_id);
                            if (object.client_state != null) {
                                if (typeof object.client_state !== "object")
                                    throw TypeError(".ibc.core.client.v1.IdentifiedClientState.client_state: object expected");
                                message.client_state = $root.google.protobuf.Any.fromObject(object.client_state);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an IdentifiedClientState message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @static
                         * @param {ibc.core.client.v1.IdentifiedClientState} message IdentifiedClientState
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        IdentifiedClientState.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.client_id = "";
                                object.client_state = null;
                            }
                            if (message.client_id != null && message.hasOwnProperty("client_id"))
                                object.client_id = message.client_id;
                            if (message.client_state != null && message.hasOwnProperty("client_state"))
                                object.client_state = $root.google.protobuf.Any.toObject(message.client_state, options);
                            return object;
                        };
    
                        /**
                         * Converts this IdentifiedClientState to JSON.
                         * @function toJSON
                         * @memberof ibc.core.client.v1.IdentifiedClientState
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        IdentifiedClientState.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return IdentifiedClientState;
                    })();
    
                    v1.ConsensusStateWithHeight = (function() {
    
                        /**
                         * Properties of a ConsensusStateWithHeight.
                         * @memberof ibc.core.client.v1
                         * @interface IConsensusStateWithHeight
                         * @property {ibc.core.client.v1.IHeight|null} [height] ConsensusStateWithHeight height
                         * @property {google.protobuf.IAny|null} [consensus_state] ConsensusStateWithHeight consensus_state
                         */
    
                        /**
                         * Constructs a new ConsensusStateWithHeight.
                         * @memberof ibc.core.client.v1
                         * @classdesc Represents a ConsensusStateWithHeight.
                         * @implements IConsensusStateWithHeight
                         * @constructor
                         * @param {ibc.core.client.v1.IConsensusStateWithHeight=} [properties] Properties to set
                         */
                        function ConsensusStateWithHeight(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ConsensusStateWithHeight height.
                         * @member {ibc.core.client.v1.IHeight|null|undefined} height
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @instance
                         */
                        ConsensusStateWithHeight.prototype.height = null;
    
                        /**
                         * ConsensusStateWithHeight consensus_state.
                         * @member {google.protobuf.IAny|null|undefined} consensus_state
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @instance
                         */
                        ConsensusStateWithHeight.prototype.consensus_state = null;
    
                        /**
                         * Encodes the specified ConsensusStateWithHeight message. Does not implicitly {@link ibc.core.client.v1.ConsensusStateWithHeight.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @static
                         * @param {ibc.core.client.v1.IConsensusStateWithHeight} message ConsensusStateWithHeight message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ConsensusStateWithHeight.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                                $root.ibc.core.client.v1.Height.encode(message.height, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.consensus_state != null && Object.hasOwnProperty.call(message, "consensus_state"))
                                $root.google.protobuf.Any.encode(message.consensus_state, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ConsensusStateWithHeight message, length delimited. Does not implicitly {@link ibc.core.client.v1.ConsensusStateWithHeight.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @static
                         * @param {ibc.core.client.v1.IConsensusStateWithHeight} message ConsensusStateWithHeight message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ConsensusStateWithHeight.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ConsensusStateWithHeight message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ConsensusStateWithHeight.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.ConsensusStateWithHeight();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.height = $root.ibc.core.client.v1.Height.decode(reader, reader.uint32());
                                    break;
                                case 2:
                                    message.consensus_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ConsensusStateWithHeight message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ConsensusStateWithHeight.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ConsensusStateWithHeight message.
                         * @function verify
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ConsensusStateWithHeight.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.height != null && message.hasOwnProperty("height")) {
                                var error = $root.ibc.core.client.v1.Height.verify(message.height);
                                if (error)
                                    return "height." + error;
                            }
                            if (message.consensus_state != null && message.hasOwnProperty("consensus_state")) {
                                var error = $root.google.protobuf.Any.verify(message.consensus_state);
                                if (error)
                                    return "consensus_state." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ConsensusStateWithHeight message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.client.v1.ConsensusStateWithHeight} ConsensusStateWithHeight
                         */
                        ConsensusStateWithHeight.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.client.v1.ConsensusStateWithHeight)
                                return object;
                            var message = new $root.ibc.core.client.v1.ConsensusStateWithHeight();
                            if (object.height != null) {
                                if (typeof object.height !== "object")
                                    throw TypeError(".ibc.core.client.v1.ConsensusStateWithHeight.height: object expected");
                                message.height = $root.ibc.core.client.v1.Height.fromObject(object.height);
                            }
                            if (object.consensus_state != null) {
                                if (typeof object.consensus_state !== "object")
                                    throw TypeError(".ibc.core.client.v1.ConsensusStateWithHeight.consensus_state: object expected");
                                message.consensus_state = $root.google.protobuf.Any.fromObject(object.consensus_state);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ConsensusStateWithHeight message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @static
                         * @param {ibc.core.client.v1.ConsensusStateWithHeight} message ConsensusStateWithHeight
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ConsensusStateWithHeight.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.height = null;
                                object.consensus_state = null;
                            }
                            if (message.height != null && message.hasOwnProperty("height"))
                                object.height = $root.ibc.core.client.v1.Height.toObject(message.height, options);
                            if (message.consensus_state != null && message.hasOwnProperty("consensus_state"))
                                object.consensus_state = $root.google.protobuf.Any.toObject(message.consensus_state, options);
                            return object;
                        };
    
                        /**
                         * Converts this ConsensusStateWithHeight to JSON.
                         * @function toJSON
                         * @memberof ibc.core.client.v1.ConsensusStateWithHeight
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ConsensusStateWithHeight.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ConsensusStateWithHeight;
                    })();
    
                    v1.ClientConsensusStates = (function() {
    
                        /**
                         * Properties of a ClientConsensusStates.
                         * @memberof ibc.core.client.v1
                         * @interface IClientConsensusStates
                         * @property {string|null} [client_id] ClientConsensusStates client_id
                         * @property {Array.<ibc.core.client.v1.IConsensusStateWithHeight>|null} [consensus_states] ClientConsensusStates consensus_states
                         */
    
                        /**
                         * Constructs a new ClientConsensusStates.
                         * @memberof ibc.core.client.v1
                         * @classdesc Represents a ClientConsensusStates.
                         * @implements IClientConsensusStates
                         * @constructor
                         * @param {ibc.core.client.v1.IClientConsensusStates=} [properties] Properties to set
                         */
                        function ClientConsensusStates(properties) {
                            this.consensus_states = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClientConsensusStates client_id.
                         * @member {string} client_id
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @instance
                         */
                        ClientConsensusStates.prototype.client_id = "";
    
                        /**
                         * ClientConsensusStates consensus_states.
                         * @member {Array.<ibc.core.client.v1.IConsensusStateWithHeight>} consensus_states
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @instance
                         */
                        ClientConsensusStates.prototype.consensus_states = $util.emptyArray;
    
                        /**
                         * Encodes the specified ClientConsensusStates message. Does not implicitly {@link ibc.core.client.v1.ClientConsensusStates.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @static
                         * @param {ibc.core.client.v1.IClientConsensusStates} message ClientConsensusStates message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClientConsensusStates.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.client_id != null && Object.hasOwnProperty.call(message, "client_id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.client_id);
                            if (message.consensus_states != null && message.consensus_states.length)
                                for (var i = 0; i < message.consensus_states.length; ++i)
                                    $root.ibc.core.client.v1.ConsensusStateWithHeight.encode(message.consensus_states[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClientConsensusStates message, length delimited. Does not implicitly {@link ibc.core.client.v1.ClientConsensusStates.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @static
                         * @param {ibc.core.client.v1.IClientConsensusStates} message ClientConsensusStates message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClientConsensusStates.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClientConsensusStates message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClientConsensusStates.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.ClientConsensusStates();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.client_id = reader.string();
                                    break;
                                case 2:
                                    if (!(message.consensus_states && message.consensus_states.length))
                                        message.consensus_states = [];
                                    message.consensus_states.push($root.ibc.core.client.v1.ConsensusStateWithHeight.decode(reader, reader.uint32()));
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClientConsensusStates message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClientConsensusStates.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClientConsensusStates message.
                         * @function verify
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClientConsensusStates.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.client_id != null && message.hasOwnProperty("client_id"))
                                if (!$util.isString(message.client_id))
                                    return "client_id: string expected";
                            if (message.consensus_states != null && message.hasOwnProperty("consensus_states")) {
                                if (!Array.isArray(message.consensus_states))
                                    return "consensus_states: array expected";
                                for (var i = 0; i < message.consensus_states.length; ++i) {
                                    var error = $root.ibc.core.client.v1.ConsensusStateWithHeight.verify(message.consensus_states[i]);
                                    if (error)
                                        return "consensus_states." + error;
                                }
                            }
                            return null;
                        };
    
                        /**
                         * Creates a ClientConsensusStates message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.client.v1.ClientConsensusStates} ClientConsensusStates
                         */
                        ClientConsensusStates.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.client.v1.ClientConsensusStates)
                                return object;
                            var message = new $root.ibc.core.client.v1.ClientConsensusStates();
                            if (object.client_id != null)
                                message.client_id = String(object.client_id);
                            if (object.consensus_states) {
                                if (!Array.isArray(object.consensus_states))
                                    throw TypeError(".ibc.core.client.v1.ClientConsensusStates.consensus_states: array expected");
                                message.consensus_states = [];
                                for (var i = 0; i < object.consensus_states.length; ++i) {
                                    if (typeof object.consensus_states[i] !== "object")
                                        throw TypeError(".ibc.core.client.v1.ClientConsensusStates.consensus_states: object expected");
                                    message.consensus_states[i] = $root.ibc.core.client.v1.ConsensusStateWithHeight.fromObject(object.consensus_states[i]);
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClientConsensusStates message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @static
                         * @param {ibc.core.client.v1.ClientConsensusStates} message ClientConsensusStates
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClientConsensusStates.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.consensus_states = [];
                            if (options.defaults)
                                object.client_id = "";
                            if (message.client_id != null && message.hasOwnProperty("client_id"))
                                object.client_id = message.client_id;
                            if (message.consensus_states && message.consensus_states.length) {
                                object.consensus_states = [];
                                for (var j = 0; j < message.consensus_states.length; ++j)
                                    object.consensus_states[j] = $root.ibc.core.client.v1.ConsensusStateWithHeight.toObject(message.consensus_states[j], options);
                            }
                            return object;
                        };
    
                        /**
                         * Converts this ClientConsensusStates to JSON.
                         * @function toJSON
                         * @memberof ibc.core.client.v1.ClientConsensusStates
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClientConsensusStates.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ClientConsensusStates;
                    })();
    
                    v1.ClientUpdateProposal = (function() {
    
                        /**
                         * Properties of a ClientUpdateProposal.
                         * @memberof ibc.core.client.v1
                         * @interface IClientUpdateProposal
                         * @property {string|null} [title] ClientUpdateProposal title
                         * @property {string|null} [description] ClientUpdateProposal description
                         * @property {string|null} [subject_client_id] ClientUpdateProposal subject_client_id
                         * @property {string|null} [substitute_client_id] ClientUpdateProposal substitute_client_id
                         */
    
                        /**
                         * Constructs a new ClientUpdateProposal.
                         * @memberof ibc.core.client.v1
                         * @classdesc Represents a ClientUpdateProposal.
                         * @implements IClientUpdateProposal
                         * @constructor
                         * @param {ibc.core.client.v1.IClientUpdateProposal=} [properties] Properties to set
                         */
                        function ClientUpdateProposal(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * ClientUpdateProposal title.
                         * @member {string} title
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @instance
                         */
                        ClientUpdateProposal.prototype.title = "";
    
                        /**
                         * ClientUpdateProposal description.
                         * @member {string} description
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @instance
                         */
                        ClientUpdateProposal.prototype.description = "";
    
                        /**
                         * ClientUpdateProposal subject_client_id.
                         * @member {string} subject_client_id
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @instance
                         */
                        ClientUpdateProposal.prototype.subject_client_id = "";
    
                        /**
                         * ClientUpdateProposal substitute_client_id.
                         * @member {string} substitute_client_id
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @instance
                         */
                        ClientUpdateProposal.prototype.substitute_client_id = "";
    
                        /**
                         * Encodes the specified ClientUpdateProposal message. Does not implicitly {@link ibc.core.client.v1.ClientUpdateProposal.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @static
                         * @param {ibc.core.client.v1.IClientUpdateProposal} message ClientUpdateProposal message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClientUpdateProposal.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                            if (message.subject_client_id != null && Object.hasOwnProperty.call(message, "subject_client_id"))
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.subject_client_id);
                            if (message.substitute_client_id != null && Object.hasOwnProperty.call(message, "substitute_client_id"))
                                writer.uint32(/* id 4, wireType 2 =*/34).string(message.substitute_client_id);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified ClientUpdateProposal message, length delimited. Does not implicitly {@link ibc.core.client.v1.ClientUpdateProposal.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @static
                         * @param {ibc.core.client.v1.IClientUpdateProposal} message ClientUpdateProposal message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        ClientUpdateProposal.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a ClientUpdateProposal message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClientUpdateProposal.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.ClientUpdateProposal();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.title = reader.string();
                                    break;
                                case 2:
                                    message.description = reader.string();
                                    break;
                                case 3:
                                    message.subject_client_id = reader.string();
                                    break;
                                case 4:
                                    message.substitute_client_id = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a ClientUpdateProposal message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        ClientUpdateProposal.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a ClientUpdateProposal message.
                         * @function verify
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        ClientUpdateProposal.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.subject_client_id != null && message.hasOwnProperty("subject_client_id"))
                                if (!$util.isString(message.subject_client_id))
                                    return "subject_client_id: string expected";
                            if (message.substitute_client_id != null && message.hasOwnProperty("substitute_client_id"))
                                if (!$util.isString(message.substitute_client_id))
                                    return "substitute_client_id: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a ClientUpdateProposal message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.client.v1.ClientUpdateProposal} ClientUpdateProposal
                         */
                        ClientUpdateProposal.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.client.v1.ClientUpdateProposal)
                                return object;
                            var message = new $root.ibc.core.client.v1.ClientUpdateProposal();
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.subject_client_id != null)
                                message.subject_client_id = String(object.subject_client_id);
                            if (object.substitute_client_id != null)
                                message.substitute_client_id = String(object.substitute_client_id);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a ClientUpdateProposal message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @static
                         * @param {ibc.core.client.v1.ClientUpdateProposal} message ClientUpdateProposal
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        ClientUpdateProposal.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.title = "";
                                object.description = "";
                                object.subject_client_id = "";
                                object.substitute_client_id = "";
                            }
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.subject_client_id != null && message.hasOwnProperty("subject_client_id"))
                                object.subject_client_id = message.subject_client_id;
                            if (message.substitute_client_id != null && message.hasOwnProperty("substitute_client_id"))
                                object.substitute_client_id = message.substitute_client_id;
                            return object;
                        };
    
                        /**
                         * Converts this ClientUpdateProposal to JSON.
                         * @function toJSON
                         * @memberof ibc.core.client.v1.ClientUpdateProposal
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        ClientUpdateProposal.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return ClientUpdateProposal;
                    })();
    
                    v1.UpgradeProposal = (function() {
    
                        /**
                         * Properties of an UpgradeProposal.
                         * @memberof ibc.core.client.v1
                         * @interface IUpgradeProposal
                         * @property {string|null} [title] UpgradeProposal title
                         * @property {string|null} [description] UpgradeProposal description
                         * @property {cosmos.upgrade.v1beta1.IPlan|null} [plan] UpgradeProposal plan
                         * @property {google.protobuf.IAny|null} [upgraded_client_state] UpgradeProposal upgraded_client_state
                         */
    
                        /**
                         * Constructs a new UpgradeProposal.
                         * @memberof ibc.core.client.v1
                         * @classdesc Represents an UpgradeProposal.
                         * @implements IUpgradeProposal
                         * @constructor
                         * @param {ibc.core.client.v1.IUpgradeProposal=} [properties] Properties to set
                         */
                        function UpgradeProposal(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * UpgradeProposal title.
                         * @member {string} title
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @instance
                         */
                        UpgradeProposal.prototype.title = "";
    
                        /**
                         * UpgradeProposal description.
                         * @member {string} description
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @instance
                         */
                        UpgradeProposal.prototype.description = "";
    
                        /**
                         * UpgradeProposal plan.
                         * @member {cosmos.upgrade.v1beta1.IPlan|null|undefined} plan
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @instance
                         */
                        UpgradeProposal.prototype.plan = null;
    
                        /**
                         * UpgradeProposal upgraded_client_state.
                         * @member {google.protobuf.IAny|null|undefined} upgraded_client_state
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @instance
                         */
                        UpgradeProposal.prototype.upgraded_client_state = null;
    
                        /**
                         * Encodes the specified UpgradeProposal message. Does not implicitly {@link ibc.core.client.v1.UpgradeProposal.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @static
                         * @param {ibc.core.client.v1.IUpgradeProposal} message UpgradeProposal message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpgradeProposal.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                            if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                            if (message.plan != null && Object.hasOwnProperty.call(message, "plan"))
                                $root.cosmos.upgrade.v1beta1.Plan.encode(message.plan, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                            if (message.upgraded_client_state != null && Object.hasOwnProperty.call(message, "upgraded_client_state"))
                                $root.google.protobuf.Any.encode(message.upgraded_client_state, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified UpgradeProposal message, length delimited. Does not implicitly {@link ibc.core.client.v1.UpgradeProposal.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @static
                         * @param {ibc.core.client.v1.IUpgradeProposal} message UpgradeProposal message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        UpgradeProposal.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an UpgradeProposal message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.client.v1.UpgradeProposal} UpgradeProposal
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpgradeProposal.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.UpgradeProposal();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.title = reader.string();
                                    break;
                                case 2:
                                    message.description = reader.string();
                                    break;
                                case 3:
                                    message.plan = $root.cosmos.upgrade.v1beta1.Plan.decode(reader, reader.uint32());
                                    break;
                                case 4:
                                    message.upgraded_client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an UpgradeProposal message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.client.v1.UpgradeProposal} UpgradeProposal
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        UpgradeProposal.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an UpgradeProposal message.
                         * @function verify
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        UpgradeProposal.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.title != null && message.hasOwnProperty("title"))
                                if (!$util.isString(message.title))
                                    return "title: string expected";
                            if (message.description != null && message.hasOwnProperty("description"))
                                if (!$util.isString(message.description))
                                    return "description: string expected";
                            if (message.plan != null && message.hasOwnProperty("plan")) {
                                var error = $root.cosmos.upgrade.v1beta1.Plan.verify(message.plan);
                                if (error)
                                    return "plan." + error;
                            }
                            if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state")) {
                                var error = $root.google.protobuf.Any.verify(message.upgraded_client_state);
                                if (error)
                                    return "upgraded_client_state." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates an UpgradeProposal message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.client.v1.UpgradeProposal} UpgradeProposal
                         */
                        UpgradeProposal.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.client.v1.UpgradeProposal)
                                return object;
                            var message = new $root.ibc.core.client.v1.UpgradeProposal();
                            if (object.title != null)
                                message.title = String(object.title);
                            if (object.description != null)
                                message.description = String(object.description);
                            if (object.plan != null) {
                                if (typeof object.plan !== "object")
                                    throw TypeError(".ibc.core.client.v1.UpgradeProposal.plan: object expected");
                                message.plan = $root.cosmos.upgrade.v1beta1.Plan.fromObject(object.plan);
                            }
                            if (object.upgraded_client_state != null) {
                                if (typeof object.upgraded_client_state !== "object")
                                    throw TypeError(".ibc.core.client.v1.UpgradeProposal.upgraded_client_state: object expected");
                                message.upgraded_client_state = $root.google.protobuf.Any.fromObject(object.upgraded_client_state);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an UpgradeProposal message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @static
                         * @param {ibc.core.client.v1.UpgradeProposal} message UpgradeProposal
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        UpgradeProposal.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.title = "";
                                object.description = "";
                                object.plan = null;
                                object.upgraded_client_state = null;
                            }
                            if (message.title != null && message.hasOwnProperty("title"))
                                object.title = message.title;
                            if (message.description != null && message.hasOwnProperty("description"))
                                object.description = message.description;
                            if (message.plan != null && message.hasOwnProperty("plan"))
                                object.plan = $root.cosmos.upgrade.v1beta1.Plan.toObject(message.plan, options);
                            if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state"))
                                object.upgraded_client_state = $root.google.protobuf.Any.toObject(message.upgraded_client_state, options);
                            return object;
                        };
    
                        /**
                         * Converts this UpgradeProposal to JSON.
                         * @function toJSON
                         * @memberof ibc.core.client.v1.UpgradeProposal
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        UpgradeProposal.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return UpgradeProposal;
                    })();
    
                    v1.Height = (function() {
    
                        /**
                         * Properties of an Height.
                         * @memberof ibc.core.client.v1
                         * @interface IHeight
                         * @property {Long|null} [revision_number] Height revision_number
                         * @property {Long|null} [revision_height] Height revision_height
                         */
    
                        /**
                         * Constructs a new Height.
                         * @memberof ibc.core.client.v1
                         * @classdesc Represents an Height.
                         * @implements IHeight
                         * @constructor
                         * @param {ibc.core.client.v1.IHeight=} [properties] Properties to set
                         */
                        function Height(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Height revision_number.
                         * @member {Long} revision_number
                         * @memberof ibc.core.client.v1.Height
                         * @instance
                         */
                        Height.prototype.revision_number = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                        /**
                         * Height revision_height.
                         * @member {Long} revision_height
                         * @memberof ibc.core.client.v1.Height
                         * @instance
                         */
                        Height.prototype.revision_height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                        /**
                         * Encodes the specified Height message. Does not implicitly {@link ibc.core.client.v1.Height.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.client.v1.Height
                         * @static
                         * @param {ibc.core.client.v1.IHeight} message Height message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Height.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.revision_number != null && Object.hasOwnProperty.call(message, "revision_number"))
                                writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.revision_number);
                            if (message.revision_height != null && Object.hasOwnProperty.call(message, "revision_height"))
                                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.revision_height);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Height message, length delimited. Does not implicitly {@link ibc.core.client.v1.Height.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.client.v1.Height
                         * @static
                         * @param {ibc.core.client.v1.IHeight} message Height message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Height.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes an Height message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.client.v1.Height
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.client.v1.Height} Height
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Height.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.Height();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.revision_number = reader.uint64();
                                    break;
                                case 2:
                                    message.revision_height = reader.uint64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes an Height message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.client.v1.Height
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.client.v1.Height} Height
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Height.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies an Height message.
                         * @function verify
                         * @memberof ibc.core.client.v1.Height
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Height.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                                if (!$util.isInteger(message.revision_number) && !(message.revision_number && $util.isInteger(message.revision_number.low) && $util.isInteger(message.revision_number.high)))
                                    return "revision_number: integer|Long expected";
                            if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                                if (!$util.isInteger(message.revision_height) && !(message.revision_height && $util.isInteger(message.revision_height.low) && $util.isInteger(message.revision_height.high)))
                                    return "revision_height: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates an Height message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.client.v1.Height
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.client.v1.Height} Height
                         */
                        Height.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.client.v1.Height)
                                return object;
                            var message = new $root.ibc.core.client.v1.Height();
                            if (object.revision_number != null)
                                if ($util.Long)
                                    (message.revision_number = $util.Long.fromValue(object.revision_number)).unsigned = true;
                                else if (typeof object.revision_number === "string")
                                    message.revision_number = parseInt(object.revision_number, 10);
                                else if (typeof object.revision_number === "number")
                                    message.revision_number = object.revision_number;
                                else if (typeof object.revision_number === "object")
                                    message.revision_number = new $util.LongBits(object.revision_number.low >>> 0, object.revision_number.high >>> 0).toNumber(true);
                            if (object.revision_height != null)
                                if ($util.Long)
                                    (message.revision_height = $util.Long.fromValue(object.revision_height)).unsigned = true;
                                else if (typeof object.revision_height === "string")
                                    message.revision_height = parseInt(object.revision_height, 10);
                                else if (typeof object.revision_height === "number")
                                    message.revision_height = object.revision_height;
                                else if (typeof object.revision_height === "object")
                                    message.revision_height = new $util.LongBits(object.revision_height.low >>> 0, object.revision_height.high >>> 0).toNumber(true);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from an Height message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.client.v1.Height
                         * @static
                         * @param {ibc.core.client.v1.Height} message Height
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Height.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, true);
                                    object.revision_number = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.revision_number = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, true);
                                    object.revision_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.revision_height = options.longs === String ? "0" : 0;
                            }
                            if (message.revision_number != null && message.hasOwnProperty("revision_number"))
                                if (typeof message.revision_number === "number")
                                    object.revision_number = options.longs === String ? String(message.revision_number) : message.revision_number;
                                else
                                    object.revision_number = options.longs === String ? $util.Long.prototype.toString.call(message.revision_number) : options.longs === Number ? new $util.LongBits(message.revision_number.low >>> 0, message.revision_number.high >>> 0).toNumber(true) : message.revision_number;
                            if (message.revision_height != null && message.hasOwnProperty("revision_height"))
                                if (typeof message.revision_height === "number")
                                    object.revision_height = options.longs === String ? String(message.revision_height) : message.revision_height;
                                else
                                    object.revision_height = options.longs === String ? $util.Long.prototype.toString.call(message.revision_height) : options.longs === Number ? new $util.LongBits(message.revision_height.low >>> 0, message.revision_height.high >>> 0).toNumber(true) : message.revision_height;
                            return object;
                        };
    
                        /**
                         * Converts this Height to JSON.
                         * @function toJSON
                         * @memberof ibc.core.client.v1.Height
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Height.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Height;
                    })();
    
                    v1.Params = (function() {
    
                        /**
                         * Properties of a Params.
                         * @memberof ibc.core.client.v1
                         * @interface IParams
                         * @property {Array.<string>|null} [allowed_clients] Params allowed_clients
                         */
    
                        /**
                         * Constructs a new Params.
                         * @memberof ibc.core.client.v1
                         * @classdesc Represents a Params.
                         * @implements IParams
                         * @constructor
                         * @param {ibc.core.client.v1.IParams=} [properties] Properties to set
                         */
                        function Params(properties) {
                            this.allowed_clients = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Params allowed_clients.
                         * @member {Array.<string>} allowed_clients
                         * @memberof ibc.core.client.v1.Params
                         * @instance
                         */
                        Params.prototype.allowed_clients = $util.emptyArray;
    
                        /**
                         * Encodes the specified Params message. Does not implicitly {@link ibc.core.client.v1.Params.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.core.client.v1.Params
                         * @static
                         * @param {ibc.core.client.v1.IParams} message Params message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Params.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.allowed_clients != null && message.allowed_clients.length)
                                for (var i = 0; i < message.allowed_clients.length; ++i)
                                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.allowed_clients[i]);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Params message, length delimited. Does not implicitly {@link ibc.core.client.v1.Params.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.core.client.v1.Params
                         * @static
                         * @param {ibc.core.client.v1.IParams} message Params message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Params.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Params message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.core.client.v1.Params
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.core.client.v1.Params} Params
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Params.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.core.client.v1.Params();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.allowed_clients && message.allowed_clients.length))
                                        message.allowed_clients = [];
                                    message.allowed_clients.push(reader.string());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Params message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.core.client.v1.Params
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.core.client.v1.Params} Params
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Params.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Params message.
                         * @function verify
                         * @memberof ibc.core.client.v1.Params
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Params.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.allowed_clients != null && message.hasOwnProperty("allowed_clients")) {
                                if (!Array.isArray(message.allowed_clients))
                                    return "allowed_clients: array expected";
                                for (var i = 0; i < message.allowed_clients.length; ++i)
                                    if (!$util.isString(message.allowed_clients[i]))
                                        return "allowed_clients: string[] expected";
                            }
                            return null;
                        };
    
                        /**
                         * Creates a Params message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.core.client.v1.Params
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.core.client.v1.Params} Params
                         */
                        Params.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.core.client.v1.Params)
                                return object;
                            var message = new $root.ibc.core.client.v1.Params();
                            if (object.allowed_clients) {
                                if (!Array.isArray(object.allowed_clients))
                                    throw TypeError(".ibc.core.client.v1.Params.allowed_clients: array expected");
                                message.allowed_clients = [];
                                for (var i = 0; i < object.allowed_clients.length; ++i)
                                    message.allowed_clients[i] = String(object.allowed_clients[i]);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Params message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.core.client.v1.Params
                         * @static
                         * @param {ibc.core.client.v1.Params} message Params
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Params.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.allowed_clients = [];
                            if (message.allowed_clients && message.allowed_clients.length) {
                                object.allowed_clients = [];
                                for (var j = 0; j < message.allowed_clients.length; ++j)
                                    object.allowed_clients[j] = message.allowed_clients[j];
                            }
                            return object;
                        };
    
                        /**
                         * Converts this Params to JSON.
                         * @function toJSON
                         * @memberof ibc.core.client.v1.Params
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Params.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Params;
                    })();
    
                    return v1;
                })();
    
                return client;
            })();
    
            return core;
        })();
    
        ibc.applications = (function() {
    
            /**
             * Namespace applications.
             * @memberof ibc
             * @namespace
             */
            var applications = {};
    
            applications.transfer = (function() {
    
                /**
                 * Namespace transfer.
                 * @memberof ibc.applications
                 * @namespace
                 */
                var transfer = {};
    
                transfer.v1 = (function() {
    
                    /**
                     * Namespace v1.
                     * @memberof ibc.applications.transfer
                     * @namespace
                     */
                    var v1 = {};
    
                    v1.Query = (function() {
    
                        /**
                         * Constructs a new Query service.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a Query
                         * @extends $protobuf.rpc.Service
                         * @constructor
                         * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                         * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                         * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                         */
                        function Query(rpcImpl, requestDelimited, responseDelimited) {
                            $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                        }
    
                        (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                        /**
                         * Callback as used by {@link ibc.applications.transfer.v1.Query#denomTrace}.
                         * @memberof ibc.applications.transfer.v1.Query
                         * @typedef DenomTraceCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {ibc.applications.transfer.v1.QueryDenomTraceResponse} [response] QueryDenomTraceResponse
                         */
    
                        /**
                         * Calls DenomTrace.
                         * @function denomTrace
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} request QueryDenomTraceRequest message or plain object
                         * @param {ibc.applications.transfer.v1.Query.DenomTraceCallback} callback Node-style callback called with the error, if any, and QueryDenomTraceResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(Query.prototype.denomTrace = function denomTrace(request, callback) {
                            return this.rpcCall(denomTrace, $root.ibc.applications.transfer.v1.QueryDenomTraceRequest, $root.ibc.applications.transfer.v1.QueryDenomTraceResponse, request, callback);
                        }, "name", { value: "DenomTrace" });
    
                        /**
                         * Calls DenomTrace.
                         * @function denomTrace
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} request QueryDenomTraceRequest message or plain object
                         * @returns {Promise<ibc.applications.transfer.v1.QueryDenomTraceResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link ibc.applications.transfer.v1.Query#denomTraces}.
                         * @memberof ibc.applications.transfer.v1.Query
                         * @typedef DenomTracesCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {ibc.applications.transfer.v1.QueryDenomTracesResponse} [response] QueryDenomTracesResponse
                         */
    
                        /**
                         * Calls DenomTraces.
                         * @function denomTraces
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} request QueryDenomTracesRequest message or plain object
                         * @param {ibc.applications.transfer.v1.Query.DenomTracesCallback} callback Node-style callback called with the error, if any, and QueryDenomTracesResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(Query.prototype.denomTraces = function denomTraces(request, callback) {
                            return this.rpcCall(denomTraces, $root.ibc.applications.transfer.v1.QueryDenomTracesRequest, $root.ibc.applications.transfer.v1.QueryDenomTracesResponse, request, callback);
                        }, "name", { value: "DenomTraces" });
    
                        /**
                         * Calls DenomTraces.
                         * @function denomTraces
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} request QueryDenomTracesRequest message or plain object
                         * @returns {Promise<ibc.applications.transfer.v1.QueryDenomTracesResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link ibc.applications.transfer.v1.Query#params}.
                         * @memberof ibc.applications.transfer.v1.Query
                         * @typedef ParamsCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {ibc.applications.transfer.v1.QueryParamsResponse} [response] QueryParamsResponse
                         */
    
                        /**
                         * Calls Params.
                         * @function params
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                         * @param {ibc.applications.transfer.v1.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(Query.prototype.params = function params(request, callback) {
                            return this.rpcCall(params, $root.ibc.applications.transfer.v1.QueryParamsRequest, $root.ibc.applications.transfer.v1.QueryParamsResponse, request, callback);
                        }, "name", { value: "Params" });
    
                        /**
                         * Calls Params.
                         * @function params
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                         * @returns {Promise<ibc.applications.transfer.v1.QueryParamsResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link ibc.applications.transfer.v1.Query#denomHash}.
                         * @memberof ibc.applications.transfer.v1.Query
                         * @typedef DenomHashCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {ibc.applications.transfer.v1.QueryDenomHashResponse} [response] QueryDenomHashResponse
                         */
    
                        /**
                         * Calls DenomHash.
                         * @function denomHash
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryDenomHashRequest} request QueryDenomHashRequest message or plain object
                         * @param {ibc.applications.transfer.v1.Query.DenomHashCallback} callback Node-style callback called with the error, if any, and QueryDenomHashResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(Query.prototype.denomHash = function denomHash(request, callback) {
                            return this.rpcCall(denomHash, $root.ibc.applications.transfer.v1.QueryDenomHashRequest, $root.ibc.applications.transfer.v1.QueryDenomHashResponse, request, callback);
                        }, "name", { value: "DenomHash" });
    
                        /**
                         * Calls DenomHash.
                         * @function denomHash
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryDenomHashRequest} request QueryDenomHashRequest message or plain object
                         * @returns {Promise<ibc.applications.transfer.v1.QueryDenomHashResponse>} Promise
                         * @variation 2
                         */
    
                        /**
                         * Callback as used by {@link ibc.applications.transfer.v1.Query#escrowAddress}.
                         * @memberof ibc.applications.transfer.v1.Query
                         * @typedef EscrowAddressCallback
                         * @type {function}
                         * @param {Error|null} error Error, if any
                         * @param {ibc.applications.transfer.v1.QueryEscrowAddressResponse} [response] QueryEscrowAddressResponse
                         */
    
                        /**
                         * Calls EscrowAddress.
                         * @function escrowAddress
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryEscrowAddressRequest} request QueryEscrowAddressRequest message or plain object
                         * @param {ibc.applications.transfer.v1.Query.EscrowAddressCallback} callback Node-style callback called with the error, if any, and QueryEscrowAddressResponse
                         * @returns {undefined}
                         * @variation 1
                         */
                        Object.defineProperty(Query.prototype.escrowAddress = function escrowAddress(request, callback) {
                            return this.rpcCall(escrowAddress, $root.ibc.applications.transfer.v1.QueryEscrowAddressRequest, $root.ibc.applications.transfer.v1.QueryEscrowAddressResponse, request, callback);
                        }, "name", { value: "EscrowAddress" });
    
                        /**
                         * Calls EscrowAddress.
                         * @function escrowAddress
                         * @memberof ibc.applications.transfer.v1.Query
                         * @instance
                         * @param {ibc.applications.transfer.v1.IQueryEscrowAddressRequest} request QueryEscrowAddressRequest message or plain object
                         * @returns {Promise<ibc.applications.transfer.v1.QueryEscrowAddressResponse>} Promise
                         * @variation 2
                         */
    
                        return Query;
                    })();
    
                    v1.QueryDenomTraceRequest = (function() {
    
                        /**
                         * Properties of a QueryDenomTraceRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryDenomTraceRequest
                         * @property {string|null} [hash] QueryDenomTraceRequest hash
                         */
    
                        /**
                         * Constructs a new QueryDenomTraceRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryDenomTraceRequest.
                         * @implements IQueryDenomTraceRequest
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest=} [properties] Properties to set
                         */
                        function QueryDenomTraceRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryDenomTraceRequest hash.
                         * @member {string} hash
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                         * @instance
                         */
                        QueryDenomTraceRequest.prototype.hash = "";
    
                        /**
                         * Encodes the specified QueryDenomTraceRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceRequest.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} message QueryDenomTraceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomTraceRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryDenomTraceRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomTraceRequest} message QueryDenomTraceRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomTraceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryDenomTraceRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomTraceRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTraceRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.hash = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryDenomTraceRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomTraceRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryDenomTraceRequest message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryDenomTraceRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.hash != null && message.hasOwnProperty("hash"))
                                if (!$util.isString(message.hash))
                                    return "hash: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a QueryDenomTraceRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryDenomTraceRequest} QueryDenomTraceRequest
                         */
                        QueryDenomTraceRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTraceRequest)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.QueryDenomTraceRequest();
                            if (object.hash != null)
                                message.hash = String(object.hash);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryDenomTraceRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryDenomTraceRequest} message QueryDenomTraceRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryDenomTraceRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.hash = "";
                            if (message.hash != null && message.hasOwnProperty("hash"))
                                object.hash = message.hash;
                            return object;
                        };
    
                        /**
                         * Converts this QueryDenomTraceRequest to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryDenomTraceRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryDenomTraceRequest;
                    })();
    
                    v1.QueryDenomTraceResponse = (function() {
    
                        /**
                         * Properties of a QueryDenomTraceResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryDenomTraceResponse
                         * @property {ibc.applications.transfer.v1.IDenomTrace|null} [denom_trace] QueryDenomTraceResponse denom_trace
                         */
    
                        /**
                         * Constructs a new QueryDenomTraceResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryDenomTraceResponse.
                         * @implements IQueryDenomTraceResponse
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse=} [properties] Properties to set
                         */
                        function QueryDenomTraceResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryDenomTraceResponse denom_trace.
                         * @member {ibc.applications.transfer.v1.IDenomTrace|null|undefined} denom_trace
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                         * @instance
                         */
                        QueryDenomTraceResponse.prototype.denom_trace = null;
    
                        /**
                         * Encodes the specified QueryDenomTraceResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceResponse.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse} message QueryDenomTraceResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomTraceResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.denom_trace != null && Object.hasOwnProperty.call(message, "denom_trace"))
                                $root.ibc.applications.transfer.v1.DenomTrace.encode(message.denom_trace, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryDenomTraceResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTraceResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomTraceResponse} message QueryDenomTraceResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomTraceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryDenomTraceResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomTraceResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTraceResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryDenomTraceResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomTraceResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryDenomTraceResponse message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryDenomTraceResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.denom_trace != null && message.hasOwnProperty("denom_trace")) {
                                var error = $root.ibc.applications.transfer.v1.DenomTrace.verify(message.denom_trace);
                                if (error)
                                    return "denom_trace." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a QueryDenomTraceResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryDenomTraceResponse} QueryDenomTraceResponse
                         */
                        QueryDenomTraceResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTraceResponse)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.QueryDenomTraceResponse();
                            if (object.denom_trace != null) {
                                if (typeof object.denom_trace !== "object")
                                    throw TypeError(".ibc.applications.transfer.v1.QueryDenomTraceResponse.denom_trace: object expected");
                                message.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.fromObject(object.denom_trace);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryDenomTraceResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryDenomTraceResponse} message QueryDenomTraceResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryDenomTraceResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.denom_trace = null;
                            if (message.denom_trace != null && message.hasOwnProperty("denom_trace"))
                                object.denom_trace = $root.ibc.applications.transfer.v1.DenomTrace.toObject(message.denom_trace, options);
                            return object;
                        };
    
                        /**
                         * Converts this QueryDenomTraceResponse to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryDenomTraceResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryDenomTraceResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryDenomTraceResponse;
                    })();
    
                    v1.QueryDenomTracesRequest = (function() {
    
                        /**
                         * Properties of a QueryDenomTracesRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryDenomTracesRequest
                         * @property {cosmos.base.query.v1beta1.IPageRequest|null} [pagination] QueryDenomTracesRequest pagination
                         */
    
                        /**
                         * Constructs a new QueryDenomTracesRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryDenomTracesRequest.
                         * @implements IQueryDenomTracesRequest
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest=} [properties] Properties to set
                         */
                        function QueryDenomTracesRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryDenomTracesRequest pagination.
                         * @member {cosmos.base.query.v1beta1.IPageRequest|null|undefined} pagination
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                         * @instance
                         */
                        QueryDenomTracesRequest.prototype.pagination = null;
    
                        /**
                         * Encodes the specified QueryDenomTracesRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesRequest.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} message QueryDenomTracesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomTracesRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                                $root.cosmos.base.query.v1beta1.PageRequest.encode(message.pagination, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryDenomTracesRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomTracesRequest} message QueryDenomTracesRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomTracesRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryDenomTracesRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomTracesRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTracesRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryDenomTracesRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomTracesRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryDenomTracesRequest message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryDenomTracesRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.pagination != null && message.hasOwnProperty("pagination")) {
                                var error = $root.cosmos.base.query.v1beta1.PageRequest.verify(message.pagination);
                                if (error)
                                    return "pagination." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a QueryDenomTracesRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryDenomTracesRequest} QueryDenomTracesRequest
                         */
                        QueryDenomTracesRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTracesRequest)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.QueryDenomTracesRequest();
                            if (object.pagination != null) {
                                if (typeof object.pagination !== "object")
                                    throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesRequest.pagination: object expected");
                                message.pagination = $root.cosmos.base.query.v1beta1.PageRequest.fromObject(object.pagination);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryDenomTracesRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryDenomTracesRequest} message QueryDenomTracesRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryDenomTracesRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.pagination = null;
                            if (message.pagination != null && message.hasOwnProperty("pagination"))
                                object.pagination = $root.cosmos.base.query.v1beta1.PageRequest.toObject(message.pagination, options);
                            return object;
                        };
    
                        /**
                         * Converts this QueryDenomTracesRequest to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryDenomTracesRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryDenomTracesRequest;
                    })();
    
                    v1.QueryDenomTracesResponse = (function() {
    
                        /**
                         * Properties of a QueryDenomTracesResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryDenomTracesResponse
                         * @property {Array.<ibc.applications.transfer.v1.IDenomTrace>|null} [denom_traces] QueryDenomTracesResponse denom_traces
                         * @property {cosmos.base.query.v1beta1.IPageResponse|null} [pagination] QueryDenomTracesResponse pagination
                         */
    
                        /**
                         * Constructs a new QueryDenomTracesResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryDenomTracesResponse.
                         * @implements IQueryDenomTracesResponse
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse=} [properties] Properties to set
                         */
                        function QueryDenomTracesResponse(properties) {
                            this.denom_traces = [];
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryDenomTracesResponse denom_traces.
                         * @member {Array.<ibc.applications.transfer.v1.IDenomTrace>} denom_traces
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @instance
                         */
                        QueryDenomTracesResponse.prototype.denom_traces = $util.emptyArray;
    
                        /**
                         * QueryDenomTracesResponse pagination.
                         * @member {cosmos.base.query.v1beta1.IPageResponse|null|undefined} pagination
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @instance
                         */
                        QueryDenomTracesResponse.prototype.pagination = null;
    
                        /**
                         * Encodes the specified QueryDenomTracesResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesResponse.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse} message QueryDenomTracesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomTracesResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.denom_traces != null && message.denom_traces.length)
                                for (var i = 0; i < message.denom_traces.length; ++i)
                                    $root.ibc.applications.transfer.v1.DenomTrace.encode(message.denom_traces[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            if (message.pagination != null && Object.hasOwnProperty.call(message, "pagination"))
                                $root.cosmos.base.query.v1beta1.PageResponse.encode(message.pagination, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryDenomTracesResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomTracesResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomTracesResponse} message QueryDenomTracesResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomTracesResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryDenomTracesResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomTracesResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomTracesResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    if (!(message.denom_traces && message.denom_traces.length))
                                        message.denom_traces = [];
                                    message.denom_traces.push($root.ibc.applications.transfer.v1.DenomTrace.decode(reader, reader.uint32()));
                                    break;
                                case 2:
                                    message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryDenomTracesResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomTracesResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryDenomTracesResponse message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryDenomTracesResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.denom_traces != null && message.hasOwnProperty("denom_traces")) {
                                if (!Array.isArray(message.denom_traces))
                                    return "denom_traces: array expected";
                                for (var i = 0; i < message.denom_traces.length; ++i) {
                                    var error = $root.ibc.applications.transfer.v1.DenomTrace.verify(message.denom_traces[i]);
                                    if (error)
                                        return "denom_traces." + error;
                                }
                            }
                            if (message.pagination != null && message.hasOwnProperty("pagination")) {
                                var error = $root.cosmos.base.query.v1beta1.PageResponse.verify(message.pagination);
                                if (error)
                                    return "pagination." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a QueryDenomTracesResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryDenomTracesResponse} QueryDenomTracesResponse
                         */
                        QueryDenomTracesResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomTracesResponse)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.QueryDenomTracesResponse();
                            if (object.denom_traces) {
                                if (!Array.isArray(object.denom_traces))
                                    throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces: array expected");
                                message.denom_traces = [];
                                for (var i = 0; i < object.denom_traces.length; ++i) {
                                    if (typeof object.denom_traces[i] !== "object")
                                        throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesResponse.denom_traces: object expected");
                                    message.denom_traces[i] = $root.ibc.applications.transfer.v1.DenomTrace.fromObject(object.denom_traces[i]);
                                }
                            }
                            if (object.pagination != null) {
                                if (typeof object.pagination !== "object")
                                    throw TypeError(".ibc.applications.transfer.v1.QueryDenomTracesResponse.pagination: object expected");
                                message.pagination = $root.cosmos.base.query.v1beta1.PageResponse.fromObject(object.pagination);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryDenomTracesResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryDenomTracesResponse} message QueryDenomTracesResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryDenomTracesResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.arrays || options.defaults)
                                object.denom_traces = [];
                            if (options.defaults)
                                object.pagination = null;
                            if (message.denom_traces && message.denom_traces.length) {
                                object.denom_traces = [];
                                for (var j = 0; j < message.denom_traces.length; ++j)
                                    object.denom_traces[j] = $root.ibc.applications.transfer.v1.DenomTrace.toObject(message.denom_traces[j], options);
                            }
                            if (message.pagination != null && message.hasOwnProperty("pagination"))
                                object.pagination = $root.cosmos.base.query.v1beta1.PageResponse.toObject(message.pagination, options);
                            return object;
                        };
    
                        /**
                         * Converts this QueryDenomTracesResponse to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryDenomTracesResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryDenomTracesResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryDenomTracesResponse;
                    })();
    
                    v1.QueryParamsRequest = (function() {
    
                        /**
                         * Properties of a QueryParamsRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryParamsRequest
                         */
    
                        /**
                         * Constructs a new QueryParamsRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryParamsRequest.
                         * @implements IQueryParamsRequest
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryParamsRequest=} [properties] Properties to set
                         */
                        function QueryParamsRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Encodes the specified QueryParamsRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsRequest.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryParamsRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryParamsRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryParamsRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryParamsRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryParamsRequest message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryParamsRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            return null;
                        };
    
                        /**
                         * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryParamsRequest} QueryParamsRequest
                         */
                        QueryParamsRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryParamsRequest)
                                return object;
                            return new $root.ibc.applications.transfer.v1.QueryParamsRequest();
                        };
    
                        /**
                         * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryParamsRequest} message QueryParamsRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryParamsRequest.toObject = function toObject() {
                            return {};
                        };
    
                        /**
                         * Converts this QueryParamsRequest to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryParamsRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryParamsRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryParamsRequest;
                    })();
    
                    v1.QueryParamsResponse = (function() {
    
                        /**
                         * Properties of a QueryParamsResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryParamsResponse
                         * @property {ibc.applications.transfer.v1.IParams|null} [params] QueryParamsResponse params
                         */
    
                        /**
                         * Constructs a new QueryParamsResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryParamsResponse.
                         * @implements IQueryParamsResponse
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryParamsResponse=} [properties] Properties to set
                         */
                        function QueryParamsResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryParamsResponse params.
                         * @member {ibc.applications.transfer.v1.IParams|null|undefined} params
                         * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                         * @instance
                         */
                        QueryParamsResponse.prototype.params = null;
    
                        /**
                         * Encodes the specified QueryParamsResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsResponse.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryParamsResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                                $root.ibc.applications.transfer.v1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryParamsResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryParamsResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryParamsResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryParamsResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.params = $root.ibc.applications.transfer.v1.Params.decode(reader, reader.uint32());
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryParamsResponse message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryParamsResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.params != null && message.hasOwnProperty("params")) {
                                var error = $root.ibc.applications.transfer.v1.Params.verify(message.params);
                                if (error)
                                    return "params." + error;
                            }
                            return null;
                        };
    
                        /**
                         * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryParamsResponse} QueryParamsResponse
                         */
                        QueryParamsResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryParamsResponse)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.QueryParamsResponse();
                            if (object.params != null) {
                                if (typeof object.params !== "object")
                                    throw TypeError(".ibc.applications.transfer.v1.QueryParamsResponse.params: object expected");
                                message.params = $root.ibc.applications.transfer.v1.Params.fromObject(object.params);
                            }
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryParamsResponse} message QueryParamsResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryParamsResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.params = null;
                            if (message.params != null && message.hasOwnProperty("params"))
                                object.params = $root.ibc.applications.transfer.v1.Params.toObject(message.params, options);
                            return object;
                        };
    
                        /**
                         * Converts this QueryParamsResponse to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryParamsResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryParamsResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryParamsResponse;
                    })();
    
                    v1.QueryDenomHashRequest = (function() {
    
                        /**
                         * Properties of a QueryDenomHashRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryDenomHashRequest
                         * @property {string|null} [trace] QueryDenomHashRequest trace
                         */
    
                        /**
                         * Constructs a new QueryDenomHashRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryDenomHashRequest.
                         * @implements IQueryDenomHashRequest
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryDenomHashRequest=} [properties] Properties to set
                         */
                        function QueryDenomHashRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryDenomHashRequest trace.
                         * @member {string} trace
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashRequest
                         * @instance
                         */
                        QueryDenomHashRequest.prototype.trace = "";
    
                        /**
                         * Encodes the specified QueryDenomHashRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomHashRequest.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomHashRequest} message QueryDenomHashRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomHashRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.trace != null && Object.hasOwnProperty.call(message, "trace"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.trace);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryDenomHashRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomHashRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomHashRequest} message QueryDenomHashRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomHashRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryDenomHashRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryDenomHashRequest} QueryDenomHashRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomHashRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomHashRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.trace = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryDenomHashRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryDenomHashRequest} QueryDenomHashRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomHashRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryDenomHashRequest message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryDenomHashRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.trace != null && message.hasOwnProperty("trace"))
                                if (!$util.isString(message.trace))
                                    return "trace: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a QueryDenomHashRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryDenomHashRequest} QueryDenomHashRequest
                         */
                        QueryDenomHashRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomHashRequest)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.QueryDenomHashRequest();
                            if (object.trace != null)
                                message.trace = String(object.trace);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryDenomHashRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryDenomHashRequest} message QueryDenomHashRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryDenomHashRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.trace = "";
                            if (message.trace != null && message.hasOwnProperty("trace"))
                                object.trace = message.trace;
                            return object;
                        };
    
                        /**
                         * Converts this QueryDenomHashRequest to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryDenomHashRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryDenomHashRequest;
                    })();
    
                    v1.QueryDenomHashResponse = (function() {
    
                        /**
                         * Properties of a QueryDenomHashResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryDenomHashResponse
                         * @property {string|null} [hash] QueryDenomHashResponse hash
                         */
    
                        /**
                         * Constructs a new QueryDenomHashResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryDenomHashResponse.
                         * @implements IQueryDenomHashResponse
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryDenomHashResponse=} [properties] Properties to set
                         */
                        function QueryDenomHashResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryDenomHashResponse hash.
                         * @member {string} hash
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashResponse
                         * @instance
                         */
                        QueryDenomHashResponse.prototype.hash = "";
    
                        /**
                         * Encodes the specified QueryDenomHashResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomHashResponse.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomHashResponse} message QueryDenomHashResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomHashResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.hash);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryDenomHashResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryDenomHashResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryDenomHashResponse} message QueryDenomHashResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryDenomHashResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryDenomHashResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryDenomHashResponse} QueryDenomHashResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomHashResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryDenomHashResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.hash = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryDenomHashResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryDenomHashResponse} QueryDenomHashResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryDenomHashResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryDenomHashResponse message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryDenomHashResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.hash != null && message.hasOwnProperty("hash"))
                                if (!$util.isString(message.hash))
                                    return "hash: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a QueryDenomHashResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryDenomHashResponse} QueryDenomHashResponse
                         */
                        QueryDenomHashResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryDenomHashResponse)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.QueryDenomHashResponse();
                            if (object.hash != null)
                                message.hash = String(object.hash);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryDenomHashResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryDenomHashResponse} message QueryDenomHashResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryDenomHashResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.hash = "";
                            if (message.hash != null && message.hasOwnProperty("hash"))
                                object.hash = message.hash;
                            return object;
                        };
    
                        /**
                         * Converts this QueryDenomHashResponse to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryDenomHashResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryDenomHashResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryDenomHashResponse;
                    })();
    
                    v1.QueryEscrowAddressRequest = (function() {
    
                        /**
                         * Properties of a QueryEscrowAddressRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryEscrowAddressRequest
                         * @property {string|null} [port_id] QueryEscrowAddressRequest port_id
                         * @property {string|null} [channel_id] QueryEscrowAddressRequest channel_id
                         */
    
                        /**
                         * Constructs a new QueryEscrowAddressRequest.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryEscrowAddressRequest.
                         * @implements IQueryEscrowAddressRequest
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryEscrowAddressRequest=} [properties] Properties to set
                         */
                        function QueryEscrowAddressRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryEscrowAddressRequest port_id.
                         * @member {string} port_id
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @instance
                         */
                        QueryEscrowAddressRequest.prototype.port_id = "";
    
                        /**
                         * QueryEscrowAddressRequest channel_id.
                         * @member {string} channel_id
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @instance
                         */
                        QueryEscrowAddressRequest.prototype.channel_id = "";
    
                        /**
                         * Encodes the specified QueryEscrowAddressRequest message. Does not implicitly {@link ibc.applications.transfer.v1.QueryEscrowAddressRequest.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryEscrowAddressRequest} message QueryEscrowAddressRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryEscrowAddressRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.port_id != null && Object.hasOwnProperty.call(message, "port_id"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.port_id);
                            if (message.channel_id != null && Object.hasOwnProperty.call(message, "channel_id"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.channel_id);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryEscrowAddressRequest message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryEscrowAddressRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryEscrowAddressRequest} message QueryEscrowAddressRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryEscrowAddressRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryEscrowAddressRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryEscrowAddressRequest} QueryEscrowAddressRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryEscrowAddressRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryEscrowAddressRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.port_id = reader.string();
                                    break;
                                case 2:
                                    message.channel_id = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryEscrowAddressRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryEscrowAddressRequest} QueryEscrowAddressRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryEscrowAddressRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryEscrowAddressRequest message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryEscrowAddressRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                if (!$util.isString(message.port_id))
                                    return "port_id: string expected";
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                if (!$util.isString(message.channel_id))
                                    return "channel_id: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a QueryEscrowAddressRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryEscrowAddressRequest} QueryEscrowAddressRequest
                         */
                        QueryEscrowAddressRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryEscrowAddressRequest)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.QueryEscrowAddressRequest();
                            if (object.port_id != null)
                                message.port_id = String(object.port_id);
                            if (object.channel_id != null)
                                message.channel_id = String(object.channel_id);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryEscrowAddressRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryEscrowAddressRequest} message QueryEscrowAddressRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryEscrowAddressRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.port_id = "";
                                object.channel_id = "";
                            }
                            if (message.port_id != null && message.hasOwnProperty("port_id"))
                                object.port_id = message.port_id;
                            if (message.channel_id != null && message.hasOwnProperty("channel_id"))
                                object.channel_id = message.channel_id;
                            return object;
                        };
    
                        /**
                         * Converts this QueryEscrowAddressRequest to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryEscrowAddressRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryEscrowAddressRequest;
                    })();
    
                    v1.QueryEscrowAddressResponse = (function() {
    
                        /**
                         * Properties of a QueryEscrowAddressResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IQueryEscrowAddressResponse
                         * @property {string|null} [escrow_address] QueryEscrowAddressResponse escrow_address
                         */
    
                        /**
                         * Constructs a new QueryEscrowAddressResponse.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a QueryEscrowAddressResponse.
                         * @implements IQueryEscrowAddressResponse
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IQueryEscrowAddressResponse=} [properties] Properties to set
                         */
                        function QueryEscrowAddressResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * QueryEscrowAddressResponse escrow_address.
                         * @member {string} escrow_address
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressResponse
                         * @instance
                         */
                        QueryEscrowAddressResponse.prototype.escrow_address = "";
    
                        /**
                         * Encodes the specified QueryEscrowAddressResponse message. Does not implicitly {@link ibc.applications.transfer.v1.QueryEscrowAddressResponse.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryEscrowAddressResponse} message QueryEscrowAddressResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryEscrowAddressResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.escrow_address != null && Object.hasOwnProperty.call(message, "escrow_address"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.escrow_address);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified QueryEscrowAddressResponse message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.QueryEscrowAddressResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.IQueryEscrowAddressResponse} message QueryEscrowAddressResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        QueryEscrowAddressResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a QueryEscrowAddressResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.QueryEscrowAddressResponse} QueryEscrowAddressResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryEscrowAddressResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.QueryEscrowAddressResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.escrow_address = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a QueryEscrowAddressResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.QueryEscrowAddressResponse} QueryEscrowAddressResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        QueryEscrowAddressResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a QueryEscrowAddressResponse message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        QueryEscrowAddressResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.escrow_address != null && message.hasOwnProperty("escrow_address"))
                                if (!$util.isString(message.escrow_address))
                                    return "escrow_address: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a QueryEscrowAddressResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.QueryEscrowAddressResponse} QueryEscrowAddressResponse
                         */
                        QueryEscrowAddressResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.QueryEscrowAddressResponse)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.QueryEscrowAddressResponse();
                            if (object.escrow_address != null)
                                message.escrow_address = String(object.escrow_address);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a QueryEscrowAddressResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressResponse
                         * @static
                         * @param {ibc.applications.transfer.v1.QueryEscrowAddressResponse} message QueryEscrowAddressResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        QueryEscrowAddressResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults)
                                object.escrow_address = "";
                            if (message.escrow_address != null && message.hasOwnProperty("escrow_address"))
                                object.escrow_address = message.escrow_address;
                            return object;
                        };
    
                        /**
                         * Converts this QueryEscrowAddressResponse to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.QueryEscrowAddressResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        QueryEscrowAddressResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return QueryEscrowAddressResponse;
                    })();
    
                    v1.DenomTrace = (function() {
    
                        /**
                         * Properties of a DenomTrace.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IDenomTrace
                         * @property {string|null} [path] DenomTrace path
                         * @property {string|null} [base_denom] DenomTrace base_denom
                         */
    
                        /**
                         * Constructs a new DenomTrace.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a DenomTrace.
                         * @implements IDenomTrace
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IDenomTrace=} [properties] Properties to set
                         */
                        function DenomTrace(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * DenomTrace path.
                         * @member {string} path
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @instance
                         */
                        DenomTrace.prototype.path = "";
    
                        /**
                         * DenomTrace base_denom.
                         * @member {string} base_denom
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @instance
                         */
                        DenomTrace.prototype.base_denom = "";
    
                        /**
                         * Encodes the specified DenomTrace message. Does not implicitly {@link ibc.applications.transfer.v1.DenomTrace.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @static
                         * @param {ibc.applications.transfer.v1.IDenomTrace} message DenomTrace message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DenomTrace.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.path);
                            if (message.base_denom != null && Object.hasOwnProperty.call(message, "base_denom"))
                                writer.uint32(/* id 2, wireType 2 =*/18).string(message.base_denom);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified DenomTrace message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.DenomTrace.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @static
                         * @param {ibc.applications.transfer.v1.IDenomTrace} message DenomTrace message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        DenomTrace.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a DenomTrace message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DenomTrace.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.DenomTrace();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.path = reader.string();
                                    break;
                                case 2:
                                    message.base_denom = reader.string();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a DenomTrace message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        DenomTrace.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a DenomTrace message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        DenomTrace.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.path != null && message.hasOwnProperty("path"))
                                if (!$util.isString(message.path))
                                    return "path: string expected";
                            if (message.base_denom != null && message.hasOwnProperty("base_denom"))
                                if (!$util.isString(message.base_denom))
                                    return "base_denom: string expected";
                            return null;
                        };
    
                        /**
                         * Creates a DenomTrace message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.DenomTrace} DenomTrace
                         */
                        DenomTrace.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.DenomTrace)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.DenomTrace();
                            if (object.path != null)
                                message.path = String(object.path);
                            if (object.base_denom != null)
                                message.base_denom = String(object.base_denom);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a DenomTrace message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @static
                         * @param {ibc.applications.transfer.v1.DenomTrace} message DenomTrace
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        DenomTrace.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.path = "";
                                object.base_denom = "";
                            }
                            if (message.path != null && message.hasOwnProperty("path"))
                                object.path = message.path;
                            if (message.base_denom != null && message.hasOwnProperty("base_denom"))
                                object.base_denom = message.base_denom;
                            return object;
                        };
    
                        /**
                         * Converts this DenomTrace to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.DenomTrace
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        DenomTrace.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return DenomTrace;
                    })();
    
                    v1.Params = (function() {
    
                        /**
                         * Properties of a Params.
                         * @memberof ibc.applications.transfer.v1
                         * @interface IParams
                         * @property {boolean|null} [send_enabled] Params send_enabled
                         * @property {boolean|null} [receive_enabled] Params receive_enabled
                         */
    
                        /**
                         * Constructs a new Params.
                         * @memberof ibc.applications.transfer.v1
                         * @classdesc Represents a Params.
                         * @implements IParams
                         * @constructor
                         * @param {ibc.applications.transfer.v1.IParams=} [properties] Properties to set
                         */
                        function Params(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * Params send_enabled.
                         * @member {boolean} send_enabled
                         * @memberof ibc.applications.transfer.v1.Params
                         * @instance
                         */
                        Params.prototype.send_enabled = false;
    
                        /**
                         * Params receive_enabled.
                         * @member {boolean} receive_enabled
                         * @memberof ibc.applications.transfer.v1.Params
                         * @instance
                         */
                        Params.prototype.receive_enabled = false;
    
                        /**
                         * Encodes the specified Params message. Does not implicitly {@link ibc.applications.transfer.v1.Params.verify|verify} messages.
                         * @function encode
                         * @memberof ibc.applications.transfer.v1.Params
                         * @static
                         * @param {ibc.applications.transfer.v1.IParams} message Params message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Params.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.send_enabled != null && Object.hasOwnProperty.call(message, "send_enabled"))
                                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.send_enabled);
                            if (message.receive_enabled != null && Object.hasOwnProperty.call(message, "receive_enabled"))
                                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.receive_enabled);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified Params message, length delimited. Does not implicitly {@link ibc.applications.transfer.v1.Params.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof ibc.applications.transfer.v1.Params
                         * @static
                         * @param {ibc.applications.transfer.v1.IParams} message Params message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        Params.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a Params message from the specified reader or buffer.
                         * @function decode
                         * @memberof ibc.applications.transfer.v1.Params
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {ibc.applications.transfer.v1.Params} Params
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Params.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ibc.applications.transfer.v1.Params();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.send_enabled = reader.bool();
                                    break;
                                case 2:
                                    message.receive_enabled = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a Params message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof ibc.applications.transfer.v1.Params
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {ibc.applications.transfer.v1.Params} Params
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        Params.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a Params message.
                         * @function verify
                         * @memberof ibc.applications.transfer.v1.Params
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        Params.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.send_enabled != null && message.hasOwnProperty("send_enabled"))
                                if (typeof message.send_enabled !== "boolean")
                                    return "send_enabled: boolean expected";
                            if (message.receive_enabled != null && message.hasOwnProperty("receive_enabled"))
                                if (typeof message.receive_enabled !== "boolean")
                                    return "receive_enabled: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a Params message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof ibc.applications.transfer.v1.Params
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {ibc.applications.transfer.v1.Params} Params
                         */
                        Params.fromObject = function fromObject(object) {
                            if (object instanceof $root.ibc.applications.transfer.v1.Params)
                                return object;
                            var message = new $root.ibc.applications.transfer.v1.Params();
                            if (object.send_enabled != null)
                                message.send_enabled = Boolean(object.send_enabled);
                            if (object.receive_enabled != null)
                                message.receive_enabled = Boolean(object.receive_enabled);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a Params message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof ibc.applications.transfer.v1.Params
                         * @static
                         * @param {ibc.applications.transfer.v1.Params} message Params
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        Params.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                object.send_enabled = false;
                                object.receive_enabled = false;
                            }
                            if (message.send_enabled != null && message.hasOwnProperty("send_enabled"))
                                object.send_enabled = message.send_enabled;
                            if (message.receive_enabled != null && message.hasOwnProperty("receive_enabled"))
                                object.receive_enabled = message.receive_enabled;
                            return object;
                        };
    
                        /**
                         * Converts this Params to JSON.
                         * @function toJSON
                         * @memberof ibc.applications.transfer.v1.Params
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        Params.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return Params;
                    })();
    
                    return v1;
                })();
    
                return transfer;
            })();
    
            return applications;
        })();
    
        return ibc;
    })();
    
    $root.cosmos = (function() {
    
        /**
         * Namespace cosmos.
         * @exports cosmos
         * @namespace
         */
        var cosmos = {};
    
        cosmos.upgrade = (function() {
    
            /**
             * Namespace upgrade.
             * @memberof cosmos
             * @namespace
             */
            var upgrade = {};
    
            upgrade.v1beta1 = (function() {
    
                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.upgrade
                 * @namespace
                 */
                var v1beta1 = {};
    
                v1beta1.Plan = (function() {
    
                    /**
                     * Properties of a Plan.
                     * @memberof cosmos.upgrade.v1beta1
                     * @interface IPlan
                     * @property {string|null} [name] Plan name
                     * @property {google.protobuf.ITimestamp|null} [time] Plan time
                     * @property {Long|null} [height] Plan height
                     * @property {string|null} [info] Plan info
                     * @property {google.protobuf.IAny|null} [upgraded_client_state] Plan upgraded_client_state
                     */
    
                    /**
                     * Constructs a new Plan.
                     * @memberof cosmos.upgrade.v1beta1
                     * @classdesc Represents a Plan.
                     * @implements IPlan
                     * @constructor
                     * @param {cosmos.upgrade.v1beta1.IPlan=} [properties] Properties to set
                     */
                    function Plan(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Plan name.
                     * @member {string} name
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @instance
                     */
                    Plan.prototype.name = "";
    
                    /**
                     * Plan time.
                     * @member {google.protobuf.ITimestamp|null|undefined} time
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @instance
                     */
                    Plan.prototype.time = null;
    
                    /**
                     * Plan height.
                     * @member {Long} height
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @instance
                     */
                    Plan.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                    /**
                     * Plan info.
                     * @member {string} info
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @instance
                     */
                    Plan.prototype.info = "";
    
                    /**
                     * Plan upgraded_client_state.
                     * @member {google.protobuf.IAny|null|undefined} upgraded_client_state
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @instance
                     */
                    Plan.prototype.upgraded_client_state = null;
    
                    /**
                     * Encodes the specified Plan message. Does not implicitly {@link cosmos.upgrade.v1beta1.Plan.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @static
                     * @param {cosmos.upgrade.v1beta1.IPlan} message Plan message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Plan.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                            $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                        if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                        if (message.upgraded_client_state != null && Object.hasOwnProperty.call(message, "upgraded_client_state"))
                            $root.google.protobuf.Any.encode(message.upgraded_client_state, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Plan message, length delimited. Does not implicitly {@link cosmos.upgrade.v1beta1.Plan.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @static
                     * @param {cosmos.upgrade.v1beta1.IPlan} message Plan message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Plan.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Plan message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.upgrade.v1beta1.Plan} Plan
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Plan.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.upgrade.v1beta1.Plan();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.height = reader.int64();
                                break;
                            case 4:
                                message.info = reader.string();
                                break;
                            case 5:
                                message.upgraded_client_state = $root.google.protobuf.Any.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Plan message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.upgrade.v1beta1.Plan} Plan
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Plan.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Plan message.
                     * @function verify
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Plan.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.time != null && message.hasOwnProperty("time")) {
                            var error = $root.google.protobuf.Timestamp.verify(message.time);
                            if (error)
                                return "time." + error;
                        }
                        if (message.height != null && message.hasOwnProperty("height"))
                            if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                                return "height: integer|Long expected";
                        if (message.info != null && message.hasOwnProperty("info"))
                            if (!$util.isString(message.info))
                                return "info: string expected";
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state")) {
                            var error = $root.google.protobuf.Any.verify(message.upgraded_client_state);
                            if (error)
                                return "upgraded_client_state." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Plan message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.upgrade.v1beta1.Plan} Plan
                     */
                    Plan.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.upgrade.v1beta1.Plan)
                            return object;
                        var message = new $root.cosmos.upgrade.v1beta1.Plan();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.time != null) {
                            if (typeof object.time !== "object")
                                throw TypeError(".cosmos.upgrade.v1beta1.Plan.time: object expected");
                            message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                        }
                        if (object.height != null)
                            if ($util.Long)
                                (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                            else if (typeof object.height === "string")
                                message.height = parseInt(object.height, 10);
                            else if (typeof object.height === "number")
                                message.height = object.height;
                            else if (typeof object.height === "object")
                                message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                        if (object.info != null)
                            message.info = String(object.info);
                        if (object.upgraded_client_state != null) {
                            if (typeof object.upgraded_client_state !== "object")
                                throw TypeError(".cosmos.upgrade.v1beta1.Plan.upgraded_client_state: object expected");
                            message.upgraded_client_state = $root.google.protobuf.Any.fromObject(object.upgraded_client_state);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Plan message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @static
                     * @param {cosmos.upgrade.v1beta1.Plan} message Plan
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Plan.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            object.time = null;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, false);
                                object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.height = options.longs === String ? "0" : 0;
                            object.info = "";
                            object.upgraded_client_state = null;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.time != null && message.hasOwnProperty("time"))
                            object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                        if (message.height != null && message.hasOwnProperty("height"))
                            if (typeof message.height === "number")
                                object.height = options.longs === String ? String(message.height) : message.height;
                            else
                                object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                        if (message.info != null && message.hasOwnProperty("info"))
                            object.info = message.info;
                        if (message.upgraded_client_state != null && message.hasOwnProperty("upgraded_client_state"))
                            object.upgraded_client_state = $root.google.protobuf.Any.toObject(message.upgraded_client_state, options);
                        return object;
                    };
    
                    /**
                     * Converts this Plan to JSON.
                     * @function toJSON
                     * @memberof cosmos.upgrade.v1beta1.Plan
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Plan.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Plan;
                })();
    
                v1beta1.SoftwareUpgradeProposal = (function() {
    
                    /**
                     * Properties of a SoftwareUpgradeProposal.
                     * @memberof cosmos.upgrade.v1beta1
                     * @interface ISoftwareUpgradeProposal
                     * @property {string|null} [title] SoftwareUpgradeProposal title
                     * @property {string|null} [description] SoftwareUpgradeProposal description
                     * @property {cosmos.upgrade.v1beta1.IPlan|null} [plan] SoftwareUpgradeProposal plan
                     */
    
                    /**
                     * Constructs a new SoftwareUpgradeProposal.
                     * @memberof cosmos.upgrade.v1beta1
                     * @classdesc Represents a SoftwareUpgradeProposal.
                     * @implements ISoftwareUpgradeProposal
                     * @constructor
                     * @param {cosmos.upgrade.v1beta1.ISoftwareUpgradeProposal=} [properties] Properties to set
                     */
                    function SoftwareUpgradeProposal(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SoftwareUpgradeProposal title.
                     * @member {string} title
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @instance
                     */
                    SoftwareUpgradeProposal.prototype.title = "";
    
                    /**
                     * SoftwareUpgradeProposal description.
                     * @member {string} description
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @instance
                     */
                    SoftwareUpgradeProposal.prototype.description = "";
    
                    /**
                     * SoftwareUpgradeProposal plan.
                     * @member {cosmos.upgrade.v1beta1.IPlan|null|undefined} plan
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @instance
                     */
                    SoftwareUpgradeProposal.prototype.plan = null;
    
                    /**
                     * Encodes the specified SoftwareUpgradeProposal message. Does not implicitly {@link cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @static
                     * @param {cosmos.upgrade.v1beta1.ISoftwareUpgradeProposal} message SoftwareUpgradeProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SoftwareUpgradeProposal.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        if (message.plan != null && Object.hasOwnProperty.call(message, "plan"))
                            $root.cosmos.upgrade.v1beta1.Plan.encode(message.plan, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SoftwareUpgradeProposal message, length delimited. Does not implicitly {@link cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @static
                     * @param {cosmos.upgrade.v1beta1.ISoftwareUpgradeProposal} message SoftwareUpgradeProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SoftwareUpgradeProposal.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SoftwareUpgradeProposal message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.upgrade.v1beta1.SoftwareUpgradeProposal} SoftwareUpgradeProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SoftwareUpgradeProposal.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.upgrade.v1beta1.SoftwareUpgradeProposal();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.title = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            case 3:
                                message.plan = $root.cosmos.upgrade.v1beta1.Plan.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SoftwareUpgradeProposal message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.upgrade.v1beta1.SoftwareUpgradeProposal} SoftwareUpgradeProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SoftwareUpgradeProposal.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SoftwareUpgradeProposal message.
                     * @function verify
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SoftwareUpgradeProposal.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.title != null && message.hasOwnProperty("title"))
                            if (!$util.isString(message.title))
                                return "title: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.plan != null && message.hasOwnProperty("plan")) {
                            var error = $root.cosmos.upgrade.v1beta1.Plan.verify(message.plan);
                            if (error)
                                return "plan." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SoftwareUpgradeProposal message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.upgrade.v1beta1.SoftwareUpgradeProposal} SoftwareUpgradeProposal
                     */
                    SoftwareUpgradeProposal.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.upgrade.v1beta1.SoftwareUpgradeProposal)
                            return object;
                        var message = new $root.cosmos.upgrade.v1beta1.SoftwareUpgradeProposal();
                        if (object.title != null)
                            message.title = String(object.title);
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.plan != null) {
                            if (typeof object.plan !== "object")
                                throw TypeError(".cosmos.upgrade.v1beta1.SoftwareUpgradeProposal.plan: object expected");
                            message.plan = $root.cosmos.upgrade.v1beta1.Plan.fromObject(object.plan);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SoftwareUpgradeProposal message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @static
                     * @param {cosmos.upgrade.v1beta1.SoftwareUpgradeProposal} message SoftwareUpgradeProposal
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SoftwareUpgradeProposal.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.title = "";
                            object.description = "";
                            object.plan = null;
                        }
                        if (message.title != null && message.hasOwnProperty("title"))
                            object.title = message.title;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.plan != null && message.hasOwnProperty("plan"))
                            object.plan = $root.cosmos.upgrade.v1beta1.Plan.toObject(message.plan, options);
                        return object;
                    };
    
                    /**
                     * Converts this SoftwareUpgradeProposal to JSON.
                     * @function toJSON
                     * @memberof cosmos.upgrade.v1beta1.SoftwareUpgradeProposal
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SoftwareUpgradeProposal.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SoftwareUpgradeProposal;
                })();
    
                v1beta1.CancelSoftwareUpgradeProposal = (function() {
    
                    /**
                     * Properties of a CancelSoftwareUpgradeProposal.
                     * @memberof cosmos.upgrade.v1beta1
                     * @interface ICancelSoftwareUpgradeProposal
                     * @property {string|null} [title] CancelSoftwareUpgradeProposal title
                     * @property {string|null} [description] CancelSoftwareUpgradeProposal description
                     */
    
                    /**
                     * Constructs a new CancelSoftwareUpgradeProposal.
                     * @memberof cosmos.upgrade.v1beta1
                     * @classdesc Represents a CancelSoftwareUpgradeProposal.
                     * @implements ICancelSoftwareUpgradeProposal
                     * @constructor
                     * @param {cosmos.upgrade.v1beta1.ICancelSoftwareUpgradeProposal=} [properties] Properties to set
                     */
                    function CancelSoftwareUpgradeProposal(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CancelSoftwareUpgradeProposal title.
                     * @member {string} title
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @instance
                     */
                    CancelSoftwareUpgradeProposal.prototype.title = "";
    
                    /**
                     * CancelSoftwareUpgradeProposal description.
                     * @member {string} description
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @instance
                     */
                    CancelSoftwareUpgradeProposal.prototype.description = "";
    
                    /**
                     * Encodes the specified CancelSoftwareUpgradeProposal message. Does not implicitly {@link cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @static
                     * @param {cosmos.upgrade.v1beta1.ICancelSoftwareUpgradeProposal} message CancelSoftwareUpgradeProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CancelSoftwareUpgradeProposal.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.title != null && Object.hasOwnProperty.call(message, "title"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.title);
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CancelSoftwareUpgradeProposal message, length delimited. Does not implicitly {@link cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @static
                     * @param {cosmos.upgrade.v1beta1.ICancelSoftwareUpgradeProposal} message CancelSoftwareUpgradeProposal message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CancelSoftwareUpgradeProposal.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CancelSoftwareUpgradeProposal message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal} CancelSoftwareUpgradeProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CancelSoftwareUpgradeProposal.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.title = reader.string();
                                break;
                            case 2:
                                message.description = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CancelSoftwareUpgradeProposal message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal} CancelSoftwareUpgradeProposal
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CancelSoftwareUpgradeProposal.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CancelSoftwareUpgradeProposal message.
                     * @function verify
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CancelSoftwareUpgradeProposal.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.title != null && message.hasOwnProperty("title"))
                            if (!$util.isString(message.title))
                                return "title: string expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a CancelSoftwareUpgradeProposal message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal} CancelSoftwareUpgradeProposal
                     */
                    CancelSoftwareUpgradeProposal.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal)
                            return object;
                        var message = new $root.cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal();
                        if (object.title != null)
                            message.title = String(object.title);
                        if (object.description != null)
                            message.description = String(object.description);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CancelSoftwareUpgradeProposal message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @static
                     * @param {cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal} message CancelSoftwareUpgradeProposal
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CancelSoftwareUpgradeProposal.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.title = "";
                            object.description = "";
                        }
                        if (message.title != null && message.hasOwnProperty("title"))
                            object.title = message.title;
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        return object;
                    };
    
                    /**
                     * Converts this CancelSoftwareUpgradeProposal to JSON.
                     * @function toJSON
                     * @memberof cosmos.upgrade.v1beta1.CancelSoftwareUpgradeProposal
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CancelSoftwareUpgradeProposal.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return CancelSoftwareUpgradeProposal;
                })();
    
                v1beta1.ModuleVersion = (function() {
    
                    /**
                     * Properties of a ModuleVersion.
                     * @memberof cosmos.upgrade.v1beta1
                     * @interface IModuleVersion
                     * @property {string|null} [name] ModuleVersion name
                     * @property {Long|null} [version] ModuleVersion version
                     */
    
                    /**
                     * Constructs a new ModuleVersion.
                     * @memberof cosmos.upgrade.v1beta1
                     * @classdesc Represents a ModuleVersion.
                     * @implements IModuleVersion
                     * @constructor
                     * @param {cosmos.upgrade.v1beta1.IModuleVersion=} [properties] Properties to set
                     */
                    function ModuleVersion(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ModuleVersion name.
                     * @member {string} name
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @instance
                     */
                    ModuleVersion.prototype.name = "";
    
                    /**
                     * ModuleVersion version.
                     * @member {Long} version
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @instance
                     */
                    ModuleVersion.prototype.version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Encodes the specified ModuleVersion message. Does not implicitly {@link cosmos.upgrade.v1beta1.ModuleVersion.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @static
                     * @param {cosmos.upgrade.v1beta1.IModuleVersion} message ModuleVersion message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ModuleVersion.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                        if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.version);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ModuleVersion message, length delimited. Does not implicitly {@link cosmos.upgrade.v1beta1.ModuleVersion.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @static
                     * @param {cosmos.upgrade.v1beta1.IModuleVersion} message ModuleVersion message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ModuleVersion.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ModuleVersion message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.upgrade.v1beta1.ModuleVersion} ModuleVersion
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ModuleVersion.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.upgrade.v1beta1.ModuleVersion();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name = reader.string();
                                break;
                            case 2:
                                message.version = reader.uint64();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ModuleVersion message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.upgrade.v1beta1.ModuleVersion} ModuleVersion
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ModuleVersion.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ModuleVersion message.
                     * @function verify
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ModuleVersion.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))
                                return "version: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a ModuleVersion message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.upgrade.v1beta1.ModuleVersion} ModuleVersion
                     */
                    ModuleVersion.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.upgrade.v1beta1.ModuleVersion)
                            return object;
                        var message = new $root.cosmos.upgrade.v1beta1.ModuleVersion();
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.version != null)
                            if ($util.Long)
                                (message.version = $util.Long.fromValue(object.version)).unsigned = true;
                            else if (typeof object.version === "string")
                                message.version = parseInt(object.version, 10);
                            else if (typeof object.version === "number")
                                message.version = object.version;
                            else if (typeof object.version === "object")
                                message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber(true);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ModuleVersion message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @static
                     * @param {cosmos.upgrade.v1beta1.ModuleVersion} message ModuleVersion
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ModuleVersion.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name = "";
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.version = options.longs === String ? "0" : 0;
                        }
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.version != null && message.hasOwnProperty("version"))
                            if (typeof message.version === "number")
                                object.version = options.longs === String ? String(message.version) : message.version;
                            else
                                object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber(true) : message.version;
                        return object;
                    };
    
                    /**
                     * Converts this ModuleVersion to JSON.
                     * @function toJSON
                     * @memberof cosmos.upgrade.v1beta1.ModuleVersion
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ModuleVersion.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ModuleVersion;
                })();
    
                return v1beta1;
            })();
    
            return upgrade;
        })();
    
        cosmos.base = (function() {
    
            /**
             * Namespace base.
             * @memberof cosmos
             * @namespace
             */
            var base = {};
    
            base.query = (function() {
    
                /**
                 * Namespace query.
                 * @memberof cosmos.base
                 * @namespace
                 */
                var query = {};
    
                query.v1beta1 = (function() {
    
                    /**
                     * Namespace v1beta1.
                     * @memberof cosmos.base.query
                     * @namespace
                     */
                    var v1beta1 = {};
    
                    v1beta1.PageRequest = (function() {
    
                        /**
                         * Properties of a PageRequest.
                         * @memberof cosmos.base.query.v1beta1
                         * @interface IPageRequest
                         * @property {Uint8Array|null} [key] PageRequest key
                         * @property {Long|null} [offset] PageRequest offset
                         * @property {Long|null} [limit] PageRequest limit
                         * @property {boolean|null} [count_total] PageRequest count_total
                         * @property {boolean|null} [reverse] PageRequest reverse
                         */
    
                        /**
                         * Constructs a new PageRequest.
                         * @memberof cosmos.base.query.v1beta1
                         * @classdesc Represents a PageRequest.
                         * @implements IPageRequest
                         * @constructor
                         * @param {cosmos.base.query.v1beta1.IPageRequest=} [properties] Properties to set
                         */
                        function PageRequest(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PageRequest key.
                         * @member {Uint8Array} key
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @instance
                         */
                        PageRequest.prototype.key = $util.newBuffer([]);
    
                        /**
                         * PageRequest offset.
                         * @member {Long} offset
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @instance
                         */
                        PageRequest.prototype.offset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                        /**
                         * PageRequest limit.
                         * @member {Long} limit
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @instance
                         */
                        PageRequest.prototype.limit = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                        /**
                         * PageRequest count_total.
                         * @member {boolean} count_total
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @instance
                         */
                        PageRequest.prototype.count_total = false;
    
                        /**
                         * PageRequest reverse.
                         * @member {boolean} reverse
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @instance
                         */
                        PageRequest.prototype.reverse = false;
    
                        /**
                         * Encodes the specified PageRequest message. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                         * @function encode
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @static
                         * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PageRequest.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                            if (message.offset != null && Object.hasOwnProperty.call(message, "offset"))
                                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.offset);
                            if (message.limit != null && Object.hasOwnProperty.call(message, "limit"))
                                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.limit);
                            if (message.count_total != null && Object.hasOwnProperty.call(message, "count_total"))
                                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.count_total);
                            if (message.reverse != null && Object.hasOwnProperty.call(message, "reverse"))
                                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.reverse);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PageRequest message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageRequest.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @static
                         * @param {cosmos.base.query.v1beta1.IPageRequest} message PageRequest message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PageRequest.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PageRequest message from the specified reader or buffer.
                         * @function decode
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PageRequest.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageRequest();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.key = reader.bytes();
                                    break;
                                case 2:
                                    message.offset = reader.uint64();
                                    break;
                                case 3:
                                    message.limit = reader.uint64();
                                    break;
                                case 4:
                                    message.count_total = reader.bool();
                                    break;
                                case 5:
                                    message.reverse = reader.bool();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PageRequest message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PageRequest.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PageRequest message.
                         * @function verify
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PageRequest.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.key != null && message.hasOwnProperty("key"))
                                if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                                    return "key: buffer expected";
                            if (message.offset != null && message.hasOwnProperty("offset"))
                                if (!$util.isInteger(message.offset) && !(message.offset && $util.isInteger(message.offset.low) && $util.isInteger(message.offset.high)))
                                    return "offset: integer|Long expected";
                            if (message.limit != null && message.hasOwnProperty("limit"))
                                if (!$util.isInteger(message.limit) && !(message.limit && $util.isInteger(message.limit.low) && $util.isInteger(message.limit.high)))
                                    return "limit: integer|Long expected";
                            if (message.count_total != null && message.hasOwnProperty("count_total"))
                                if (typeof message.count_total !== "boolean")
                                    return "count_total: boolean expected";
                            if (message.reverse != null && message.hasOwnProperty("reverse"))
                                if (typeof message.reverse !== "boolean")
                                    return "reverse: boolean expected";
                            return null;
                        };
    
                        /**
                         * Creates a PageRequest message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {cosmos.base.query.v1beta1.PageRequest} PageRequest
                         */
                        PageRequest.fromObject = function fromObject(object) {
                            if (object instanceof $root.cosmos.base.query.v1beta1.PageRequest)
                                return object;
                            var message = new $root.cosmos.base.query.v1beta1.PageRequest();
                            if (object.key != null)
                                if (typeof object.key === "string")
                                    $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                                else if (object.key.length)
                                    message.key = object.key;
                            if (object.offset != null)
                                if ($util.Long)
                                    (message.offset = $util.Long.fromValue(object.offset)).unsigned = true;
                                else if (typeof object.offset === "string")
                                    message.offset = parseInt(object.offset, 10);
                                else if (typeof object.offset === "number")
                                    message.offset = object.offset;
                                else if (typeof object.offset === "object")
                                    message.offset = new $util.LongBits(object.offset.low >>> 0, object.offset.high >>> 0).toNumber(true);
                            if (object.limit != null)
                                if ($util.Long)
                                    (message.limit = $util.Long.fromValue(object.limit)).unsigned = true;
                                else if (typeof object.limit === "string")
                                    message.limit = parseInt(object.limit, 10);
                                else if (typeof object.limit === "number")
                                    message.limit = object.limit;
                                else if (typeof object.limit === "object")
                                    message.limit = new $util.LongBits(object.limit.low >>> 0, object.limit.high >>> 0).toNumber(true);
                            if (object.count_total != null)
                                message.count_total = Boolean(object.count_total);
                            if (object.reverse != null)
                                message.reverse = Boolean(object.reverse);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PageRequest message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @static
                         * @param {cosmos.base.query.v1beta1.PageRequest} message PageRequest
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PageRequest.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if (options.bytes === String)
                                    object.key = "";
                                else {
                                    object.key = [];
                                    if (options.bytes !== Array)
                                        object.key = $util.newBuffer(object.key);
                                }
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, true);
                                    object.offset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.offset = options.longs === String ? "0" : 0;
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, true);
                                    object.limit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.limit = options.longs === String ? "0" : 0;
                                object.count_total = false;
                                object.reverse = false;
                            }
                            if (message.key != null && message.hasOwnProperty("key"))
                                object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                            if (message.offset != null && message.hasOwnProperty("offset"))
                                if (typeof message.offset === "number")
                                    object.offset = options.longs === String ? String(message.offset) : message.offset;
                                else
                                    object.offset = options.longs === String ? $util.Long.prototype.toString.call(message.offset) : options.longs === Number ? new $util.LongBits(message.offset.low >>> 0, message.offset.high >>> 0).toNumber(true) : message.offset;
                            if (message.limit != null && message.hasOwnProperty("limit"))
                                if (typeof message.limit === "number")
                                    object.limit = options.longs === String ? String(message.limit) : message.limit;
                                else
                                    object.limit = options.longs === String ? $util.Long.prototype.toString.call(message.limit) : options.longs === Number ? new $util.LongBits(message.limit.low >>> 0, message.limit.high >>> 0).toNumber(true) : message.limit;
                            if (message.count_total != null && message.hasOwnProperty("count_total"))
                                object.count_total = message.count_total;
                            if (message.reverse != null && message.hasOwnProperty("reverse"))
                                object.reverse = message.reverse;
                            return object;
                        };
    
                        /**
                         * Converts this PageRequest to JSON.
                         * @function toJSON
                         * @memberof cosmos.base.query.v1beta1.PageRequest
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PageRequest.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return PageRequest;
                    })();
    
                    v1beta1.PageResponse = (function() {
    
                        /**
                         * Properties of a PageResponse.
                         * @memberof cosmos.base.query.v1beta1
                         * @interface IPageResponse
                         * @property {Uint8Array|null} [next_key] PageResponse next_key
                         * @property {Long|null} [total] PageResponse total
                         */
    
                        /**
                         * Constructs a new PageResponse.
                         * @memberof cosmos.base.query.v1beta1
                         * @classdesc Represents a PageResponse.
                         * @implements IPageResponse
                         * @constructor
                         * @param {cosmos.base.query.v1beta1.IPageResponse=} [properties] Properties to set
                         */
                        function PageResponse(properties) {
                            if (properties)
                                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                    if (properties[keys[i]] != null)
                                        this[keys[i]] = properties[keys[i]];
                        }
    
                        /**
                         * PageResponse next_key.
                         * @member {Uint8Array} next_key
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @instance
                         */
                        PageResponse.prototype.next_key = $util.newBuffer([]);
    
                        /**
                         * PageResponse total.
                         * @member {Long} total
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @instance
                         */
                        PageResponse.prototype.total = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                        /**
                         * Encodes the specified PageResponse message. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                         * @function encode
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @static
                         * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PageResponse.encode = function encode(message, writer) {
                            if (!writer)
                                writer = $Writer.create();
                            if (message.next_key != null && Object.hasOwnProperty.call(message, "next_key"))
                                writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.next_key);
                            if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                                writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.total);
                            return writer;
                        };
    
                        /**
                         * Encodes the specified PageResponse message, length delimited. Does not implicitly {@link cosmos.base.query.v1beta1.PageResponse.verify|verify} messages.
                         * @function encodeDelimited
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @static
                         * @param {cosmos.base.query.v1beta1.IPageResponse} message PageResponse message or plain object to encode
                         * @param {$protobuf.Writer} [writer] Writer to encode to
                         * @returns {$protobuf.Writer} Writer
                         */
                        PageResponse.encodeDelimited = function encodeDelimited(message, writer) {
                            return this.encode(message, writer).ldelim();
                        };
    
                        /**
                         * Decodes a PageResponse message from the specified reader or buffer.
                         * @function decode
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @param {number} [length] Message length if known beforehand
                         * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PageResponse.decode = function decode(reader, length) {
                            if (!(reader instanceof $Reader))
                                reader = $Reader.create(reader);
                            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.query.v1beta1.PageResponse();
                            while (reader.pos < end) {
                                var tag = reader.uint32();
                                switch (tag >>> 3) {
                                case 1:
                                    message.next_key = reader.bytes();
                                    break;
                                case 2:
                                    message.total = reader.uint64();
                                    break;
                                default:
                                    reader.skipType(tag & 7);
                                    break;
                                }
                            }
                            return message;
                        };
    
                        /**
                         * Decodes a PageResponse message from the specified reader or buffer, length delimited.
                         * @function decodeDelimited
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @static
                         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                         * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                         * @throws {Error} If the payload is not a reader or valid buffer
                         * @throws {$protobuf.util.ProtocolError} If required fields are missing
                         */
                        PageResponse.decodeDelimited = function decodeDelimited(reader) {
                            if (!(reader instanceof $Reader))
                                reader = new $Reader(reader);
                            return this.decode(reader, reader.uint32());
                        };
    
                        /**
                         * Verifies a PageResponse message.
                         * @function verify
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @static
                         * @param {Object.<string,*>} message Plain object to verify
                         * @returns {string|null} `null` if valid, otherwise the reason why it is not
                         */
                        PageResponse.verify = function verify(message) {
                            if (typeof message !== "object" || message === null)
                                return "object expected";
                            if (message.next_key != null && message.hasOwnProperty("next_key"))
                                if (!(message.next_key && typeof message.next_key.length === "number" || $util.isString(message.next_key)))
                                    return "next_key: buffer expected";
                            if (message.total != null && message.hasOwnProperty("total"))
                                if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                                    return "total: integer|Long expected";
                            return null;
                        };
    
                        /**
                         * Creates a PageResponse message from a plain object. Also converts values to their respective internal types.
                         * @function fromObject
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @static
                         * @param {Object.<string,*>} object Plain object
                         * @returns {cosmos.base.query.v1beta1.PageResponse} PageResponse
                         */
                        PageResponse.fromObject = function fromObject(object) {
                            if (object instanceof $root.cosmos.base.query.v1beta1.PageResponse)
                                return object;
                            var message = new $root.cosmos.base.query.v1beta1.PageResponse();
                            if (object.next_key != null)
                                if (typeof object.next_key === "string")
                                    $util.base64.decode(object.next_key, message.next_key = $util.newBuffer($util.base64.length(object.next_key)), 0);
                                else if (object.next_key.length)
                                    message.next_key = object.next_key;
                            if (object.total != null)
                                if ($util.Long)
                                    (message.total = $util.Long.fromValue(object.total)).unsigned = true;
                                else if (typeof object.total === "string")
                                    message.total = parseInt(object.total, 10);
                                else if (typeof object.total === "number")
                                    message.total = object.total;
                                else if (typeof object.total === "object")
                                    message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber(true);
                            return message;
                        };
    
                        /**
                         * Creates a plain object from a PageResponse message. Also converts values to other types if specified.
                         * @function toObject
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @static
                         * @param {cosmos.base.query.v1beta1.PageResponse} message PageResponse
                         * @param {$protobuf.IConversionOptions} [options] Conversion options
                         * @returns {Object.<string,*>} Plain object
                         */
                        PageResponse.toObject = function toObject(message, options) {
                            if (!options)
                                options = {};
                            var object = {};
                            if (options.defaults) {
                                if (options.bytes === String)
                                    object.next_key = "";
                                else {
                                    object.next_key = [];
                                    if (options.bytes !== Array)
                                        object.next_key = $util.newBuffer(object.next_key);
                                }
                                if ($util.Long) {
                                    var long = new $util.Long(0, 0, true);
                                    object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                                } else
                                    object.total = options.longs === String ? "0" : 0;
                            }
                            if (message.next_key != null && message.hasOwnProperty("next_key"))
                                object.next_key = options.bytes === String ? $util.base64.encode(message.next_key, 0, message.next_key.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_key) : message.next_key;
                            if (message.total != null && message.hasOwnProperty("total"))
                                if (typeof message.total === "number")
                                    object.total = options.longs === String ? String(message.total) : message.total;
                                else
                                    object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber(true) : message.total;
                            return object;
                        };
    
                        /**
                         * Converts this PageResponse to JSON.
                         * @function toJSON
                         * @memberof cosmos.base.query.v1beta1.PageResponse
                         * @instance
                         * @returns {Object.<string,*>} JSON object
                         */
                        PageResponse.prototype.toJSON = function toJSON() {
                            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                        };
    
                        return PageResponse;
                    })();
    
                    return v1beta1;
                })();
    
                return query;
            })();
    
            base.v1beta1 = (function() {
    
                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.base
                 * @namespace
                 */
                var v1beta1 = {};
    
                v1beta1.Coin = (function() {
    
                    /**
                     * Properties of a Coin.
                     * @memberof cosmos.base.v1beta1
                     * @interface ICoin
                     * @property {string|null} [denom] Coin denom
                     * @property {string|null} [amount] Coin amount
                     */
    
                    /**
                     * Constructs a new Coin.
                     * @memberof cosmos.base.v1beta1
                     * @classdesc Represents a Coin.
                     * @implements ICoin
                     * @constructor
                     * @param {cosmos.base.v1beta1.ICoin=} [properties] Properties to set
                     */
                    function Coin(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Coin denom.
                     * @member {string} denom
                     * @memberof cosmos.base.v1beta1.Coin
                     * @instance
                     */
                    Coin.prototype.denom = "";
    
                    /**
                     * Coin amount.
                     * @member {string} amount
                     * @memberof cosmos.base.v1beta1.Coin
                     * @instance
                     */
                    Coin.prototype.amount = "";
    
                    /**
                     * Encodes the specified Coin message. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Coin.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Coin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.Coin.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {cosmos.base.v1beta1.ICoin} message Coin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Coin.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Coin message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.v1beta1.Coin} Coin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Coin.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.Coin();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.amount = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Coin message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.v1beta1.Coin} Coin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Coin.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Coin message.
                     * @function verify
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Coin.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (!$util.isString(message.amount))
                                return "amount: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Coin message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.v1beta1.Coin} Coin
                     */
                    Coin.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.v1beta1.Coin)
                            return object;
                        var message = new $root.cosmos.base.v1beta1.Coin();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.amount != null)
                            message.amount = String(object.amount);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Coin message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.v1beta1.Coin
                     * @static
                     * @param {cosmos.base.v1beta1.Coin} message Coin
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Coin.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.denom = "";
                            object.amount = "";
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = message.amount;
                        return object;
                    };
    
                    /**
                     * Converts this Coin to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.v1beta1.Coin
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Coin.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Coin;
                })();
    
                v1beta1.DecCoin = (function() {
    
                    /**
                     * Properties of a DecCoin.
                     * @memberof cosmos.base.v1beta1
                     * @interface IDecCoin
                     * @property {string|null} [denom] DecCoin denom
                     * @property {string|null} [amount] DecCoin amount
                     */
    
                    /**
                     * Constructs a new DecCoin.
                     * @memberof cosmos.base.v1beta1
                     * @classdesc Represents a DecCoin.
                     * @implements IDecCoin
                     * @constructor
                     * @param {cosmos.base.v1beta1.IDecCoin=} [properties] Properties to set
                     */
                    function DecCoin(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DecCoin denom.
                     * @member {string} denom
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @instance
                     */
                    DecCoin.prototype.denom = "";
    
                    /**
                     * DecCoin amount.
                     * @member {string} amount
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @instance
                     */
                    DecCoin.prototype.amount = "";
    
                    /**
                     * Encodes the specified DecCoin message. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DecCoin.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.amount);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DecCoin message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecCoin.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {cosmos.base.v1beta1.IDecCoin} message DecCoin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DecCoin.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DecCoin message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DecCoin.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecCoin();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.amount = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DecCoin message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DecCoin.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DecCoin message.
                     * @function verify
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DecCoin.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            if (!$util.isString(message.amount))
                                return "amount: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DecCoin message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.v1beta1.DecCoin} DecCoin
                     */
                    DecCoin.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.v1beta1.DecCoin)
                            return object;
                        var message = new $root.cosmos.base.v1beta1.DecCoin();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.amount != null)
                            message.amount = String(object.amount);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DecCoin message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @static
                     * @param {cosmos.base.v1beta1.DecCoin} message DecCoin
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DecCoin.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.denom = "";
                            object.amount = "";
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = message.amount;
                        return object;
                    };
    
                    /**
                     * Converts this DecCoin to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.v1beta1.DecCoin
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DecCoin.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DecCoin;
                })();
    
                v1beta1.IntProto = (function() {
    
                    /**
                     * Properties of an IntProto.
                     * @memberof cosmos.base.v1beta1
                     * @interface IIntProto
                     * @property {string|null} [int] IntProto int
                     */
    
                    /**
                     * Constructs a new IntProto.
                     * @memberof cosmos.base.v1beta1
                     * @classdesc Represents an IntProto.
                     * @implements IIntProto
                     * @constructor
                     * @param {cosmos.base.v1beta1.IIntProto=} [properties] Properties to set
                     */
                    function IntProto(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * IntProto int.
                     * @member {string} int
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @instance
                     */
                    IntProto.prototype.int = "";
    
                    /**
                     * Encodes the specified IntProto message. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IntProto.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.int != null && Object.hasOwnProperty.call(message, "int"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.int);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified IntProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.IntProto.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {cosmos.base.v1beta1.IIntProto} message IntProto message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    IntProto.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an IntProto message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.v1beta1.IntProto} IntProto
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IntProto.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.IntProto();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.int = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an IntProto message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.v1beta1.IntProto} IntProto
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    IntProto.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an IntProto message.
                     * @function verify
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    IntProto.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.int != null && message.hasOwnProperty("int"))
                            if (!$util.isString(message.int))
                                return "int: string expected";
                        return null;
                    };
    
                    /**
                     * Creates an IntProto message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.v1beta1.IntProto} IntProto
                     */
                    IntProto.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.v1beta1.IntProto)
                            return object;
                        var message = new $root.cosmos.base.v1beta1.IntProto();
                        if (object.int != null)
                            message.int = String(object.int);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an IntProto message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @static
                     * @param {cosmos.base.v1beta1.IntProto} message IntProto
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    IntProto.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.int = "";
                        if (message.int != null && message.hasOwnProperty("int"))
                            object.int = message.int;
                        return object;
                    };
    
                    /**
                     * Converts this IntProto to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.v1beta1.IntProto
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    IntProto.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return IntProto;
                })();
    
                v1beta1.DecProto = (function() {
    
                    /**
                     * Properties of a DecProto.
                     * @memberof cosmos.base.v1beta1
                     * @interface IDecProto
                     * @property {string|null} [dec] DecProto dec
                     */
    
                    /**
                     * Constructs a new DecProto.
                     * @memberof cosmos.base.v1beta1
                     * @classdesc Represents a DecProto.
                     * @implements IDecProto
                     * @constructor
                     * @param {cosmos.base.v1beta1.IDecProto=} [properties] Properties to set
                     */
                    function DecProto(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DecProto dec.
                     * @member {string} dec
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @instance
                     */
                    DecProto.prototype.dec = "";
    
                    /**
                     * Encodes the specified DecProto message. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DecProto.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.dec != null && Object.hasOwnProperty.call(message, "dec"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.dec);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DecProto message, length delimited. Does not implicitly {@link cosmos.base.v1beta1.DecProto.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {cosmos.base.v1beta1.IDecProto} message DecProto message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DecProto.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DecProto message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.base.v1beta1.DecProto} DecProto
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DecProto.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.base.v1beta1.DecProto();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.dec = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DecProto message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.base.v1beta1.DecProto} DecProto
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DecProto.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DecProto message.
                     * @function verify
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DecProto.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.dec != null && message.hasOwnProperty("dec"))
                            if (!$util.isString(message.dec))
                                return "dec: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DecProto message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.base.v1beta1.DecProto} DecProto
                     */
                    DecProto.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.base.v1beta1.DecProto)
                            return object;
                        var message = new $root.cosmos.base.v1beta1.DecProto();
                        if (object.dec != null)
                            message.dec = String(object.dec);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DecProto message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @static
                     * @param {cosmos.base.v1beta1.DecProto} message DecProto
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DecProto.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.dec = "";
                        if (message.dec != null && message.hasOwnProperty("dec"))
                            object.dec = message.dec;
                        return object;
                    };
    
                    /**
                     * Converts this DecProto to JSON.
                     * @function toJSON
                     * @memberof cosmos.base.v1beta1.DecProto
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DecProto.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DecProto;
                })();
    
                return v1beta1;
            })();
    
            return base;
        })();
    
        cosmos.bank = (function() {
    
            /**
             * Namespace bank.
             * @memberof cosmos
             * @namespace
             */
            var bank = {};
    
            bank.v1beta1 = (function() {
    
                /**
                 * Namespace v1beta1.
                 * @memberof cosmos.bank
                 * @namespace
                 */
                var v1beta1 = {};
    
                v1beta1.Params = (function() {
    
                    /**
                     * Properties of a Params.
                     * @memberof cosmos.bank.v1beta1
                     * @interface IParams
                     * @property {Array.<cosmos.bank.v1beta1.ISendEnabled>|null} [send_enabled] Params send_enabled
                     * @property {boolean|null} [default_send_enabled] Params default_send_enabled
                     */
    
                    /**
                     * Constructs a new Params.
                     * @memberof cosmos.bank.v1beta1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {cosmos.bank.v1beta1.IParams=} [properties] Properties to set
                     */
                    function Params(properties) {
                        this.send_enabled = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Params send_enabled.
                     * @member {Array.<cosmos.bank.v1beta1.ISendEnabled>} send_enabled
                     * @memberof cosmos.bank.v1beta1.Params
                     * @instance
                     */
                    Params.prototype.send_enabled = $util.emptyArray;
    
                    /**
                     * Params default_send_enabled.
                     * @member {boolean} default_send_enabled
                     * @memberof cosmos.bank.v1beta1.Params
                     * @instance
                     */
                    Params.prototype.default_send_enabled = false;
    
                    /**
                     * Encodes the specified Params message. Does not implicitly {@link cosmos.bank.v1beta1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.bank.v1beta1.Params
                     * @static
                     * @param {cosmos.bank.v1beta1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.send_enabled != null && message.send_enabled.length)
                            for (var i = 0; i < message.send_enabled.length; ++i)
                                $root.cosmos.bank.v1beta1.SendEnabled.encode(message.send_enabled[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.default_send_enabled != null && Object.hasOwnProperty.call(message, "default_send_enabled"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.default_send_enabled);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Params message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Params.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.bank.v1beta1.Params
                     * @static
                     * @param {cosmos.bank.v1beta1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.bank.v1beta1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.bank.v1beta1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Params();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.send_enabled && message.send_enabled.length))
                                    message.send_enabled = [];
                                message.send_enabled.push($root.cosmos.bank.v1beta1.SendEnabled.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.default_send_enabled = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Params message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.bank.v1beta1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.bank.v1beta1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Params message.
                     * @function verify
                     * @memberof cosmos.bank.v1beta1.Params
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Params.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.send_enabled != null && message.hasOwnProperty("send_enabled")) {
                            if (!Array.isArray(message.send_enabled))
                                return "send_enabled: array expected";
                            for (var i = 0; i < message.send_enabled.length; ++i) {
                                var error = $root.cosmos.bank.v1beta1.SendEnabled.verify(message.send_enabled[i]);
                                if (error)
                                    return "send_enabled." + error;
                            }
                        }
                        if (message.default_send_enabled != null && message.hasOwnProperty("default_send_enabled"))
                            if (typeof message.default_send_enabled !== "boolean")
                                return "default_send_enabled: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a Params message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.bank.v1beta1.Params
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.bank.v1beta1.Params} Params
                     */
                    Params.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.bank.v1beta1.Params)
                            return object;
                        var message = new $root.cosmos.bank.v1beta1.Params();
                        if (object.send_enabled) {
                            if (!Array.isArray(object.send_enabled))
                                throw TypeError(".cosmos.bank.v1beta1.Params.send_enabled: array expected");
                            message.send_enabled = [];
                            for (var i = 0; i < object.send_enabled.length; ++i) {
                                if (typeof object.send_enabled[i] !== "object")
                                    throw TypeError(".cosmos.bank.v1beta1.Params.send_enabled: object expected");
                                message.send_enabled[i] = $root.cosmos.bank.v1beta1.SendEnabled.fromObject(object.send_enabled[i]);
                            }
                        }
                        if (object.default_send_enabled != null)
                            message.default_send_enabled = Boolean(object.default_send_enabled);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Params message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.bank.v1beta1.Params
                     * @static
                     * @param {cosmos.bank.v1beta1.Params} message Params
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Params.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.send_enabled = [];
                        if (options.defaults)
                            object.default_send_enabled = false;
                        if (message.send_enabled && message.send_enabled.length) {
                            object.send_enabled = [];
                            for (var j = 0; j < message.send_enabled.length; ++j)
                                object.send_enabled[j] = $root.cosmos.bank.v1beta1.SendEnabled.toObject(message.send_enabled[j], options);
                        }
                        if (message.default_send_enabled != null && message.hasOwnProperty("default_send_enabled"))
                            object.default_send_enabled = message.default_send_enabled;
                        return object;
                    };
    
                    /**
                     * Converts this Params to JSON.
                     * @function toJSON
                     * @memberof cosmos.bank.v1beta1.Params
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Params.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Params;
                })();
    
                v1beta1.SendEnabled = (function() {
    
                    /**
                     * Properties of a SendEnabled.
                     * @memberof cosmos.bank.v1beta1
                     * @interface ISendEnabled
                     * @property {string|null} [denom] SendEnabled denom
                     * @property {boolean|null} [enabled] SendEnabled enabled
                     */
    
                    /**
                     * Constructs a new SendEnabled.
                     * @memberof cosmos.bank.v1beta1
                     * @classdesc Represents a SendEnabled.
                     * @implements ISendEnabled
                     * @constructor
                     * @param {cosmos.bank.v1beta1.ISendEnabled=} [properties] Properties to set
                     */
                    function SendEnabled(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SendEnabled denom.
                     * @member {string} denom
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @instance
                     */
                    SendEnabled.prototype.denom = "";
    
                    /**
                     * SendEnabled enabled.
                     * @member {boolean} enabled
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @instance
                     */
                    SendEnabled.prototype.enabled = false;
    
                    /**
                     * Encodes the specified SendEnabled message. Does not implicitly {@link cosmos.bank.v1beta1.SendEnabled.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @static
                     * @param {cosmos.bank.v1beta1.ISendEnabled} message SendEnabled message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SendEnabled.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.enabled != null && Object.hasOwnProperty.call(message, "enabled"))
                            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.enabled);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SendEnabled message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.SendEnabled.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @static
                     * @param {cosmos.bank.v1beta1.ISendEnabled} message SendEnabled message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SendEnabled.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SendEnabled message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.bank.v1beta1.SendEnabled} SendEnabled
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SendEnabled.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.SendEnabled();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.enabled = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SendEnabled message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.bank.v1beta1.SendEnabled} SendEnabled
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SendEnabled.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SendEnabled message.
                     * @function verify
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SendEnabled.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            if (typeof message.enabled !== "boolean")
                                return "enabled: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a SendEnabled message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.bank.v1beta1.SendEnabled} SendEnabled
                     */
                    SendEnabled.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.bank.v1beta1.SendEnabled)
                            return object;
                        var message = new $root.cosmos.bank.v1beta1.SendEnabled();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.enabled != null)
                            message.enabled = Boolean(object.enabled);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SendEnabled message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @static
                     * @param {cosmos.bank.v1beta1.SendEnabled} message SendEnabled
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SendEnabled.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.denom = "";
                            object.enabled = false;
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.enabled != null && message.hasOwnProperty("enabled"))
                            object.enabled = message.enabled;
                        return object;
                    };
    
                    /**
                     * Converts this SendEnabled to JSON.
                     * @function toJSON
                     * @memberof cosmos.bank.v1beta1.SendEnabled
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SendEnabled.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return SendEnabled;
                })();
    
                v1beta1.Input = (function() {
    
                    /**
                     * Properties of an Input.
                     * @memberof cosmos.bank.v1beta1
                     * @interface IInput
                     * @property {string|null} [address] Input address
                     * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [coins] Input coins
                     */
    
                    /**
                     * Constructs a new Input.
                     * @memberof cosmos.bank.v1beta1
                     * @classdesc Represents an Input.
                     * @implements IInput
                     * @constructor
                     * @param {cosmos.bank.v1beta1.IInput=} [properties] Properties to set
                     */
                    function Input(properties) {
                        this.coins = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Input address.
                     * @member {string} address
                     * @memberof cosmos.bank.v1beta1.Input
                     * @instance
                     */
                    Input.prototype.address = "";
    
                    /**
                     * Input coins.
                     * @member {Array.<cosmos.base.v1beta1.ICoin>} coins
                     * @memberof cosmos.bank.v1beta1.Input
                     * @instance
                     */
                    Input.prototype.coins = $util.emptyArray;
    
                    /**
                     * Encodes the specified Input message. Does not implicitly {@link cosmos.bank.v1beta1.Input.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.bank.v1beta1.Input
                     * @static
                     * @param {cosmos.bank.v1beta1.IInput} message Input message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Input.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        if (message.coins != null && message.coins.length)
                            for (var i = 0; i < message.coins.length; ++i)
                                $root.cosmos.base.v1beta1.Coin.encode(message.coins[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Input message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Input.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.bank.v1beta1.Input
                     * @static
                     * @param {cosmos.bank.v1beta1.IInput} message Input message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Input.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Input message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.bank.v1beta1.Input
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.bank.v1beta1.Input} Input
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Input.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Input();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            case 2:
                                if (!(message.coins && message.coins.length))
                                    message.coins = [];
                                message.coins.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Input message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.bank.v1beta1.Input
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.bank.v1beta1.Input} Input
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Input.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Input message.
                     * @function verify
                     * @memberof cosmos.bank.v1beta1.Input
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Input.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.coins != null && message.hasOwnProperty("coins")) {
                            if (!Array.isArray(message.coins))
                                return "coins: array expected";
                            for (var i = 0; i < message.coins.length; ++i) {
                                var error = $root.cosmos.base.v1beta1.Coin.verify(message.coins[i]);
                                if (error)
                                    return "coins." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Input message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.bank.v1beta1.Input
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.bank.v1beta1.Input} Input
                     */
                    Input.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.bank.v1beta1.Input)
                            return object;
                        var message = new $root.cosmos.bank.v1beta1.Input();
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.coins) {
                            if (!Array.isArray(object.coins))
                                throw TypeError(".cosmos.bank.v1beta1.Input.coins: array expected");
                            message.coins = [];
                            for (var i = 0; i < object.coins.length; ++i) {
                                if (typeof object.coins[i] !== "object")
                                    throw TypeError(".cosmos.bank.v1beta1.Input.coins: object expected");
                                message.coins[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.coins[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Input message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.bank.v1beta1.Input
                     * @static
                     * @param {cosmos.bank.v1beta1.Input} message Input
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Input.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.coins = [];
                        if (options.defaults)
                            object.address = "";
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.coins && message.coins.length) {
                            object.coins = [];
                            for (var j = 0; j < message.coins.length; ++j)
                                object.coins[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.coins[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Input to JSON.
                     * @function toJSON
                     * @memberof cosmos.bank.v1beta1.Input
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Input.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Input;
                })();
    
                v1beta1.Output = (function() {
    
                    /**
                     * Properties of an Output.
                     * @memberof cosmos.bank.v1beta1
                     * @interface IOutput
                     * @property {string|null} [address] Output address
                     * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [coins] Output coins
                     */
    
                    /**
                     * Constructs a new Output.
                     * @memberof cosmos.bank.v1beta1
                     * @classdesc Represents an Output.
                     * @implements IOutput
                     * @constructor
                     * @param {cosmos.bank.v1beta1.IOutput=} [properties] Properties to set
                     */
                    function Output(properties) {
                        this.coins = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Output address.
                     * @member {string} address
                     * @memberof cosmos.bank.v1beta1.Output
                     * @instance
                     */
                    Output.prototype.address = "";
    
                    /**
                     * Output coins.
                     * @member {Array.<cosmos.base.v1beta1.ICoin>} coins
                     * @memberof cosmos.bank.v1beta1.Output
                     * @instance
                     */
                    Output.prototype.coins = $util.emptyArray;
    
                    /**
                     * Encodes the specified Output message. Does not implicitly {@link cosmos.bank.v1beta1.Output.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.bank.v1beta1.Output
                     * @static
                     * @param {cosmos.bank.v1beta1.IOutput} message Output message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Output.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.address);
                        if (message.coins != null && message.coins.length)
                            for (var i = 0; i < message.coins.length; ++i)
                                $root.cosmos.base.v1beta1.Coin.encode(message.coins[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Output message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Output.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.bank.v1beta1.Output
                     * @static
                     * @param {cosmos.bank.v1beta1.IOutput} message Output message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Output.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Output message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.bank.v1beta1.Output
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.bank.v1beta1.Output} Output
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Output.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Output();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.address = reader.string();
                                break;
                            case 2:
                                if (!(message.coins && message.coins.length))
                                    message.coins = [];
                                message.coins.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Output message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.bank.v1beta1.Output
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.bank.v1beta1.Output} Output
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Output.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Output message.
                     * @function verify
                     * @memberof cosmos.bank.v1beta1.Output
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Output.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.address != null && message.hasOwnProperty("address"))
                            if (!$util.isString(message.address))
                                return "address: string expected";
                        if (message.coins != null && message.hasOwnProperty("coins")) {
                            if (!Array.isArray(message.coins))
                                return "coins: array expected";
                            for (var i = 0; i < message.coins.length; ++i) {
                                var error = $root.cosmos.base.v1beta1.Coin.verify(message.coins[i]);
                                if (error)
                                    return "coins." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Output message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.bank.v1beta1.Output
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.bank.v1beta1.Output} Output
                     */
                    Output.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.bank.v1beta1.Output)
                            return object;
                        var message = new $root.cosmos.bank.v1beta1.Output();
                        if (object.address != null)
                            message.address = String(object.address);
                        if (object.coins) {
                            if (!Array.isArray(object.coins))
                                throw TypeError(".cosmos.bank.v1beta1.Output.coins: array expected");
                            message.coins = [];
                            for (var i = 0; i < object.coins.length; ++i) {
                                if (typeof object.coins[i] !== "object")
                                    throw TypeError(".cosmos.bank.v1beta1.Output.coins: object expected");
                                message.coins[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.coins[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Output message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.bank.v1beta1.Output
                     * @static
                     * @param {cosmos.bank.v1beta1.Output} message Output
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Output.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.coins = [];
                        if (options.defaults)
                            object.address = "";
                        if (message.address != null && message.hasOwnProperty("address"))
                            object.address = message.address;
                        if (message.coins && message.coins.length) {
                            object.coins = [];
                            for (var j = 0; j < message.coins.length; ++j)
                                object.coins[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.coins[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Output to JSON.
                     * @function toJSON
                     * @memberof cosmos.bank.v1beta1.Output
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Output.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Output;
                })();
    
                v1beta1.Supply = (function() {
    
                    /**
                     * Properties of a Supply.
                     * @memberof cosmos.bank.v1beta1
                     * @interface ISupply
                     * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [total] Supply total
                     */
    
                    /**
                     * Constructs a new Supply.
                     * @memberof cosmos.bank.v1beta1
                     * @classdesc Represents a Supply.
                     * @implements ISupply
                     * @constructor
                     * @param {cosmos.bank.v1beta1.ISupply=} [properties] Properties to set
                     */
                    function Supply(properties) {
                        this.total = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Supply total.
                     * @member {Array.<cosmos.base.v1beta1.ICoin>} total
                     * @memberof cosmos.bank.v1beta1.Supply
                     * @instance
                     */
                    Supply.prototype.total = $util.emptyArray;
    
                    /**
                     * Encodes the specified Supply message. Does not implicitly {@link cosmos.bank.v1beta1.Supply.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.bank.v1beta1.Supply
                     * @static
                     * @param {cosmos.bank.v1beta1.ISupply} message Supply message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Supply.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.total != null && message.total.length)
                            for (var i = 0; i < message.total.length; ++i)
                                $root.cosmos.base.v1beta1.Coin.encode(message.total[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Supply message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Supply.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.bank.v1beta1.Supply
                     * @static
                     * @param {cosmos.bank.v1beta1.ISupply} message Supply message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Supply.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Supply message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.bank.v1beta1.Supply
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.bank.v1beta1.Supply} Supply
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Supply.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Supply();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.total && message.total.length))
                                    message.total = [];
                                message.total.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Supply message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.bank.v1beta1.Supply
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.bank.v1beta1.Supply} Supply
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Supply.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Supply message.
                     * @function verify
                     * @memberof cosmos.bank.v1beta1.Supply
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Supply.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.total != null && message.hasOwnProperty("total")) {
                            if (!Array.isArray(message.total))
                                return "total: array expected";
                            for (var i = 0; i < message.total.length; ++i) {
                                var error = $root.cosmos.base.v1beta1.Coin.verify(message.total[i]);
                                if (error)
                                    return "total." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Supply message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.bank.v1beta1.Supply
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.bank.v1beta1.Supply} Supply
                     */
                    Supply.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.bank.v1beta1.Supply)
                            return object;
                        var message = new $root.cosmos.bank.v1beta1.Supply();
                        if (object.total) {
                            if (!Array.isArray(object.total))
                                throw TypeError(".cosmos.bank.v1beta1.Supply.total: array expected");
                            message.total = [];
                            for (var i = 0; i < object.total.length; ++i) {
                                if (typeof object.total[i] !== "object")
                                    throw TypeError(".cosmos.bank.v1beta1.Supply.total: object expected");
                                message.total[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.total[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Supply message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.bank.v1beta1.Supply
                     * @static
                     * @param {cosmos.bank.v1beta1.Supply} message Supply
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Supply.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.total = [];
                        if (message.total && message.total.length) {
                            object.total = [];
                            for (var j = 0; j < message.total.length; ++j)
                                object.total[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.total[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Supply to JSON.
                     * @function toJSON
                     * @memberof cosmos.bank.v1beta1.Supply
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Supply.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Supply;
                })();
    
                v1beta1.DenomUnit = (function() {
    
                    /**
                     * Properties of a DenomUnit.
                     * @memberof cosmos.bank.v1beta1
                     * @interface IDenomUnit
                     * @property {string|null} [denom] DenomUnit denom
                     * @property {number|null} [exponent] DenomUnit exponent
                     * @property {Array.<string>|null} [aliases] DenomUnit aliases
                     */
    
                    /**
                     * Constructs a new DenomUnit.
                     * @memberof cosmos.bank.v1beta1
                     * @classdesc Represents a DenomUnit.
                     * @implements IDenomUnit
                     * @constructor
                     * @param {cosmos.bank.v1beta1.IDenomUnit=} [properties] Properties to set
                     */
                    function DenomUnit(properties) {
                        this.aliases = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DenomUnit denom.
                     * @member {string} denom
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @instance
                     */
                    DenomUnit.prototype.denom = "";
    
                    /**
                     * DenomUnit exponent.
                     * @member {number} exponent
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @instance
                     */
                    DenomUnit.prototype.exponent = 0;
    
                    /**
                     * DenomUnit aliases.
                     * @member {Array.<string>} aliases
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @instance
                     */
                    DenomUnit.prototype.aliases = $util.emptyArray;
    
                    /**
                     * Encodes the specified DenomUnit message. Does not implicitly {@link cosmos.bank.v1beta1.DenomUnit.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @static
                     * @param {cosmos.bank.v1beta1.IDenomUnit} message DenomUnit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenomUnit.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.exponent != null && Object.hasOwnProperty.call(message, "exponent"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.exponent);
                        if (message.aliases != null && message.aliases.length)
                            for (var i = 0; i < message.aliases.length; ++i)
                                writer.uint32(/* id 3, wireType 2 =*/26).string(message.aliases[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DenomUnit message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.DenomUnit.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @static
                     * @param {cosmos.bank.v1beta1.IDenomUnit} message DenomUnit message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenomUnit.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DenomUnit message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.bank.v1beta1.DenomUnit} DenomUnit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenomUnit.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.DenomUnit();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.exponent = reader.uint32();
                                break;
                            case 3:
                                if (!(message.aliases && message.aliases.length))
                                    message.aliases = [];
                                message.aliases.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DenomUnit message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.bank.v1beta1.DenomUnit} DenomUnit
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenomUnit.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DenomUnit message.
                     * @function verify
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DenomUnit.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.exponent != null && message.hasOwnProperty("exponent"))
                            if (!$util.isInteger(message.exponent))
                                return "exponent: integer expected";
                        if (message.aliases != null && message.hasOwnProperty("aliases")) {
                            if (!Array.isArray(message.aliases))
                                return "aliases: array expected";
                            for (var i = 0; i < message.aliases.length; ++i)
                                if (!$util.isString(message.aliases[i]))
                                    return "aliases: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a DenomUnit message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.bank.v1beta1.DenomUnit} DenomUnit
                     */
                    DenomUnit.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.bank.v1beta1.DenomUnit)
                            return object;
                        var message = new $root.cosmos.bank.v1beta1.DenomUnit();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.exponent != null)
                            message.exponent = object.exponent >>> 0;
                        if (object.aliases) {
                            if (!Array.isArray(object.aliases))
                                throw TypeError(".cosmos.bank.v1beta1.DenomUnit.aliases: array expected");
                            message.aliases = [];
                            for (var i = 0; i < object.aliases.length; ++i)
                                message.aliases[i] = String(object.aliases[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DenomUnit message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @static
                     * @param {cosmos.bank.v1beta1.DenomUnit} message DenomUnit
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DenomUnit.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.aliases = [];
                        if (options.defaults) {
                            object.denom = "";
                            object.exponent = 0;
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.exponent != null && message.hasOwnProperty("exponent"))
                            object.exponent = message.exponent;
                        if (message.aliases && message.aliases.length) {
                            object.aliases = [];
                            for (var j = 0; j < message.aliases.length; ++j)
                                object.aliases[j] = message.aliases[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this DenomUnit to JSON.
                     * @function toJSON
                     * @memberof cosmos.bank.v1beta1.DenomUnit
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DenomUnit.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DenomUnit;
                })();
    
                v1beta1.Metadata = (function() {
    
                    /**
                     * Properties of a Metadata.
                     * @memberof cosmos.bank.v1beta1
                     * @interface IMetadata
                     * @property {string|null} [description] Metadata description
                     * @property {Array.<cosmos.bank.v1beta1.IDenomUnit>|null} [denom_units] Metadata denom_units
                     * @property {string|null} [base] Metadata base
                     * @property {string|null} [display] Metadata display
                     * @property {string|null} [name] Metadata name
                     * @property {string|null} [symbol] Metadata symbol
                     */
    
                    /**
                     * Constructs a new Metadata.
                     * @memberof cosmos.bank.v1beta1
                     * @classdesc Represents a Metadata.
                     * @implements IMetadata
                     * @constructor
                     * @param {cosmos.bank.v1beta1.IMetadata=} [properties] Properties to set
                     */
                    function Metadata(properties) {
                        this.denom_units = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Metadata description.
                     * @member {string} description
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @instance
                     */
                    Metadata.prototype.description = "";
    
                    /**
                     * Metadata denom_units.
                     * @member {Array.<cosmos.bank.v1beta1.IDenomUnit>} denom_units
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @instance
                     */
                    Metadata.prototype.denom_units = $util.emptyArray;
    
                    /**
                     * Metadata base.
                     * @member {string} base
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @instance
                     */
                    Metadata.prototype.base = "";
    
                    /**
                     * Metadata display.
                     * @member {string} display
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @instance
                     */
                    Metadata.prototype.display = "";
    
                    /**
                     * Metadata name.
                     * @member {string} name
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @instance
                     */
                    Metadata.prototype.name = "";
    
                    /**
                     * Metadata symbol.
                     * @member {string} symbol
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @instance
                     */
                    Metadata.prototype.symbol = "";
    
                    /**
                     * Encodes the specified Metadata message. Does not implicitly {@link cosmos.bank.v1beta1.Metadata.verify|verify} messages.
                     * @function encode
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @static
                     * @param {cosmos.bank.v1beta1.IMetadata} message Metadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Metadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.description);
                        if (message.denom_units != null && message.denom_units.length)
                            for (var i = 0; i < message.denom_units.length; ++i)
                                $root.cosmos.bank.v1beta1.DenomUnit.encode(message.denom_units[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.base != null && Object.hasOwnProperty.call(message, "base"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.base);
                        if (message.display != null && Object.hasOwnProperty.call(message, "display"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.display);
                        if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.name);
                        if (message.symbol != null && Object.hasOwnProperty.call(message, "symbol"))
                            writer.uint32(/* id 6, wireType 2 =*/50).string(message.symbol);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Metadata message, length delimited. Does not implicitly {@link cosmos.bank.v1beta1.Metadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @static
                     * @param {cosmos.bank.v1beta1.IMetadata} message Metadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Metadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Metadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {cosmos.bank.v1beta1.Metadata} Metadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Metadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos.bank.v1beta1.Metadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.description = reader.string();
                                break;
                            case 2:
                                if (!(message.denom_units && message.denom_units.length))
                                    message.denom_units = [];
                                message.denom_units.push($root.cosmos.bank.v1beta1.DenomUnit.decode(reader, reader.uint32()));
                                break;
                            case 3:
                                message.base = reader.string();
                                break;
                            case 4:
                                message.display = reader.string();
                                break;
                            case 5:
                                message.name = reader.string();
                                break;
                            case 6:
                                message.symbol = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Metadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {cosmos.bank.v1beta1.Metadata} Metadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Metadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Metadata message.
                     * @function verify
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Metadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.description != null && message.hasOwnProperty("description"))
                            if (!$util.isString(message.description))
                                return "description: string expected";
                        if (message.denom_units != null && message.hasOwnProperty("denom_units")) {
                            if (!Array.isArray(message.denom_units))
                                return "denom_units: array expected";
                            for (var i = 0; i < message.denom_units.length; ++i) {
                                var error = $root.cosmos.bank.v1beta1.DenomUnit.verify(message.denom_units[i]);
                                if (error)
                                    return "denom_units." + error;
                            }
                        }
                        if (message.base != null && message.hasOwnProperty("base"))
                            if (!$util.isString(message.base))
                                return "base: string expected";
                        if (message.display != null && message.hasOwnProperty("display"))
                            if (!$util.isString(message.display))
                                return "display: string expected";
                        if (message.name != null && message.hasOwnProperty("name"))
                            if (!$util.isString(message.name))
                                return "name: string expected";
                        if (message.symbol != null && message.hasOwnProperty("symbol"))
                            if (!$util.isString(message.symbol))
                                return "symbol: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {cosmos.bank.v1beta1.Metadata} Metadata
                     */
                    Metadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.cosmos.bank.v1beta1.Metadata)
                            return object;
                        var message = new $root.cosmos.bank.v1beta1.Metadata();
                        if (object.description != null)
                            message.description = String(object.description);
                        if (object.denom_units) {
                            if (!Array.isArray(object.denom_units))
                                throw TypeError(".cosmos.bank.v1beta1.Metadata.denom_units: array expected");
                            message.denom_units = [];
                            for (var i = 0; i < object.denom_units.length; ++i) {
                                if (typeof object.denom_units[i] !== "object")
                                    throw TypeError(".cosmos.bank.v1beta1.Metadata.denom_units: object expected");
                                message.denom_units[i] = $root.cosmos.bank.v1beta1.DenomUnit.fromObject(object.denom_units[i]);
                            }
                        }
                        if (object.base != null)
                            message.base = String(object.base);
                        if (object.display != null)
                            message.display = String(object.display);
                        if (object.name != null)
                            message.name = String(object.name);
                        if (object.symbol != null)
                            message.symbol = String(object.symbol);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Metadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @static
                     * @param {cosmos.bank.v1beta1.Metadata} message Metadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Metadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.denom_units = [];
                        if (options.defaults) {
                            object.description = "";
                            object.base = "";
                            object.display = "";
                            object.name = "";
                            object.symbol = "";
                        }
                        if (message.description != null && message.hasOwnProperty("description"))
                            object.description = message.description;
                        if (message.denom_units && message.denom_units.length) {
                            object.denom_units = [];
                            for (var j = 0; j < message.denom_units.length; ++j)
                                object.denom_units[j] = $root.cosmos.bank.v1beta1.DenomUnit.toObject(message.denom_units[j], options);
                        }
                        if (message.base != null && message.hasOwnProperty("base"))
                            object.base = message.base;
                        if (message.display != null && message.hasOwnProperty("display"))
                            object.display = message.display;
                        if (message.name != null && message.hasOwnProperty("name"))
                            object.name = message.name;
                        if (message.symbol != null && message.hasOwnProperty("symbol"))
                            object.symbol = message.symbol;
                        return object;
                    };
    
                    /**
                     * Converts this Metadata to JSON.
                     * @function toJSON
                     * @memberof cosmos.bank.v1beta1.Metadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Metadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Metadata;
                })();
    
                return v1beta1;
            })();
    
            return bank;
        })();
    
        return cosmos;
    })();
    
    $root.cosmos_proto = (function() {
    
        /**
         * Namespace cosmos_proto.
         * @exports cosmos_proto
         * @namespace
         */
        var cosmos_proto = {};
    
        cosmos_proto.InterfaceDescriptor = (function() {
    
            /**
             * Properties of an InterfaceDescriptor.
             * @memberof cosmos_proto
             * @interface IInterfaceDescriptor
             * @property {string|null} [name] InterfaceDescriptor name
             * @property {string|null} [description] InterfaceDescriptor description
             */
    
            /**
             * Constructs a new InterfaceDescriptor.
             * @memberof cosmos_proto
             * @classdesc Represents an InterfaceDescriptor.
             * @implements IInterfaceDescriptor
             * @constructor
             * @param {cosmos_proto.IInterfaceDescriptor=} [properties] Properties to set
             */
            function InterfaceDescriptor(properties) {
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * InterfaceDescriptor name.
             * @member {string} name
             * @memberof cosmos_proto.InterfaceDescriptor
             * @instance
             */
            InterfaceDescriptor.prototype.name = "";
    
            /**
             * InterfaceDescriptor description.
             * @member {string} description
             * @memberof cosmos_proto.InterfaceDescriptor
             * @instance
             */
            InterfaceDescriptor.prototype.description = "";
    
            /**
             * Encodes the specified InterfaceDescriptor message. Does not implicitly {@link cosmos_proto.InterfaceDescriptor.verify|verify} messages.
             * @function encode
             * @memberof cosmos_proto.InterfaceDescriptor
             * @static
             * @param {cosmos_proto.IInterfaceDescriptor} message InterfaceDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InterfaceDescriptor.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                return writer;
            };
    
            /**
             * Encodes the specified InterfaceDescriptor message, length delimited. Does not implicitly {@link cosmos_proto.InterfaceDescriptor.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cosmos_proto.InterfaceDescriptor
             * @static
             * @param {cosmos_proto.IInterfaceDescriptor} message InterfaceDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            InterfaceDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes an InterfaceDescriptor message from the specified reader or buffer.
             * @function decode
             * @memberof cosmos_proto.InterfaceDescriptor
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cosmos_proto.InterfaceDescriptor} InterfaceDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InterfaceDescriptor.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos_proto.InterfaceDescriptor();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.description = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes an InterfaceDescriptor message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cosmos_proto.InterfaceDescriptor
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cosmos_proto.InterfaceDescriptor} InterfaceDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            InterfaceDescriptor.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies an InterfaceDescriptor message.
             * @function verify
             * @memberof cosmos_proto.InterfaceDescriptor
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            InterfaceDescriptor.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                return null;
            };
    
            /**
             * Creates an InterfaceDescriptor message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cosmos_proto.InterfaceDescriptor
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cosmos_proto.InterfaceDescriptor} InterfaceDescriptor
             */
            InterfaceDescriptor.fromObject = function fromObject(object) {
                if (object instanceof $root.cosmos_proto.InterfaceDescriptor)
                    return object;
                var message = new $root.cosmos_proto.InterfaceDescriptor();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.description != null)
                    message.description = String(object.description);
                return message;
            };
    
            /**
             * Creates a plain object from an InterfaceDescriptor message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cosmos_proto.InterfaceDescriptor
             * @static
             * @param {cosmos_proto.InterfaceDescriptor} message InterfaceDescriptor
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            InterfaceDescriptor.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.defaults) {
                    object.name = "";
                    object.description = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                return object;
            };
    
            /**
             * Converts this InterfaceDescriptor to JSON.
             * @function toJSON
             * @memberof cosmos_proto.InterfaceDescriptor
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            InterfaceDescriptor.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return InterfaceDescriptor;
        })();
    
        cosmos_proto.ScalarDescriptor = (function() {
    
            /**
             * Properties of a ScalarDescriptor.
             * @memberof cosmos_proto
             * @interface IScalarDescriptor
             * @property {string|null} [name] ScalarDescriptor name
             * @property {string|null} [description] ScalarDescriptor description
             * @property {Array.<cosmos_proto.ScalarType>|null} [field_type] ScalarDescriptor field_type
             * @property {string|null} [legacy_amino_encoding] ScalarDescriptor legacy_amino_encoding
             */
    
            /**
             * Constructs a new ScalarDescriptor.
             * @memberof cosmos_proto
             * @classdesc Represents a ScalarDescriptor.
             * @implements IScalarDescriptor
             * @constructor
             * @param {cosmos_proto.IScalarDescriptor=} [properties] Properties to set
             */
            function ScalarDescriptor(properties) {
                this.field_type = [];
                if (properties)
                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                            this[keys[i]] = properties[keys[i]];
            }
    
            /**
             * ScalarDescriptor name.
             * @member {string} name
             * @memberof cosmos_proto.ScalarDescriptor
             * @instance
             */
            ScalarDescriptor.prototype.name = "";
    
            /**
             * ScalarDescriptor description.
             * @member {string} description
             * @memberof cosmos_proto.ScalarDescriptor
             * @instance
             */
            ScalarDescriptor.prototype.description = "";
    
            /**
             * ScalarDescriptor field_type.
             * @member {Array.<cosmos_proto.ScalarType>} field_type
             * @memberof cosmos_proto.ScalarDescriptor
             * @instance
             */
            ScalarDescriptor.prototype.field_type = $util.emptyArray;
    
            /**
             * ScalarDescriptor legacy_amino_encoding.
             * @member {string} legacy_amino_encoding
             * @memberof cosmos_proto.ScalarDescriptor
             * @instance
             */
            ScalarDescriptor.prototype.legacy_amino_encoding = "";
    
            /**
             * Encodes the specified ScalarDescriptor message. Does not implicitly {@link cosmos_proto.ScalarDescriptor.verify|verify} messages.
             * @function encode
             * @memberof cosmos_proto.ScalarDescriptor
             * @static
             * @param {cosmos_proto.IScalarDescriptor} message ScalarDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScalarDescriptor.encode = function encode(message, writer) {
                if (!writer)
                    writer = $Writer.create();
                if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                if (message.description != null && Object.hasOwnProperty.call(message, "description"))
                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.description);
                if (message.field_type != null && message.field_type.length) {
                    writer.uint32(/* id 3, wireType 2 =*/26).fork();
                    for (var i = 0; i < message.field_type.length; ++i)
                        writer.int32(message.field_type[i]);
                    writer.ldelim();
                }
                if (message.legacy_amino_encoding != null && Object.hasOwnProperty.call(message, "legacy_amino_encoding"))
                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.legacy_amino_encoding);
                return writer;
            };
    
            /**
             * Encodes the specified ScalarDescriptor message, length delimited. Does not implicitly {@link cosmos_proto.ScalarDescriptor.verify|verify} messages.
             * @function encodeDelimited
             * @memberof cosmos_proto.ScalarDescriptor
             * @static
             * @param {cosmos_proto.IScalarDescriptor} message ScalarDescriptor message or plain object to encode
             * @param {$protobuf.Writer} [writer] Writer to encode to
             * @returns {$protobuf.Writer} Writer
             */
            ScalarDescriptor.encodeDelimited = function encodeDelimited(message, writer) {
                return this.encode(message, writer).ldelim();
            };
    
            /**
             * Decodes a ScalarDescriptor message from the specified reader or buffer.
             * @function decode
             * @memberof cosmos_proto.ScalarDescriptor
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @param {number} [length] Message length if known beforehand
             * @returns {cosmos_proto.ScalarDescriptor} ScalarDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScalarDescriptor.decode = function decode(reader, length) {
                if (!(reader instanceof $Reader))
                    reader = $Reader.create(reader);
                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.cosmos_proto.ScalarDescriptor();
                while (reader.pos < end) {
                    var tag = reader.uint32();
                    switch (tag >>> 3) {
                    case 1:
                        message.name = reader.string();
                        break;
                    case 2:
                        message.description = reader.string();
                        break;
                    case 3:
                        if (!(message.field_type && message.field_type.length))
                            message.field_type = [];
                        if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                                message.field_type.push(reader.int32());
                        } else
                            message.field_type.push(reader.int32());
                        break;
                    case 4:
                        message.legacy_amino_encoding = reader.string();
                        break;
                    default:
                        reader.skipType(tag & 7);
                        break;
                    }
                }
                return message;
            };
    
            /**
             * Decodes a ScalarDescriptor message from the specified reader or buffer, length delimited.
             * @function decodeDelimited
             * @memberof cosmos_proto.ScalarDescriptor
             * @static
             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
             * @returns {cosmos_proto.ScalarDescriptor} ScalarDescriptor
             * @throws {Error} If the payload is not a reader or valid buffer
             * @throws {$protobuf.util.ProtocolError} If required fields are missing
             */
            ScalarDescriptor.decodeDelimited = function decodeDelimited(reader) {
                if (!(reader instanceof $Reader))
                    reader = new $Reader(reader);
                return this.decode(reader, reader.uint32());
            };
    
            /**
             * Verifies a ScalarDescriptor message.
             * @function verify
             * @memberof cosmos_proto.ScalarDescriptor
             * @static
             * @param {Object.<string,*>} message Plain object to verify
             * @returns {string|null} `null` if valid, otherwise the reason why it is not
             */
            ScalarDescriptor.verify = function verify(message) {
                if (typeof message !== "object" || message === null)
                    return "object expected";
                if (message.name != null && message.hasOwnProperty("name"))
                    if (!$util.isString(message.name))
                        return "name: string expected";
                if (message.description != null && message.hasOwnProperty("description"))
                    if (!$util.isString(message.description))
                        return "description: string expected";
                if (message.field_type != null && message.hasOwnProperty("field_type")) {
                    if (!Array.isArray(message.field_type))
                        return "field_type: array expected";
                    for (var i = 0; i < message.field_type.length; ++i)
                        switch (message.field_type[i]) {
                        default:
                            return "field_type: enum value[] expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                }
                if (message.legacy_amino_encoding != null && message.hasOwnProperty("legacy_amino_encoding"))
                    if (!$util.isString(message.legacy_amino_encoding))
                        return "legacy_amino_encoding: string expected";
                return null;
            };
    
            /**
             * Creates a ScalarDescriptor message from a plain object. Also converts values to their respective internal types.
             * @function fromObject
             * @memberof cosmos_proto.ScalarDescriptor
             * @static
             * @param {Object.<string,*>} object Plain object
             * @returns {cosmos_proto.ScalarDescriptor} ScalarDescriptor
             */
            ScalarDescriptor.fromObject = function fromObject(object) {
                if (object instanceof $root.cosmos_proto.ScalarDescriptor)
                    return object;
                var message = new $root.cosmos_proto.ScalarDescriptor();
                if (object.name != null)
                    message.name = String(object.name);
                if (object.description != null)
                    message.description = String(object.description);
                if (object.field_type) {
                    if (!Array.isArray(object.field_type))
                        throw TypeError(".cosmos_proto.ScalarDescriptor.field_type: array expected");
                    message.field_type = [];
                    for (var i = 0; i < object.field_type.length; ++i)
                        switch (object.field_type[i]) {
                        default:
                        case "SCALAR_TYPE_UNSPECIFIED":
                        case 0:
                            message.field_type[i] = 0;
                            break;
                        case "SCALAR_TYPE_STRING":
                        case 1:
                            message.field_type[i] = 1;
                            break;
                        case "SCALAR_TYPE_BYTES":
                        case 2:
                            message.field_type[i] = 2;
                            break;
                        }
                }
                if (object.legacy_amino_encoding != null)
                    message.legacy_amino_encoding = String(object.legacy_amino_encoding);
                return message;
            };
    
            /**
             * Creates a plain object from a ScalarDescriptor message. Also converts values to other types if specified.
             * @function toObject
             * @memberof cosmos_proto.ScalarDescriptor
             * @static
             * @param {cosmos_proto.ScalarDescriptor} message ScalarDescriptor
             * @param {$protobuf.IConversionOptions} [options] Conversion options
             * @returns {Object.<string,*>} Plain object
             */
            ScalarDescriptor.toObject = function toObject(message, options) {
                if (!options)
                    options = {};
                var object = {};
                if (options.arrays || options.defaults)
                    object.field_type = [];
                if (options.defaults) {
                    object.name = "";
                    object.description = "";
                    object.legacy_amino_encoding = "";
                }
                if (message.name != null && message.hasOwnProperty("name"))
                    object.name = message.name;
                if (message.description != null && message.hasOwnProperty("description"))
                    object.description = message.description;
                if (message.field_type && message.field_type.length) {
                    object.field_type = [];
                    for (var j = 0; j < message.field_type.length; ++j)
                        object.field_type[j] = options.enums === String ? $root.cosmos_proto.ScalarType[message.field_type[j]] : message.field_type[j];
                }
                if (message.legacy_amino_encoding != null && message.hasOwnProperty("legacy_amino_encoding"))
                    object.legacy_amino_encoding = message.legacy_amino_encoding;
                return object;
            };
    
            /**
             * Converts this ScalarDescriptor to JSON.
             * @function toJSON
             * @memberof cosmos_proto.ScalarDescriptor
             * @instance
             * @returns {Object.<string,*>} JSON object
             */
            ScalarDescriptor.prototype.toJSON = function toJSON() {
                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
            };
    
            return ScalarDescriptor;
        })();
    
        /**
         * ScalarType enum.
         * @name cosmos_proto.ScalarType
         * @enum {number}
         * @property {number} SCALAR_TYPE_UNSPECIFIED=0 SCALAR_TYPE_UNSPECIFIED value
         * @property {number} SCALAR_TYPE_STRING=1 SCALAR_TYPE_STRING value
         * @property {number} SCALAR_TYPE_BYTES=2 SCALAR_TYPE_BYTES value
         */
        cosmos_proto.ScalarType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[0] = "SCALAR_TYPE_UNSPECIFIED"] = 0;
            values[valuesById[1] = "SCALAR_TYPE_STRING"] = 1;
            values[valuesById[2] = "SCALAR_TYPE_BYTES"] = 2;
            return values;
        })();
    
        return cosmos_proto;
    })();
    
    $root.tendermint = (function() {
    
        /**
         * Namespace tendermint.
         * @exports tendermint
         * @namespace
         */
        var tendermint = {};
    
        tendermint.crypto = (function() {
    
            /**
             * Namespace crypto.
             * @memberof tendermint
             * @namespace
             */
            var crypto = {};
    
            crypto.Proof = (function() {
    
                /**
                 * Properties of a Proof.
                 * @memberof tendermint.crypto
                 * @interface IProof
                 * @property {Long|null} [total] Proof total
                 * @property {Long|null} [index] Proof index
                 * @property {Uint8Array|null} [leaf_hash] Proof leaf_hash
                 * @property {Array.<Uint8Array>|null} [aunts] Proof aunts
                 */
    
                /**
                 * Constructs a new Proof.
                 * @memberof tendermint.crypto
                 * @classdesc Represents a Proof.
                 * @implements IProof
                 * @constructor
                 * @param {tendermint.crypto.IProof=} [properties] Properties to set
                 */
                function Proof(properties) {
                    this.aunts = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Proof total.
                 * @member {Long} total
                 * @memberof tendermint.crypto.Proof
                 * @instance
                 */
                Proof.prototype.total = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Proof index.
                 * @member {Long} index
                 * @memberof tendermint.crypto.Proof
                 * @instance
                 */
                Proof.prototype.index = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Proof leaf_hash.
                 * @member {Uint8Array} leaf_hash
                 * @memberof tendermint.crypto.Proof
                 * @instance
                 */
                Proof.prototype.leaf_hash = $util.newBuffer([]);
    
                /**
                 * Proof aunts.
                 * @member {Array.<Uint8Array>} aunts
                 * @memberof tendermint.crypto.Proof
                 * @instance
                 */
                Proof.prototype.aunts = $util.emptyArray;
    
                /**
                 * Encodes the specified Proof message. Does not implicitly {@link tendermint.crypto.Proof.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.crypto.Proof
                 * @static
                 * @param {tendermint.crypto.IProof} message Proof message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Proof.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.total);
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.index);
                    if (message.leaf_hash != null && Object.hasOwnProperty.call(message, "leaf_hash"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.leaf_hash);
                    if (message.aunts != null && message.aunts.length)
                        for (var i = 0; i < message.aunts.length; ++i)
                            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.aunts[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified Proof message, length delimited. Does not implicitly {@link tendermint.crypto.Proof.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.crypto.Proof
                 * @static
                 * @param {tendermint.crypto.IProof} message Proof message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Proof.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Proof message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.crypto.Proof
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.crypto.Proof} Proof
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Proof.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.Proof();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.total = reader.int64();
                            break;
                        case 2:
                            message.index = reader.int64();
                            break;
                        case 3:
                            message.leaf_hash = reader.bytes();
                            break;
                        case 4:
                            if (!(message.aunts && message.aunts.length))
                                message.aunts = [];
                            message.aunts.push(reader.bytes());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Proof message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.crypto.Proof
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.crypto.Proof} Proof
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Proof.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Proof message.
                 * @function verify
                 * @memberof tendermint.crypto.Proof
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Proof.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.total != null && message.hasOwnProperty("total"))
                        if (!$util.isInteger(message.total) && !(message.total && $util.isInteger(message.total.low) && $util.isInteger(message.total.high)))
                            return "total: integer|Long expected";
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                            return "index: integer|Long expected";
                    if (message.leaf_hash != null && message.hasOwnProperty("leaf_hash"))
                        if (!(message.leaf_hash && typeof message.leaf_hash.length === "number" || $util.isString(message.leaf_hash)))
                            return "leaf_hash: buffer expected";
                    if (message.aunts != null && message.hasOwnProperty("aunts")) {
                        if (!Array.isArray(message.aunts))
                            return "aunts: array expected";
                        for (var i = 0; i < message.aunts.length; ++i)
                            if (!(message.aunts[i] && typeof message.aunts[i].length === "number" || $util.isString(message.aunts[i])))
                                return "aunts: buffer[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a Proof message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.crypto.Proof
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.crypto.Proof} Proof
                 */
                Proof.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.crypto.Proof)
                        return object;
                    var message = new $root.tendermint.crypto.Proof();
                    if (object.total != null)
                        if ($util.Long)
                            (message.total = $util.Long.fromValue(object.total)).unsigned = false;
                        else if (typeof object.total === "string")
                            message.total = parseInt(object.total, 10);
                        else if (typeof object.total === "number")
                            message.total = object.total;
                        else if (typeof object.total === "object")
                            message.total = new $util.LongBits(object.total.low >>> 0, object.total.high >>> 0).toNumber();
                    if (object.index != null)
                        if ($util.Long)
                            (message.index = $util.Long.fromValue(object.index)).unsigned = false;
                        else if (typeof object.index === "string")
                            message.index = parseInt(object.index, 10);
                        else if (typeof object.index === "number")
                            message.index = object.index;
                        else if (typeof object.index === "object")
                            message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber();
                    if (object.leaf_hash != null)
                        if (typeof object.leaf_hash === "string")
                            $util.base64.decode(object.leaf_hash, message.leaf_hash = $util.newBuffer($util.base64.length(object.leaf_hash)), 0);
                        else if (object.leaf_hash.length)
                            message.leaf_hash = object.leaf_hash;
                    if (object.aunts) {
                        if (!Array.isArray(object.aunts))
                            throw TypeError(".tendermint.crypto.Proof.aunts: array expected");
                        message.aunts = [];
                        for (var i = 0; i < object.aunts.length; ++i)
                            if (typeof object.aunts[i] === "string")
                                $util.base64.decode(object.aunts[i], message.aunts[i] = $util.newBuffer($util.base64.length(object.aunts[i])), 0);
                            else if (object.aunts[i].length)
                                message.aunts[i] = object.aunts[i];
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Proof message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.crypto.Proof
                 * @static
                 * @param {tendermint.crypto.Proof} message Proof
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Proof.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.aunts = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.total = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.total = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.index = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.leaf_hash = "";
                        else {
                            object.leaf_hash = [];
                            if (options.bytes !== Array)
                                object.leaf_hash = $util.newBuffer(object.leaf_hash);
                        }
                    }
                    if (message.total != null && message.hasOwnProperty("total"))
                        if (typeof message.total === "number")
                            object.total = options.longs === String ? String(message.total) : message.total;
                        else
                            object.total = options.longs === String ? $util.Long.prototype.toString.call(message.total) : options.longs === Number ? new $util.LongBits(message.total.low >>> 0, message.total.high >>> 0).toNumber() : message.total;
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (typeof message.index === "number")
                            object.index = options.longs === String ? String(message.index) : message.index;
                        else
                            object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber() : message.index;
                    if (message.leaf_hash != null && message.hasOwnProperty("leaf_hash"))
                        object.leaf_hash = options.bytes === String ? $util.base64.encode(message.leaf_hash, 0, message.leaf_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.leaf_hash) : message.leaf_hash;
                    if (message.aunts && message.aunts.length) {
                        object.aunts = [];
                        for (var j = 0; j < message.aunts.length; ++j)
                            object.aunts[j] = options.bytes === String ? $util.base64.encode(message.aunts[j], 0, message.aunts[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.aunts[j]) : message.aunts[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this Proof to JSON.
                 * @function toJSON
                 * @memberof tendermint.crypto.Proof
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Proof.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Proof;
            })();
    
            crypto.ValueOp = (function() {
    
                /**
                 * Properties of a ValueOp.
                 * @memberof tendermint.crypto
                 * @interface IValueOp
                 * @property {Uint8Array|null} [key] ValueOp key
                 * @property {tendermint.crypto.IProof|null} [proof] ValueOp proof
                 */
    
                /**
                 * Constructs a new ValueOp.
                 * @memberof tendermint.crypto
                 * @classdesc Represents a ValueOp.
                 * @implements IValueOp
                 * @constructor
                 * @param {tendermint.crypto.IValueOp=} [properties] Properties to set
                 */
                function ValueOp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ValueOp key.
                 * @member {Uint8Array} key
                 * @memberof tendermint.crypto.ValueOp
                 * @instance
                 */
                ValueOp.prototype.key = $util.newBuffer([]);
    
                /**
                 * ValueOp proof.
                 * @member {tendermint.crypto.IProof|null|undefined} proof
                 * @memberof tendermint.crypto.ValueOp
                 * @instance
                 */
                ValueOp.prototype.proof = null;
    
                /**
                 * Encodes the specified ValueOp message. Does not implicitly {@link tendermint.crypto.ValueOp.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.crypto.ValueOp
                 * @static
                 * @param {tendermint.crypto.IValueOp} message ValueOp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueOp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                    if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                        $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ValueOp message, length delimited. Does not implicitly {@link tendermint.crypto.ValueOp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.crypto.ValueOp
                 * @static
                 * @param {tendermint.crypto.IValueOp} message ValueOp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValueOp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ValueOp message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.crypto.ValueOp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.crypto.ValueOp} ValueOp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueOp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ValueOp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.key = reader.bytes();
                            break;
                        case 2:
                            message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ValueOp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.crypto.ValueOp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.crypto.ValueOp} ValueOp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValueOp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ValueOp message.
                 * @function verify
                 * @memberof tendermint.crypto.ValueOp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValueOp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                            return "key: buffer expected";
                    if (message.proof != null && message.hasOwnProperty("proof")) {
                        var error = $root.tendermint.crypto.Proof.verify(message.proof);
                        if (error)
                            return "proof." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ValueOp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.crypto.ValueOp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.crypto.ValueOp} ValueOp
                 */
                ValueOp.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.crypto.ValueOp)
                        return object;
                    var message = new $root.tendermint.crypto.ValueOp();
                    if (object.key != null)
                        if (typeof object.key === "string")
                            $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                        else if (object.key.length)
                            message.key = object.key;
                    if (object.proof != null) {
                        if (typeof object.proof !== "object")
                            throw TypeError(".tendermint.crypto.ValueOp.proof: object expected");
                        message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ValueOp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.crypto.ValueOp
                 * @static
                 * @param {tendermint.crypto.ValueOp} message ValueOp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValueOp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.key = "";
                        else {
                            object.key = [];
                            if (options.bytes !== Array)
                                object.key = $util.newBuffer(object.key);
                        }
                        object.proof = null;
                    }
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                    if (message.proof != null && message.hasOwnProperty("proof"))
                        object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                    return object;
                };
    
                /**
                 * Converts this ValueOp to JSON.
                 * @function toJSON
                 * @memberof tendermint.crypto.ValueOp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValueOp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ValueOp;
            })();
    
            crypto.DominoOp = (function() {
    
                /**
                 * Properties of a DominoOp.
                 * @memberof tendermint.crypto
                 * @interface IDominoOp
                 * @property {string|null} [key] DominoOp key
                 * @property {string|null} [input] DominoOp input
                 * @property {string|null} [output] DominoOp output
                 */
    
                /**
                 * Constructs a new DominoOp.
                 * @memberof tendermint.crypto
                 * @classdesc Represents a DominoOp.
                 * @implements IDominoOp
                 * @constructor
                 * @param {tendermint.crypto.IDominoOp=} [properties] Properties to set
                 */
                function DominoOp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DominoOp key.
                 * @member {string} key
                 * @memberof tendermint.crypto.DominoOp
                 * @instance
                 */
                DominoOp.prototype.key = "";
    
                /**
                 * DominoOp input.
                 * @member {string} input
                 * @memberof tendermint.crypto.DominoOp
                 * @instance
                 */
                DominoOp.prototype.input = "";
    
                /**
                 * DominoOp output.
                 * @member {string} output
                 * @memberof tendermint.crypto.DominoOp
                 * @instance
                 */
                DominoOp.prototype.output = "";
    
                /**
                 * Encodes the specified DominoOp message. Does not implicitly {@link tendermint.crypto.DominoOp.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.crypto.DominoOp
                 * @static
                 * @param {tendermint.crypto.IDominoOp} message DominoOp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DominoOp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                    if (message.input != null && Object.hasOwnProperty.call(message, "input"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.input);
                    if (message.output != null && Object.hasOwnProperty.call(message, "output"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.output);
                    return writer;
                };
    
                /**
                 * Encodes the specified DominoOp message, length delimited. Does not implicitly {@link tendermint.crypto.DominoOp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.crypto.DominoOp
                 * @static
                 * @param {tendermint.crypto.IDominoOp} message DominoOp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DominoOp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DominoOp message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.crypto.DominoOp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.crypto.DominoOp} DominoOp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DominoOp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.DominoOp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.key = reader.string();
                            break;
                        case 2:
                            message.input = reader.string();
                            break;
                        case 3:
                            message.output = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DominoOp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.crypto.DominoOp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.crypto.DominoOp} DominoOp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DominoOp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DominoOp message.
                 * @function verify
                 * @memberof tendermint.crypto.DominoOp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DominoOp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!$util.isString(message.key))
                            return "key: string expected";
                    if (message.input != null && message.hasOwnProperty("input"))
                        if (!$util.isString(message.input))
                            return "input: string expected";
                    if (message.output != null && message.hasOwnProperty("output"))
                        if (!$util.isString(message.output))
                            return "output: string expected";
                    return null;
                };
    
                /**
                 * Creates a DominoOp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.crypto.DominoOp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.crypto.DominoOp} DominoOp
                 */
                DominoOp.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.crypto.DominoOp)
                        return object;
                    var message = new $root.tendermint.crypto.DominoOp();
                    if (object.key != null)
                        message.key = String(object.key);
                    if (object.input != null)
                        message.input = String(object.input);
                    if (object.output != null)
                        message.output = String(object.output);
                    return message;
                };
    
                /**
                 * Creates a plain object from a DominoOp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.crypto.DominoOp
                 * @static
                 * @param {tendermint.crypto.DominoOp} message DominoOp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DominoOp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.key = "";
                        object.input = "";
                        object.output = "";
                    }
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = message.key;
                    if (message.input != null && message.hasOwnProperty("input"))
                        object.input = message.input;
                    if (message.output != null && message.hasOwnProperty("output"))
                        object.output = message.output;
                    return object;
                };
    
                /**
                 * Converts this DominoOp to JSON.
                 * @function toJSON
                 * @memberof tendermint.crypto.DominoOp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DominoOp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return DominoOp;
            })();
    
            crypto.ProofOp = (function() {
    
                /**
                 * Properties of a ProofOp.
                 * @memberof tendermint.crypto
                 * @interface IProofOp
                 * @property {string|null} [type] ProofOp type
                 * @property {Uint8Array|null} [key] ProofOp key
                 * @property {Uint8Array|null} [data] ProofOp data
                 */
    
                /**
                 * Constructs a new ProofOp.
                 * @memberof tendermint.crypto
                 * @classdesc Represents a ProofOp.
                 * @implements IProofOp
                 * @constructor
                 * @param {tendermint.crypto.IProofOp=} [properties] Properties to set
                 */
                function ProofOp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ProofOp type.
                 * @member {string} type
                 * @memberof tendermint.crypto.ProofOp
                 * @instance
                 */
                ProofOp.prototype.type = "";
    
                /**
                 * ProofOp key.
                 * @member {Uint8Array} key
                 * @memberof tendermint.crypto.ProofOp
                 * @instance
                 */
                ProofOp.prototype.key = $util.newBuffer([]);
    
                /**
                 * ProofOp data.
                 * @member {Uint8Array} data
                 * @memberof tendermint.crypto.ProofOp
                 * @instance
                 */
                ProofOp.prototype.data = $util.newBuffer([]);
    
                /**
                 * Encodes the specified ProofOp message. Does not implicitly {@link tendermint.crypto.ProofOp.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.crypto.ProofOp
                 * @static
                 * @param {tendermint.crypto.IProofOp} message ProofOp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProofOp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.key);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.data);
                    return writer;
                };
    
                /**
                 * Encodes the specified ProofOp message, length delimited. Does not implicitly {@link tendermint.crypto.ProofOp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.crypto.ProofOp
                 * @static
                 * @param {tendermint.crypto.IProofOp} message ProofOp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProofOp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ProofOp message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.crypto.ProofOp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.crypto.ProofOp} ProofOp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProofOp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ProofOp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            message.key = reader.bytes();
                            break;
                        case 3:
                            message.data = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ProofOp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.crypto.ProofOp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.crypto.ProofOp} ProofOp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProofOp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ProofOp message.
                 * @function verify
                 * @memberof tendermint.crypto.ProofOp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProofOp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                            return "key: buffer expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a ProofOp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.crypto.ProofOp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.crypto.ProofOp} ProofOp
                 */
                ProofOp.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.crypto.ProofOp)
                        return object;
                    var message = new $root.tendermint.crypto.ProofOp();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.key != null)
                        if (typeof object.key === "string")
                            $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                        else if (object.key.length)
                            message.key = object.key;
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    return message;
                };
    
                /**
                 * Creates a plain object from a ProofOp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.crypto.ProofOp
                 * @static
                 * @param {tendermint.crypto.ProofOp} message ProofOp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProofOp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = "";
                        if (options.bytes === String)
                            object.key = "";
                        else {
                            object.key = [];
                            if (options.bytes !== Array)
                                object.key = $util.newBuffer(object.key);
                        }
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    return object;
                };
    
                /**
                 * Converts this ProofOp to JSON.
                 * @function toJSON
                 * @memberof tendermint.crypto.ProofOp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProofOp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ProofOp;
            })();
    
            crypto.ProofOps = (function() {
    
                /**
                 * Properties of a ProofOps.
                 * @memberof tendermint.crypto
                 * @interface IProofOps
                 * @property {Array.<tendermint.crypto.IProofOp>|null} [ops] ProofOps ops
                 */
    
                /**
                 * Constructs a new ProofOps.
                 * @memberof tendermint.crypto
                 * @classdesc Represents a ProofOps.
                 * @implements IProofOps
                 * @constructor
                 * @param {tendermint.crypto.IProofOps=} [properties] Properties to set
                 */
                function ProofOps(properties) {
                    this.ops = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ProofOps ops.
                 * @member {Array.<tendermint.crypto.IProofOp>} ops
                 * @memberof tendermint.crypto.ProofOps
                 * @instance
                 */
                ProofOps.prototype.ops = $util.emptyArray;
    
                /**
                 * Encodes the specified ProofOps message. Does not implicitly {@link tendermint.crypto.ProofOps.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.crypto.ProofOps
                 * @static
                 * @param {tendermint.crypto.IProofOps} message ProofOps message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProofOps.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ops != null && message.ops.length)
                        for (var i = 0; i < message.ops.length; ++i)
                            $root.tendermint.crypto.ProofOp.encode(message.ops[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ProofOps message, length delimited. Does not implicitly {@link tendermint.crypto.ProofOps.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.crypto.ProofOps
                 * @static
                 * @param {tendermint.crypto.IProofOps} message ProofOps message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ProofOps.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ProofOps message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.crypto.ProofOps
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.crypto.ProofOps} ProofOps
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProofOps.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.ProofOps();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.ops && message.ops.length))
                                message.ops = [];
                            message.ops.push($root.tendermint.crypto.ProofOp.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ProofOps message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.crypto.ProofOps
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.crypto.ProofOps} ProofOps
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ProofOps.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ProofOps message.
                 * @function verify
                 * @memberof tendermint.crypto.ProofOps
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ProofOps.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ops != null && message.hasOwnProperty("ops")) {
                        if (!Array.isArray(message.ops))
                            return "ops: array expected";
                        for (var i = 0; i < message.ops.length; ++i) {
                            var error = $root.tendermint.crypto.ProofOp.verify(message.ops[i]);
                            if (error)
                                return "ops." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ProofOps message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.crypto.ProofOps
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.crypto.ProofOps} ProofOps
                 */
                ProofOps.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.crypto.ProofOps)
                        return object;
                    var message = new $root.tendermint.crypto.ProofOps();
                    if (object.ops) {
                        if (!Array.isArray(object.ops))
                            throw TypeError(".tendermint.crypto.ProofOps.ops: array expected");
                        message.ops = [];
                        for (var i = 0; i < object.ops.length; ++i) {
                            if (typeof object.ops[i] !== "object")
                                throw TypeError(".tendermint.crypto.ProofOps.ops: object expected");
                            message.ops[i] = $root.tendermint.crypto.ProofOp.fromObject(object.ops[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ProofOps message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.crypto.ProofOps
                 * @static
                 * @param {tendermint.crypto.ProofOps} message ProofOps
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ProofOps.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.ops = [];
                    if (message.ops && message.ops.length) {
                        object.ops = [];
                        for (var j = 0; j < message.ops.length; ++j)
                            object.ops[j] = $root.tendermint.crypto.ProofOp.toObject(message.ops[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ProofOps to JSON.
                 * @function toJSON
                 * @memberof tendermint.crypto.ProofOps
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ProofOps.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ProofOps;
            })();
    
            crypto.PublicKey = (function() {
    
                /**
                 * Properties of a PublicKey.
                 * @memberof tendermint.crypto
                 * @interface IPublicKey
                 * @property {Uint8Array|null} [ed25519] PublicKey ed25519
                 * @property {Uint8Array|null} [secp256k1] PublicKey secp256k1
                 */
    
                /**
                 * Constructs a new PublicKey.
                 * @memberof tendermint.crypto
                 * @classdesc Represents a PublicKey.
                 * @implements IPublicKey
                 * @constructor
                 * @param {tendermint.crypto.IPublicKey=} [properties] Properties to set
                 */
                function PublicKey(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PublicKey ed25519.
                 * @member {Uint8Array|null|undefined} ed25519
                 * @memberof tendermint.crypto.PublicKey
                 * @instance
                 */
                PublicKey.prototype.ed25519 = null;
    
                /**
                 * PublicKey secp256k1.
                 * @member {Uint8Array|null|undefined} secp256k1
                 * @memberof tendermint.crypto.PublicKey
                 * @instance
                 */
                PublicKey.prototype.secp256k1 = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * PublicKey sum.
                 * @member {"ed25519"|"secp256k1"|undefined} sum
                 * @memberof tendermint.crypto.PublicKey
                 * @instance
                 */
                Object.defineProperty(PublicKey.prototype, "sum", {
                    get: $util.oneOfGetter($oneOfFields = ["ed25519", "secp256k1"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Encodes the specified PublicKey message. Does not implicitly {@link tendermint.crypto.PublicKey.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.crypto.PublicKey
                 * @static
                 * @param {tendermint.crypto.IPublicKey} message PublicKey message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PublicKey.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ed25519 != null && Object.hasOwnProperty.call(message, "ed25519"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.ed25519);
                    if (message.secp256k1 != null && Object.hasOwnProperty.call(message, "secp256k1"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.secp256k1);
                    return writer;
                };
    
                /**
                 * Encodes the specified PublicKey message, length delimited. Does not implicitly {@link tendermint.crypto.PublicKey.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.crypto.PublicKey
                 * @static
                 * @param {tendermint.crypto.IPublicKey} message PublicKey message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PublicKey.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PublicKey message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.crypto.PublicKey
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.crypto.PublicKey} PublicKey
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PublicKey.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.crypto.PublicKey();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ed25519 = reader.bytes();
                            break;
                        case 2:
                            message.secp256k1 = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PublicKey message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.crypto.PublicKey
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.crypto.PublicKey} PublicKey
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PublicKey.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PublicKey message.
                 * @function verify
                 * @memberof tendermint.crypto.PublicKey
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PublicKey.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                        properties.sum = 1;
                        if (!(message.ed25519 && typeof message.ed25519.length === "number" || $util.isString(message.ed25519)))
                            return "ed25519: buffer expected";
                    }
                    if (message.secp256k1 != null && message.hasOwnProperty("secp256k1")) {
                        if (properties.sum === 1)
                            return "sum: multiple values";
                        properties.sum = 1;
                        if (!(message.secp256k1 && typeof message.secp256k1.length === "number" || $util.isString(message.secp256k1)))
                            return "secp256k1: buffer expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a PublicKey message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.crypto.PublicKey
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.crypto.PublicKey} PublicKey
                 */
                PublicKey.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.crypto.PublicKey)
                        return object;
                    var message = new $root.tendermint.crypto.PublicKey();
                    if (object.ed25519 != null)
                        if (typeof object.ed25519 === "string")
                            $util.base64.decode(object.ed25519, message.ed25519 = $util.newBuffer($util.base64.length(object.ed25519)), 0);
                        else if (object.ed25519.length)
                            message.ed25519 = object.ed25519;
                    if (object.secp256k1 != null)
                        if (typeof object.secp256k1 === "string")
                            $util.base64.decode(object.secp256k1, message.secp256k1 = $util.newBuffer($util.base64.length(object.secp256k1)), 0);
                        else if (object.secp256k1.length)
                            message.secp256k1 = object.secp256k1;
                    return message;
                };
    
                /**
                 * Creates a plain object from a PublicKey message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.crypto.PublicKey
                 * @static
                 * @param {tendermint.crypto.PublicKey} message PublicKey
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PublicKey.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.ed25519 != null && message.hasOwnProperty("ed25519")) {
                        object.ed25519 = options.bytes === String ? $util.base64.encode(message.ed25519, 0, message.ed25519.length) : options.bytes === Array ? Array.prototype.slice.call(message.ed25519) : message.ed25519;
                        if (options.oneofs)
                            object.sum = "ed25519";
                    }
                    if (message.secp256k1 != null && message.hasOwnProperty("secp256k1")) {
                        object.secp256k1 = options.bytes === String ? $util.base64.encode(message.secp256k1, 0, message.secp256k1.length) : options.bytes === Array ? Array.prototype.slice.call(message.secp256k1) : message.secp256k1;
                        if (options.oneofs)
                            object.sum = "secp256k1";
                    }
                    return object;
                };
    
                /**
                 * Converts this PublicKey to JSON.
                 * @function toJSON
                 * @memberof tendermint.crypto.PublicKey
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PublicKey.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PublicKey;
            })();
    
            return crypto;
        })();
    
        tendermint.abci = (function() {
    
            /**
             * Namespace abci.
             * @memberof tendermint
             * @namespace
             */
            var abci = {};
    
            abci.Request = (function() {
    
                /**
                 * Properties of a Request.
                 * @memberof tendermint.abci
                 * @interface IRequest
                 * @property {tendermint.abci.IRequestEcho|null} [echo] Request echo
                 * @property {tendermint.abci.IRequestFlush|null} [flush] Request flush
                 * @property {tendermint.abci.IRequestInfo|null} [info] Request info
                 * @property {tendermint.abci.IRequestSetOption|null} [set_option] Request set_option
                 * @property {tendermint.abci.IRequestInitChain|null} [init_chain] Request init_chain
                 * @property {tendermint.abci.IRequestQuery|null} [query] Request query
                 * @property {tendermint.abci.IRequestBeginBlock|null} [begin_block] Request begin_block
                 * @property {tendermint.abci.IRequestCheckTx|null} [check_tx] Request check_tx
                 * @property {tendermint.abci.IRequestDeliverTx|null} [deliver_tx] Request deliver_tx
                 * @property {tendermint.abci.IRequestEndBlock|null} [end_block] Request end_block
                 * @property {tendermint.abci.IRequestCommit|null} [commit] Request commit
                 * @property {tendermint.abci.IRequestListSnapshots|null} [list_snapshots] Request list_snapshots
                 * @property {tendermint.abci.IRequestOfferSnapshot|null} [offer_snapshot] Request offer_snapshot
                 * @property {tendermint.abci.IRequestLoadSnapshotChunk|null} [load_snapshot_chunk] Request load_snapshot_chunk
                 * @property {tendermint.abci.IRequestApplySnapshotChunk|null} [apply_snapshot_chunk] Request apply_snapshot_chunk
                 */
    
                /**
                 * Constructs a new Request.
                 * @memberof tendermint.abci
                 * @classdesc Represents a Request.
                 * @implements IRequest
                 * @constructor
                 * @param {tendermint.abci.IRequest=} [properties] Properties to set
                 */
                function Request(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Request echo.
                 * @member {tendermint.abci.IRequestEcho|null|undefined} echo
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.echo = null;
    
                /**
                 * Request flush.
                 * @member {tendermint.abci.IRequestFlush|null|undefined} flush
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.flush = null;
    
                /**
                 * Request info.
                 * @member {tendermint.abci.IRequestInfo|null|undefined} info
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.info = null;
    
                /**
                 * Request set_option.
                 * @member {tendermint.abci.IRequestSetOption|null|undefined} set_option
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.set_option = null;
    
                /**
                 * Request init_chain.
                 * @member {tendermint.abci.IRequestInitChain|null|undefined} init_chain
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.init_chain = null;
    
                /**
                 * Request query.
                 * @member {tendermint.abci.IRequestQuery|null|undefined} query
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.query = null;
    
                /**
                 * Request begin_block.
                 * @member {tendermint.abci.IRequestBeginBlock|null|undefined} begin_block
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.begin_block = null;
    
                /**
                 * Request check_tx.
                 * @member {tendermint.abci.IRequestCheckTx|null|undefined} check_tx
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.check_tx = null;
    
                /**
                 * Request deliver_tx.
                 * @member {tendermint.abci.IRequestDeliverTx|null|undefined} deliver_tx
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.deliver_tx = null;
    
                /**
                 * Request end_block.
                 * @member {tendermint.abci.IRequestEndBlock|null|undefined} end_block
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.end_block = null;
    
                /**
                 * Request commit.
                 * @member {tendermint.abci.IRequestCommit|null|undefined} commit
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.commit = null;
    
                /**
                 * Request list_snapshots.
                 * @member {tendermint.abci.IRequestListSnapshots|null|undefined} list_snapshots
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.list_snapshots = null;
    
                /**
                 * Request offer_snapshot.
                 * @member {tendermint.abci.IRequestOfferSnapshot|null|undefined} offer_snapshot
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.offer_snapshot = null;
    
                /**
                 * Request load_snapshot_chunk.
                 * @member {tendermint.abci.IRequestLoadSnapshotChunk|null|undefined} load_snapshot_chunk
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.load_snapshot_chunk = null;
    
                /**
                 * Request apply_snapshot_chunk.
                 * @member {tendermint.abci.IRequestApplySnapshotChunk|null|undefined} apply_snapshot_chunk
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Request.prototype.apply_snapshot_chunk = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Request value.
                 * @member {"echo"|"flush"|"info"|"set_option"|"init_chain"|"query"|"begin_block"|"check_tx"|"deliver_tx"|"end_block"|"commit"|"list_snapshots"|"offer_snapshot"|"load_snapshot_chunk"|"apply_snapshot_chunk"|undefined} value
                 * @memberof tendermint.abci.Request
                 * @instance
                 */
                Object.defineProperty(Request.prototype, "value", {
                    get: $util.oneOfGetter($oneOfFields = ["echo", "flush", "info", "set_option", "init_chain", "query", "begin_block", "check_tx", "deliver_tx", "end_block", "commit", "list_snapshots", "offer_snapshot", "load_snapshot_chunk", "apply_snapshot_chunk"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Encodes the specified Request message. Does not implicitly {@link tendermint.abci.Request.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.Request
                 * @static
                 * @param {tendermint.abci.IRequest} message Request message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Request.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.echo != null && Object.hasOwnProperty.call(message, "echo"))
                        $root.tendermint.abci.RequestEcho.encode(message.echo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.flush != null && Object.hasOwnProperty.call(message, "flush"))
                        $root.tendermint.abci.RequestFlush.encode(message.flush, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                        $root.tendermint.abci.RequestInfo.encode(message.info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.set_option != null && Object.hasOwnProperty.call(message, "set_option"))
                        $root.tendermint.abci.RequestSetOption.encode(message.set_option, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.init_chain != null && Object.hasOwnProperty.call(message, "init_chain"))
                        $root.tendermint.abci.RequestInitChain.encode(message.init_chain, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                        $root.tendermint.abci.RequestQuery.encode(message.query, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.begin_block != null && Object.hasOwnProperty.call(message, "begin_block"))
                        $root.tendermint.abci.RequestBeginBlock.encode(message.begin_block, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.check_tx != null && Object.hasOwnProperty.call(message, "check_tx"))
                        $root.tendermint.abci.RequestCheckTx.encode(message.check_tx, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.deliver_tx != null && Object.hasOwnProperty.call(message, "deliver_tx"))
                        $root.tendermint.abci.RequestDeliverTx.encode(message.deliver_tx, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.end_block != null && Object.hasOwnProperty.call(message, "end_block"))
                        $root.tendermint.abci.RequestEndBlock.encode(message.end_block, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                        $root.tendermint.abci.RequestCommit.encode(message.commit, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.list_snapshots != null && Object.hasOwnProperty.call(message, "list_snapshots"))
                        $root.tendermint.abci.RequestListSnapshots.encode(message.list_snapshots, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message.offer_snapshot != null && Object.hasOwnProperty.call(message, "offer_snapshot"))
                        $root.tendermint.abci.RequestOfferSnapshot.encode(message.offer_snapshot, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                    if (message.load_snapshot_chunk != null && Object.hasOwnProperty.call(message, "load_snapshot_chunk"))
                        $root.tendermint.abci.RequestLoadSnapshotChunk.encode(message.load_snapshot_chunk, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                    if (message.apply_snapshot_chunk != null && Object.hasOwnProperty.call(message, "apply_snapshot_chunk"))
                        $root.tendermint.abci.RequestApplySnapshotChunk.encode(message.apply_snapshot_chunk, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Request message, length delimited. Does not implicitly {@link tendermint.abci.Request.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.Request
                 * @static
                 * @param {tendermint.abci.IRequest} message Request message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Request.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Request message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.Request
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.Request} Request
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Request.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Request();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.echo = $root.tendermint.abci.RequestEcho.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.flush = $root.tendermint.abci.RequestFlush.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.info = $root.tendermint.abci.RequestInfo.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.set_option = $root.tendermint.abci.RequestSetOption.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.init_chain = $root.tendermint.abci.RequestInitChain.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.query = $root.tendermint.abci.RequestQuery.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.begin_block = $root.tendermint.abci.RequestBeginBlock.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.check_tx = $root.tendermint.abci.RequestCheckTx.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.deliver_tx = $root.tendermint.abci.RequestDeliverTx.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.end_block = $root.tendermint.abci.RequestEndBlock.decode(reader, reader.uint32());
                            break;
                        case 11:
                            message.commit = $root.tendermint.abci.RequestCommit.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.list_snapshots = $root.tendermint.abci.RequestListSnapshots.decode(reader, reader.uint32());
                            break;
                        case 13:
                            message.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.decode(reader, reader.uint32());
                            break;
                        case 14:
                            message.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.decode(reader, reader.uint32());
                            break;
                        case 15:
                            message.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Request message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.Request
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.Request} Request
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Request.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Request message.
                 * @function verify
                 * @memberof tendermint.abci.Request
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Request.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.echo != null && message.hasOwnProperty("echo")) {
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestEcho.verify(message.echo);
                            if (error)
                                return "echo." + error;
                        }
                    }
                    if (message.flush != null && message.hasOwnProperty("flush")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestFlush.verify(message.flush);
                            if (error)
                                return "flush." + error;
                        }
                    }
                    if (message.info != null && message.hasOwnProperty("info")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestInfo.verify(message.info);
                            if (error)
                                return "info." + error;
                        }
                    }
                    if (message.set_option != null && message.hasOwnProperty("set_option")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestSetOption.verify(message.set_option);
                            if (error)
                                return "set_option." + error;
                        }
                    }
                    if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestInitChain.verify(message.init_chain);
                            if (error)
                                return "init_chain." + error;
                        }
                    }
                    if (message.query != null && message.hasOwnProperty("query")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestQuery.verify(message.query);
                            if (error)
                                return "query." + error;
                        }
                    }
                    if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestBeginBlock.verify(message.begin_block);
                            if (error)
                                return "begin_block." + error;
                        }
                    }
                    if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestCheckTx.verify(message.check_tx);
                            if (error)
                                return "check_tx." + error;
                        }
                    }
                    if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestDeliverTx.verify(message.deliver_tx);
                            if (error)
                                return "deliver_tx." + error;
                        }
                    }
                    if (message.end_block != null && message.hasOwnProperty("end_block")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestEndBlock.verify(message.end_block);
                            if (error)
                                return "end_block." + error;
                        }
                    }
                    if (message.commit != null && message.hasOwnProperty("commit")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestCommit.verify(message.commit);
                            if (error)
                                return "commit." + error;
                        }
                    }
                    if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestListSnapshots.verify(message.list_snapshots);
                            if (error)
                                return "list_snapshots." + error;
                        }
                    }
                    if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestOfferSnapshot.verify(message.offer_snapshot);
                            if (error)
                                return "offer_snapshot." + error;
                        }
                    }
                    if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestLoadSnapshotChunk.verify(message.load_snapshot_chunk);
                            if (error)
                                return "load_snapshot_chunk." + error;
                        }
                    }
                    if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.RequestApplySnapshotChunk.verify(message.apply_snapshot_chunk);
                            if (error)
                                return "apply_snapshot_chunk." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Request message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.Request
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.Request} Request
                 */
                Request.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.Request)
                        return object;
                    var message = new $root.tendermint.abci.Request();
                    if (object.echo != null) {
                        if (typeof object.echo !== "object")
                            throw TypeError(".tendermint.abci.Request.echo: object expected");
                        message.echo = $root.tendermint.abci.RequestEcho.fromObject(object.echo);
                    }
                    if (object.flush != null) {
                        if (typeof object.flush !== "object")
                            throw TypeError(".tendermint.abci.Request.flush: object expected");
                        message.flush = $root.tendermint.abci.RequestFlush.fromObject(object.flush);
                    }
                    if (object.info != null) {
                        if (typeof object.info !== "object")
                            throw TypeError(".tendermint.abci.Request.info: object expected");
                        message.info = $root.tendermint.abci.RequestInfo.fromObject(object.info);
                    }
                    if (object.set_option != null) {
                        if (typeof object.set_option !== "object")
                            throw TypeError(".tendermint.abci.Request.set_option: object expected");
                        message.set_option = $root.tendermint.abci.RequestSetOption.fromObject(object.set_option);
                    }
                    if (object.init_chain != null) {
                        if (typeof object.init_chain !== "object")
                            throw TypeError(".tendermint.abci.Request.init_chain: object expected");
                        message.init_chain = $root.tendermint.abci.RequestInitChain.fromObject(object.init_chain);
                    }
                    if (object.query != null) {
                        if (typeof object.query !== "object")
                            throw TypeError(".tendermint.abci.Request.query: object expected");
                        message.query = $root.tendermint.abci.RequestQuery.fromObject(object.query);
                    }
                    if (object.begin_block != null) {
                        if (typeof object.begin_block !== "object")
                            throw TypeError(".tendermint.abci.Request.begin_block: object expected");
                        message.begin_block = $root.tendermint.abci.RequestBeginBlock.fromObject(object.begin_block);
                    }
                    if (object.check_tx != null) {
                        if (typeof object.check_tx !== "object")
                            throw TypeError(".tendermint.abci.Request.check_tx: object expected");
                        message.check_tx = $root.tendermint.abci.RequestCheckTx.fromObject(object.check_tx);
                    }
                    if (object.deliver_tx != null) {
                        if (typeof object.deliver_tx !== "object")
                            throw TypeError(".tendermint.abci.Request.deliver_tx: object expected");
                        message.deliver_tx = $root.tendermint.abci.RequestDeliverTx.fromObject(object.deliver_tx);
                    }
                    if (object.end_block != null) {
                        if (typeof object.end_block !== "object")
                            throw TypeError(".tendermint.abci.Request.end_block: object expected");
                        message.end_block = $root.tendermint.abci.RequestEndBlock.fromObject(object.end_block);
                    }
                    if (object.commit != null) {
                        if (typeof object.commit !== "object")
                            throw TypeError(".tendermint.abci.Request.commit: object expected");
                        message.commit = $root.tendermint.abci.RequestCommit.fromObject(object.commit);
                    }
                    if (object.list_snapshots != null) {
                        if (typeof object.list_snapshots !== "object")
                            throw TypeError(".tendermint.abci.Request.list_snapshots: object expected");
                        message.list_snapshots = $root.tendermint.abci.RequestListSnapshots.fromObject(object.list_snapshots);
                    }
                    if (object.offer_snapshot != null) {
                        if (typeof object.offer_snapshot !== "object")
                            throw TypeError(".tendermint.abci.Request.offer_snapshot: object expected");
                        message.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.fromObject(object.offer_snapshot);
                    }
                    if (object.load_snapshot_chunk != null) {
                        if (typeof object.load_snapshot_chunk !== "object")
                            throw TypeError(".tendermint.abci.Request.load_snapshot_chunk: object expected");
                        message.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.fromObject(object.load_snapshot_chunk);
                    }
                    if (object.apply_snapshot_chunk != null) {
                        if (typeof object.apply_snapshot_chunk !== "object")
                            throw TypeError(".tendermint.abci.Request.apply_snapshot_chunk: object expected");
                        message.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.fromObject(object.apply_snapshot_chunk);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Request message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.Request
                 * @static
                 * @param {tendermint.abci.Request} message Request
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Request.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.echo != null && message.hasOwnProperty("echo")) {
                        object.echo = $root.tendermint.abci.RequestEcho.toObject(message.echo, options);
                        if (options.oneofs)
                            object.value = "echo";
                    }
                    if (message.flush != null && message.hasOwnProperty("flush")) {
                        object.flush = $root.tendermint.abci.RequestFlush.toObject(message.flush, options);
                        if (options.oneofs)
                            object.value = "flush";
                    }
                    if (message.info != null && message.hasOwnProperty("info")) {
                        object.info = $root.tendermint.abci.RequestInfo.toObject(message.info, options);
                        if (options.oneofs)
                            object.value = "info";
                    }
                    if (message.set_option != null && message.hasOwnProperty("set_option")) {
                        object.set_option = $root.tendermint.abci.RequestSetOption.toObject(message.set_option, options);
                        if (options.oneofs)
                            object.value = "set_option";
                    }
                    if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                        object.init_chain = $root.tendermint.abci.RequestInitChain.toObject(message.init_chain, options);
                        if (options.oneofs)
                            object.value = "init_chain";
                    }
                    if (message.query != null && message.hasOwnProperty("query")) {
                        object.query = $root.tendermint.abci.RequestQuery.toObject(message.query, options);
                        if (options.oneofs)
                            object.value = "query";
                    }
                    if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                        object.begin_block = $root.tendermint.abci.RequestBeginBlock.toObject(message.begin_block, options);
                        if (options.oneofs)
                            object.value = "begin_block";
                    }
                    if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                        object.check_tx = $root.tendermint.abci.RequestCheckTx.toObject(message.check_tx, options);
                        if (options.oneofs)
                            object.value = "check_tx";
                    }
                    if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                        object.deliver_tx = $root.tendermint.abci.RequestDeliverTx.toObject(message.deliver_tx, options);
                        if (options.oneofs)
                            object.value = "deliver_tx";
                    }
                    if (message.end_block != null && message.hasOwnProperty("end_block")) {
                        object.end_block = $root.tendermint.abci.RequestEndBlock.toObject(message.end_block, options);
                        if (options.oneofs)
                            object.value = "end_block";
                    }
                    if (message.commit != null && message.hasOwnProperty("commit")) {
                        object.commit = $root.tendermint.abci.RequestCommit.toObject(message.commit, options);
                        if (options.oneofs)
                            object.value = "commit";
                    }
                    if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                        object.list_snapshots = $root.tendermint.abci.RequestListSnapshots.toObject(message.list_snapshots, options);
                        if (options.oneofs)
                            object.value = "list_snapshots";
                    }
                    if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                        object.offer_snapshot = $root.tendermint.abci.RequestOfferSnapshot.toObject(message.offer_snapshot, options);
                        if (options.oneofs)
                            object.value = "offer_snapshot";
                    }
                    if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                        object.load_snapshot_chunk = $root.tendermint.abci.RequestLoadSnapshotChunk.toObject(message.load_snapshot_chunk, options);
                        if (options.oneofs)
                            object.value = "load_snapshot_chunk";
                    }
                    if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                        object.apply_snapshot_chunk = $root.tendermint.abci.RequestApplySnapshotChunk.toObject(message.apply_snapshot_chunk, options);
                        if (options.oneofs)
                            object.value = "apply_snapshot_chunk";
                    }
                    return object;
                };
    
                /**
                 * Converts this Request to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.Request
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Request.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Request;
            })();
    
            abci.RequestEcho = (function() {
    
                /**
                 * Properties of a RequestEcho.
                 * @memberof tendermint.abci
                 * @interface IRequestEcho
                 * @property {string|null} [message] RequestEcho message
                 */
    
                /**
                 * Constructs a new RequestEcho.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestEcho.
                 * @implements IRequestEcho
                 * @constructor
                 * @param {tendermint.abci.IRequestEcho=} [properties] Properties to set
                 */
                function RequestEcho(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestEcho message.
                 * @member {string} message
                 * @memberof tendermint.abci.RequestEcho
                 * @instance
                 */
                RequestEcho.prototype.message = "";
    
                /**
                 * Encodes the specified RequestEcho message. Does not implicitly {@link tendermint.abci.RequestEcho.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestEcho
                 * @static
                 * @param {tendermint.abci.IRequestEcho} message RequestEcho message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestEcho.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestEcho message, length delimited. Does not implicitly {@link tendermint.abci.RequestEcho.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestEcho
                 * @static
                 * @param {tendermint.abci.IRequestEcho} message RequestEcho message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestEcho.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestEcho message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestEcho
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestEcho} RequestEcho
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestEcho.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestEcho();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestEcho message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestEcho
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestEcho} RequestEcho
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestEcho.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestEcho message.
                 * @function verify
                 * @memberof tendermint.abci.RequestEcho
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestEcho.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    return null;
                };
    
                /**
                 * Creates a RequestEcho message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestEcho
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestEcho} RequestEcho
                 */
                RequestEcho.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestEcho)
                        return object;
                    var message = new $root.tendermint.abci.RequestEcho();
                    if (object.message != null)
                        message.message = String(object.message);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestEcho message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestEcho
                 * @static
                 * @param {tendermint.abci.RequestEcho} message RequestEcho
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestEcho.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.message = "";
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    return object;
                };
    
                /**
                 * Converts this RequestEcho to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestEcho
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestEcho.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestEcho;
            })();
    
            abci.RequestFlush = (function() {
    
                /**
                 * Properties of a RequestFlush.
                 * @memberof tendermint.abci
                 * @interface IRequestFlush
                 */
    
                /**
                 * Constructs a new RequestFlush.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestFlush.
                 * @implements IRequestFlush
                 * @constructor
                 * @param {tendermint.abci.IRequestFlush=} [properties] Properties to set
                 */
                function RequestFlush(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified RequestFlush message. Does not implicitly {@link tendermint.abci.RequestFlush.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestFlush
                 * @static
                 * @param {tendermint.abci.IRequestFlush} message RequestFlush message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestFlush.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestFlush message, length delimited. Does not implicitly {@link tendermint.abci.RequestFlush.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestFlush
                 * @static
                 * @param {tendermint.abci.IRequestFlush} message RequestFlush message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestFlush.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestFlush message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestFlush
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestFlush} RequestFlush
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestFlush.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestFlush();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestFlush message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestFlush
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestFlush} RequestFlush
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestFlush.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestFlush message.
                 * @function verify
                 * @memberof tendermint.abci.RequestFlush
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestFlush.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a RequestFlush message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestFlush
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestFlush} RequestFlush
                 */
                RequestFlush.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestFlush)
                        return object;
                    return new $root.tendermint.abci.RequestFlush();
                };
    
                /**
                 * Creates a plain object from a RequestFlush message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestFlush
                 * @static
                 * @param {tendermint.abci.RequestFlush} message RequestFlush
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestFlush.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this RequestFlush to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestFlush
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestFlush.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestFlush;
            })();
    
            abci.RequestInfo = (function() {
    
                /**
                 * Properties of a RequestInfo.
                 * @memberof tendermint.abci
                 * @interface IRequestInfo
                 * @property {string|null} [version] RequestInfo version
                 * @property {Long|null} [block_version] RequestInfo block_version
                 * @property {Long|null} [p2p_version] RequestInfo p2p_version
                 */
    
                /**
                 * Constructs a new RequestInfo.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestInfo.
                 * @implements IRequestInfo
                 * @constructor
                 * @param {tendermint.abci.IRequestInfo=} [properties] Properties to set
                 */
                function RequestInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestInfo version.
                 * @member {string} version
                 * @memberof tendermint.abci.RequestInfo
                 * @instance
                 */
                RequestInfo.prototype.version = "";
    
                /**
                 * RequestInfo block_version.
                 * @member {Long} block_version
                 * @memberof tendermint.abci.RequestInfo
                 * @instance
                 */
                RequestInfo.prototype.block_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RequestInfo p2p_version.
                 * @member {Long} p2p_version
                 * @memberof tendermint.abci.RequestInfo
                 * @instance
                 */
                RequestInfo.prototype.p2p_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified RequestInfo message. Does not implicitly {@link tendermint.abci.RequestInfo.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestInfo
                 * @static
                 * @param {tendermint.abci.IRequestInfo} message RequestInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.version);
                    if (message.block_version != null && Object.hasOwnProperty.call(message, "block_version"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.block_version);
                    if (message.p2p_version != null && Object.hasOwnProperty.call(message, "p2p_version"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.p2p_version);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestInfo message, length delimited. Does not implicitly {@link tendermint.abci.RequestInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestInfo
                 * @static
                 * @param {tendermint.abci.IRequestInfo} message RequestInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestInfo} RequestInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.version = reader.string();
                            break;
                        case 2:
                            message.block_version = reader.uint64();
                            break;
                        case 3:
                            message.p2p_version = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestInfo} RequestInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestInfo message.
                 * @function verify
                 * @memberof tendermint.abci.RequestInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    if (message.block_version != null && message.hasOwnProperty("block_version"))
                        if (!$util.isInteger(message.block_version) && !(message.block_version && $util.isInteger(message.block_version.low) && $util.isInteger(message.block_version.high)))
                            return "block_version: integer|Long expected";
                    if (message.p2p_version != null && message.hasOwnProperty("p2p_version"))
                        if (!$util.isInteger(message.p2p_version) && !(message.p2p_version && $util.isInteger(message.p2p_version.low) && $util.isInteger(message.p2p_version.high)))
                            return "p2p_version: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a RequestInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestInfo} RequestInfo
                 */
                RequestInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestInfo)
                        return object;
                    var message = new $root.tendermint.abci.RequestInfo();
                    if (object.version != null)
                        message.version = String(object.version);
                    if (object.block_version != null)
                        if ($util.Long)
                            (message.block_version = $util.Long.fromValue(object.block_version)).unsigned = true;
                        else if (typeof object.block_version === "string")
                            message.block_version = parseInt(object.block_version, 10);
                        else if (typeof object.block_version === "number")
                            message.block_version = object.block_version;
                        else if (typeof object.block_version === "object")
                            message.block_version = new $util.LongBits(object.block_version.low >>> 0, object.block_version.high >>> 0).toNumber(true);
                    if (object.p2p_version != null)
                        if ($util.Long)
                            (message.p2p_version = $util.Long.fromValue(object.p2p_version)).unsigned = true;
                        else if (typeof object.p2p_version === "string")
                            message.p2p_version = parseInt(object.p2p_version, 10);
                        else if (typeof object.p2p_version === "number")
                            message.p2p_version = object.p2p_version;
                        else if (typeof object.p2p_version === "object")
                            message.p2p_version = new $util.LongBits(object.p2p_version.low >>> 0, object.p2p_version.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestInfo
                 * @static
                 * @param {tendermint.abci.RequestInfo} message RequestInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.version = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.block_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block_version = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.p2p_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.p2p_version = options.longs === String ? "0" : 0;
                    }
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.block_version != null && message.hasOwnProperty("block_version"))
                        if (typeof message.block_version === "number")
                            object.block_version = options.longs === String ? String(message.block_version) : message.block_version;
                        else
                            object.block_version = options.longs === String ? $util.Long.prototype.toString.call(message.block_version) : options.longs === Number ? new $util.LongBits(message.block_version.low >>> 0, message.block_version.high >>> 0).toNumber(true) : message.block_version;
                    if (message.p2p_version != null && message.hasOwnProperty("p2p_version"))
                        if (typeof message.p2p_version === "number")
                            object.p2p_version = options.longs === String ? String(message.p2p_version) : message.p2p_version;
                        else
                            object.p2p_version = options.longs === String ? $util.Long.prototype.toString.call(message.p2p_version) : options.longs === Number ? new $util.LongBits(message.p2p_version.low >>> 0, message.p2p_version.high >>> 0).toNumber(true) : message.p2p_version;
                    return object;
                };
    
                /**
                 * Converts this RequestInfo to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestInfo;
            })();
    
            abci.RequestSetOption = (function() {
    
                /**
                 * Properties of a RequestSetOption.
                 * @memberof tendermint.abci
                 * @interface IRequestSetOption
                 * @property {string|null} [key] RequestSetOption key
                 * @property {string|null} [value] RequestSetOption value
                 */
    
                /**
                 * Constructs a new RequestSetOption.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestSetOption.
                 * @implements IRequestSetOption
                 * @constructor
                 * @param {tendermint.abci.IRequestSetOption=} [properties] Properties to set
                 */
                function RequestSetOption(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestSetOption key.
                 * @member {string} key
                 * @memberof tendermint.abci.RequestSetOption
                 * @instance
                 */
                RequestSetOption.prototype.key = "";
    
                /**
                 * RequestSetOption value.
                 * @member {string} value
                 * @memberof tendermint.abci.RequestSetOption
                 * @instance
                 */
                RequestSetOption.prototype.value = "";
    
                /**
                 * Encodes the specified RequestSetOption message. Does not implicitly {@link tendermint.abci.RequestSetOption.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestSetOption
                 * @static
                 * @param {tendermint.abci.IRequestSetOption} message RequestSetOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestSetOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestSetOption message, length delimited. Does not implicitly {@link tendermint.abci.RequestSetOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestSetOption
                 * @static
                 * @param {tendermint.abci.IRequestSetOption} message RequestSetOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestSetOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestSetOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestSetOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestSetOption} RequestSetOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestSetOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestSetOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.key = reader.string();
                            break;
                        case 2:
                            message.value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestSetOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestSetOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestSetOption} RequestSetOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestSetOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestSetOption message.
                 * @function verify
                 * @memberof tendermint.abci.RequestSetOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestSetOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!$util.isString(message.key))
                            return "key: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!$util.isString(message.value))
                            return "value: string expected";
                    return null;
                };
    
                /**
                 * Creates a RequestSetOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestSetOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestSetOption} RequestSetOption
                 */
                RequestSetOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestSetOption)
                        return object;
                    var message = new $root.tendermint.abci.RequestSetOption();
                    if (object.key != null)
                        message.key = String(object.key);
                    if (object.value != null)
                        message.value = String(object.value);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestSetOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestSetOption
                 * @static
                 * @param {tendermint.abci.RequestSetOption} message RequestSetOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestSetOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.key = "";
                        object.value = "";
                    }
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = message.key;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = message.value;
                    return object;
                };
    
                /**
                 * Converts this RequestSetOption to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestSetOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestSetOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestSetOption;
            })();
    
            abci.RequestInitChain = (function() {
    
                /**
                 * Properties of a RequestInitChain.
                 * @memberof tendermint.abci
                 * @interface IRequestInitChain
                 * @property {google.protobuf.ITimestamp|null} [time] RequestInitChain time
                 * @property {string|null} [chain_id] RequestInitChain chain_id
                 * @property {tendermint.abci.IConsensusParams|null} [consensus_params] RequestInitChain consensus_params
                 * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validators] RequestInitChain validators
                 * @property {Uint8Array|null} [app_state_bytes] RequestInitChain app_state_bytes
                 * @property {Long|null} [initial_height] RequestInitChain initial_height
                 */
    
                /**
                 * Constructs a new RequestInitChain.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestInitChain.
                 * @implements IRequestInitChain
                 * @constructor
                 * @param {tendermint.abci.IRequestInitChain=} [properties] Properties to set
                 */
                function RequestInitChain(properties) {
                    this.validators = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestInitChain time.
                 * @member {google.protobuf.ITimestamp|null|undefined} time
                 * @memberof tendermint.abci.RequestInitChain
                 * @instance
                 */
                RequestInitChain.prototype.time = null;
    
                /**
                 * RequestInitChain chain_id.
                 * @member {string} chain_id
                 * @memberof tendermint.abci.RequestInitChain
                 * @instance
                 */
                RequestInitChain.prototype.chain_id = "";
    
                /**
                 * RequestInitChain consensus_params.
                 * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_params
                 * @memberof tendermint.abci.RequestInitChain
                 * @instance
                 */
                RequestInitChain.prototype.consensus_params = null;
    
                /**
                 * RequestInitChain validators.
                 * @member {Array.<tendermint.abci.IValidatorUpdate>} validators
                 * @memberof tendermint.abci.RequestInitChain
                 * @instance
                 */
                RequestInitChain.prototype.validators = $util.emptyArray;
    
                /**
                 * RequestInitChain app_state_bytes.
                 * @member {Uint8Array} app_state_bytes
                 * @memberof tendermint.abci.RequestInitChain
                 * @instance
                 */
                RequestInitChain.prototype.app_state_bytes = $util.newBuffer([]);
    
                /**
                 * RequestInitChain initial_height.
                 * @member {Long} initial_height
                 * @memberof tendermint.abci.RequestInitChain
                 * @instance
                 */
                RequestInitChain.prototype.initial_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified RequestInitChain message. Does not implicitly {@link tendermint.abci.RequestInitChain.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestInitChain
                 * @static
                 * @param {tendermint.abci.IRequestInitChain} message RequestInitChain message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestInitChain.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                        $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                    if (message.consensus_params != null && Object.hasOwnProperty.call(message, "consensus_params"))
                        $root.tendermint.abci.ConsensusParams.encode(message.consensus_params, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.validators != null && message.validators.length)
                        for (var i = 0; i < message.validators.length; ++i)
                            $root.tendermint.abci.ValidatorUpdate.encode(message.validators[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.app_state_bytes != null && Object.hasOwnProperty.call(message, "app_state_bytes"))
                        writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.app_state_bytes);
                    if (message.initial_height != null && Object.hasOwnProperty.call(message, "initial_height"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int64(message.initial_height);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestInitChain message, length delimited. Does not implicitly {@link tendermint.abci.RequestInitChain.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestInitChain
                 * @static
                 * @param {tendermint.abci.IRequestInitChain} message RequestInitChain message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestInitChain.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestInitChain message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestInitChain
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestInitChain} RequestInitChain
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestInitChain.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestInitChain();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.chain_id = reader.string();
                            break;
                        case 3:
                            message.consensus_params = $root.tendermint.abci.ConsensusParams.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.validators && message.validators.length))
                                message.validators = [];
                            message.validators.push($root.tendermint.abci.ValidatorUpdate.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            message.app_state_bytes = reader.bytes();
                            break;
                        case 6:
                            message.initial_height = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestInitChain message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestInitChain
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestInitChain} RequestInitChain
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestInitChain.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestInitChain message.
                 * @function verify
                 * @memberof tendermint.abci.RequestInitChain
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestInitChain.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.time != null && message.hasOwnProperty("time")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.time);
                        if (error)
                            return "time." + error;
                    }
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isString(message.chain_id))
                            return "chain_id: string expected";
                    if (message.consensus_params != null && message.hasOwnProperty("consensus_params")) {
                        var error = $root.tendermint.abci.ConsensusParams.verify(message.consensus_params);
                        if (error)
                            return "consensus_params." + error;
                    }
                    if (message.validators != null && message.hasOwnProperty("validators")) {
                        if (!Array.isArray(message.validators))
                            return "validators: array expected";
                        for (var i = 0; i < message.validators.length; ++i) {
                            var error = $root.tendermint.abci.ValidatorUpdate.verify(message.validators[i]);
                            if (error)
                                return "validators." + error;
                        }
                    }
                    if (message.app_state_bytes != null && message.hasOwnProperty("app_state_bytes"))
                        if (!(message.app_state_bytes && typeof message.app_state_bytes.length === "number" || $util.isString(message.app_state_bytes)))
                            return "app_state_bytes: buffer expected";
                    if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                        if (!$util.isInteger(message.initial_height) && !(message.initial_height && $util.isInteger(message.initial_height.low) && $util.isInteger(message.initial_height.high)))
                            return "initial_height: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a RequestInitChain message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestInitChain
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestInitChain} RequestInitChain
                 */
                RequestInitChain.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestInitChain)
                        return object;
                    var message = new $root.tendermint.abci.RequestInitChain();
                    if (object.time != null) {
                        if (typeof object.time !== "object")
                            throw TypeError(".tendermint.abci.RequestInitChain.time: object expected");
                        message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                    }
                    if (object.chain_id != null)
                        message.chain_id = String(object.chain_id);
                    if (object.consensus_params != null) {
                        if (typeof object.consensus_params !== "object")
                            throw TypeError(".tendermint.abci.RequestInitChain.consensus_params: object expected");
                        message.consensus_params = $root.tendermint.abci.ConsensusParams.fromObject(object.consensus_params);
                    }
                    if (object.validators) {
                        if (!Array.isArray(object.validators))
                            throw TypeError(".tendermint.abci.RequestInitChain.validators: array expected");
                        message.validators = [];
                        for (var i = 0; i < object.validators.length; ++i) {
                            if (typeof object.validators[i] !== "object")
                                throw TypeError(".tendermint.abci.RequestInitChain.validators: object expected");
                            message.validators[i] = $root.tendermint.abci.ValidatorUpdate.fromObject(object.validators[i]);
                        }
                    }
                    if (object.app_state_bytes != null)
                        if (typeof object.app_state_bytes === "string")
                            $util.base64.decode(object.app_state_bytes, message.app_state_bytes = $util.newBuffer($util.base64.length(object.app_state_bytes)), 0);
                        else if (object.app_state_bytes.length)
                            message.app_state_bytes = object.app_state_bytes;
                    if (object.initial_height != null)
                        if ($util.Long)
                            (message.initial_height = $util.Long.fromValue(object.initial_height)).unsigned = false;
                        else if (typeof object.initial_height === "string")
                            message.initial_height = parseInt(object.initial_height, 10);
                        else if (typeof object.initial_height === "number")
                            message.initial_height = object.initial_height;
                        else if (typeof object.initial_height === "object")
                            message.initial_height = new $util.LongBits(object.initial_height.low >>> 0, object.initial_height.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestInitChain message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestInitChain
                 * @static
                 * @param {tendermint.abci.RequestInitChain} message RequestInitChain
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestInitChain.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.validators = [];
                    if (options.defaults) {
                        object.time = null;
                        object.chain_id = "";
                        object.consensus_params = null;
                        if (options.bytes === String)
                            object.app_state_bytes = "";
                        else {
                            object.app_state_bytes = [];
                            if (options.bytes !== Array)
                                object.app_state_bytes = $util.newBuffer(object.app_state_bytes);
                        }
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.initial_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.initial_height = options.longs === String ? "0" : 0;
                    }
                    if (message.time != null && message.hasOwnProperty("time"))
                        object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        object.chain_id = message.chain_id;
                    if (message.consensus_params != null && message.hasOwnProperty("consensus_params"))
                        object.consensus_params = $root.tendermint.abci.ConsensusParams.toObject(message.consensus_params, options);
                    if (message.validators && message.validators.length) {
                        object.validators = [];
                        for (var j = 0; j < message.validators.length; ++j)
                            object.validators[j] = $root.tendermint.abci.ValidatorUpdate.toObject(message.validators[j], options);
                    }
                    if (message.app_state_bytes != null && message.hasOwnProperty("app_state_bytes"))
                        object.app_state_bytes = options.bytes === String ? $util.base64.encode(message.app_state_bytes, 0, message.app_state_bytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_state_bytes) : message.app_state_bytes;
                    if (message.initial_height != null && message.hasOwnProperty("initial_height"))
                        if (typeof message.initial_height === "number")
                            object.initial_height = options.longs === String ? String(message.initial_height) : message.initial_height;
                        else
                            object.initial_height = options.longs === String ? $util.Long.prototype.toString.call(message.initial_height) : options.longs === Number ? new $util.LongBits(message.initial_height.low >>> 0, message.initial_height.high >>> 0).toNumber() : message.initial_height;
                    return object;
                };
    
                /**
                 * Converts this RequestInitChain to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestInitChain
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestInitChain.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestInitChain;
            })();
    
            abci.RequestQuery = (function() {
    
                /**
                 * Properties of a RequestQuery.
                 * @memberof tendermint.abci
                 * @interface IRequestQuery
                 * @property {Uint8Array|null} [data] RequestQuery data
                 * @property {string|null} [path] RequestQuery path
                 * @property {Long|null} [height] RequestQuery height
                 * @property {boolean|null} [prove] RequestQuery prove
                 */
    
                /**
                 * Constructs a new RequestQuery.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestQuery.
                 * @implements IRequestQuery
                 * @constructor
                 * @param {tendermint.abci.IRequestQuery=} [properties] Properties to set
                 */
                function RequestQuery(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestQuery data.
                 * @member {Uint8Array} data
                 * @memberof tendermint.abci.RequestQuery
                 * @instance
                 */
                RequestQuery.prototype.data = $util.newBuffer([]);
    
                /**
                 * RequestQuery path.
                 * @member {string} path
                 * @memberof tendermint.abci.RequestQuery
                 * @instance
                 */
                RequestQuery.prototype.path = "";
    
                /**
                 * RequestQuery height.
                 * @member {Long} height
                 * @memberof tendermint.abci.RequestQuery
                 * @instance
                 */
                RequestQuery.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * RequestQuery prove.
                 * @member {boolean} prove
                 * @memberof tendermint.abci.RequestQuery
                 * @instance
                 */
                RequestQuery.prototype.prove = false;
    
                /**
                 * Encodes the specified RequestQuery message. Does not implicitly {@link tendermint.abci.RequestQuery.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestQuery
                 * @static
                 * @param {tendermint.abci.IRequestQuery} message RequestQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestQuery.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.data);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                    if (message.prove != null && Object.hasOwnProperty.call(message, "prove"))
                        writer.uint32(/* id 4, wireType 0 =*/32).bool(message.prove);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestQuery message, length delimited. Does not implicitly {@link tendermint.abci.RequestQuery.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestQuery
                 * @static
                 * @param {tendermint.abci.IRequestQuery} message RequestQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestQuery.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestQuery message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestQuery
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestQuery} RequestQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestQuery.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestQuery();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = reader.bytes();
                            break;
                        case 2:
                            message.path = reader.string();
                            break;
                        case 3:
                            message.height = reader.int64();
                            break;
                        case 4:
                            message.prove = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestQuery message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestQuery
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestQuery} RequestQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestQuery.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestQuery message.
                 * @function verify
                 * @memberof tendermint.abci.RequestQuery
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestQuery.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.prove != null && message.hasOwnProperty("prove"))
                        if (typeof message.prove !== "boolean")
                            return "prove: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a RequestQuery message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestQuery
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestQuery} RequestQuery
                 */
                RequestQuery.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestQuery)
                        return object;
                    var message = new $root.tendermint.abci.RequestQuery();
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    if (object.path != null)
                        message.path = String(object.path);
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.prove != null)
                        message.prove = Boolean(object.prove);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestQuery message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestQuery
                 * @static
                 * @param {tendermint.abci.RequestQuery} message RequestQuery
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestQuery.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                        object.path = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.prove = false;
                    }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.prove != null && message.hasOwnProperty("prove"))
                        object.prove = message.prove;
                    return object;
                };
    
                /**
                 * Converts this RequestQuery to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestQuery
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestQuery.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestQuery;
            })();
    
            abci.RequestBeginBlock = (function() {
    
                /**
                 * Properties of a RequestBeginBlock.
                 * @memberof tendermint.abci
                 * @interface IRequestBeginBlock
                 * @property {Uint8Array|null} [hash] RequestBeginBlock hash
                 * @property {tendermint.types.IHeader|null} [header] RequestBeginBlock header
                 * @property {tendermint.abci.ILastCommitInfo|null} [last_commit_info] RequestBeginBlock last_commit_info
                 * @property {Array.<tendermint.abci.IEvidence>|null} [byzantine_validators] RequestBeginBlock byzantine_validators
                 */
    
                /**
                 * Constructs a new RequestBeginBlock.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestBeginBlock.
                 * @implements IRequestBeginBlock
                 * @constructor
                 * @param {tendermint.abci.IRequestBeginBlock=} [properties] Properties to set
                 */
                function RequestBeginBlock(properties) {
                    this.byzantine_validators = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestBeginBlock hash.
                 * @member {Uint8Array} hash
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @instance
                 */
                RequestBeginBlock.prototype.hash = $util.newBuffer([]);
    
                /**
                 * RequestBeginBlock header.
                 * @member {tendermint.types.IHeader|null|undefined} header
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @instance
                 */
                RequestBeginBlock.prototype.header = null;
    
                /**
                 * RequestBeginBlock last_commit_info.
                 * @member {tendermint.abci.ILastCommitInfo|null|undefined} last_commit_info
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @instance
                 */
                RequestBeginBlock.prototype.last_commit_info = null;
    
                /**
                 * RequestBeginBlock byzantine_validators.
                 * @member {Array.<tendermint.abci.IEvidence>} byzantine_validators
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @instance
                 */
                RequestBeginBlock.prototype.byzantine_validators = $util.emptyArray;
    
                /**
                 * Encodes the specified RequestBeginBlock message. Does not implicitly {@link tendermint.abci.RequestBeginBlock.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @static
                 * @param {tendermint.abci.IRequestBeginBlock} message RequestBeginBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestBeginBlock.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                    if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                        $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.last_commit_info != null && Object.hasOwnProperty.call(message, "last_commit_info"))
                        $root.tendermint.abci.LastCommitInfo.encode(message.last_commit_info, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.byzantine_validators != null && message.byzantine_validators.length)
                        for (var i = 0; i < message.byzantine_validators.length; ++i)
                            $root.tendermint.abci.Evidence.encode(message.byzantine_validators[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestBeginBlock message, length delimited. Does not implicitly {@link tendermint.abci.RequestBeginBlock.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @static
                 * @param {tendermint.abci.IRequestBeginBlock} message RequestBeginBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestBeginBlock.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestBeginBlock message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestBeginBlock.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestBeginBlock();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.hash = reader.bytes();
                            break;
                        case 2:
                            message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.last_commit_info = $root.tendermint.abci.LastCommitInfo.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.byzantine_validators && message.byzantine_validators.length))
                                message.byzantine_validators = [];
                            message.byzantine_validators.push($root.tendermint.abci.Evidence.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestBeginBlock message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestBeginBlock.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestBeginBlock message.
                 * @function verify
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestBeginBlock.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                            return "hash: buffer expected";
                    if (message.header != null && message.hasOwnProperty("header")) {
                        var error = $root.tendermint.types.Header.verify(message.header);
                        if (error)
                            return "header." + error;
                    }
                    if (message.last_commit_info != null && message.hasOwnProperty("last_commit_info")) {
                        var error = $root.tendermint.abci.LastCommitInfo.verify(message.last_commit_info);
                        if (error)
                            return "last_commit_info." + error;
                    }
                    if (message.byzantine_validators != null && message.hasOwnProperty("byzantine_validators")) {
                        if (!Array.isArray(message.byzantine_validators))
                            return "byzantine_validators: array expected";
                        for (var i = 0; i < message.byzantine_validators.length; ++i) {
                            var error = $root.tendermint.abci.Evidence.verify(message.byzantine_validators[i]);
                            if (error)
                                return "byzantine_validators." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a RequestBeginBlock message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestBeginBlock} RequestBeginBlock
                 */
                RequestBeginBlock.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestBeginBlock)
                        return object;
                    var message = new $root.tendermint.abci.RequestBeginBlock();
                    if (object.hash != null)
                        if (typeof object.hash === "string")
                            $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                        else if (object.hash.length)
                            message.hash = object.hash;
                    if (object.header != null) {
                        if (typeof object.header !== "object")
                            throw TypeError(".tendermint.abci.RequestBeginBlock.header: object expected");
                        message.header = $root.tendermint.types.Header.fromObject(object.header);
                    }
                    if (object.last_commit_info != null) {
                        if (typeof object.last_commit_info !== "object")
                            throw TypeError(".tendermint.abci.RequestBeginBlock.last_commit_info: object expected");
                        message.last_commit_info = $root.tendermint.abci.LastCommitInfo.fromObject(object.last_commit_info);
                    }
                    if (object.byzantine_validators) {
                        if (!Array.isArray(object.byzantine_validators))
                            throw TypeError(".tendermint.abci.RequestBeginBlock.byzantine_validators: array expected");
                        message.byzantine_validators = [];
                        for (var i = 0; i < object.byzantine_validators.length; ++i) {
                            if (typeof object.byzantine_validators[i] !== "object")
                                throw TypeError(".tendermint.abci.RequestBeginBlock.byzantine_validators: object expected");
                            message.byzantine_validators[i] = $root.tendermint.abci.Evidence.fromObject(object.byzantine_validators[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestBeginBlock message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @static
                 * @param {tendermint.abci.RequestBeginBlock} message RequestBeginBlock
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestBeginBlock.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.byzantine_validators = [];
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.hash = "";
                        else {
                            object.hash = [];
                            if (options.bytes !== Array)
                                object.hash = $util.newBuffer(object.hash);
                        }
                        object.header = null;
                        object.last_commit_info = null;
                    }
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                    if (message.header != null && message.hasOwnProperty("header"))
                        object.header = $root.tendermint.types.Header.toObject(message.header, options);
                    if (message.last_commit_info != null && message.hasOwnProperty("last_commit_info"))
                        object.last_commit_info = $root.tendermint.abci.LastCommitInfo.toObject(message.last_commit_info, options);
                    if (message.byzantine_validators && message.byzantine_validators.length) {
                        object.byzantine_validators = [];
                        for (var j = 0; j < message.byzantine_validators.length; ++j)
                            object.byzantine_validators[j] = $root.tendermint.abci.Evidence.toObject(message.byzantine_validators[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this RequestBeginBlock to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestBeginBlock
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestBeginBlock.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestBeginBlock;
            })();
    
            /**
             * CheckTxType enum.
             * @name tendermint.abci.CheckTxType
             * @enum {number}
             * @property {number} NEW=0 NEW value
             * @property {number} RECHECK=1 RECHECK value
             */
            abci.CheckTxType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "NEW"] = 0;
                values[valuesById[1] = "RECHECK"] = 1;
                return values;
            })();
    
            abci.RequestCheckTx = (function() {
    
                /**
                 * Properties of a RequestCheckTx.
                 * @memberof tendermint.abci
                 * @interface IRequestCheckTx
                 * @property {Uint8Array|null} [tx] RequestCheckTx tx
                 * @property {tendermint.abci.CheckTxType|null} [type] RequestCheckTx type
                 */
    
                /**
                 * Constructs a new RequestCheckTx.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestCheckTx.
                 * @implements IRequestCheckTx
                 * @constructor
                 * @param {tendermint.abci.IRequestCheckTx=} [properties] Properties to set
                 */
                function RequestCheckTx(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestCheckTx tx.
                 * @member {Uint8Array} tx
                 * @memberof tendermint.abci.RequestCheckTx
                 * @instance
                 */
                RequestCheckTx.prototype.tx = $util.newBuffer([]);
    
                /**
                 * RequestCheckTx type.
                 * @member {tendermint.abci.CheckTxType} type
                 * @memberof tendermint.abci.RequestCheckTx
                 * @instance
                 */
                RequestCheckTx.prototype.type = 0;
    
                /**
                 * Encodes the specified RequestCheckTx message. Does not implicitly {@link tendermint.abci.RequestCheckTx.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestCheckTx
                 * @static
                 * @param {tendermint.abci.IRequestCheckTx} message RequestCheckTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestCheckTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.tx);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestCheckTx message, length delimited. Does not implicitly {@link tendermint.abci.RequestCheckTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestCheckTx
                 * @static
                 * @param {tendermint.abci.IRequestCheckTx} message RequestCheckTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestCheckTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestCheckTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestCheckTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestCheckTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestCheckTx();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.tx = reader.bytes();
                            break;
                        case 2:
                            message.type = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestCheckTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestCheckTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestCheckTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestCheckTx message.
                 * @function verify
                 * @memberof tendermint.abci.RequestCheckTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestCheckTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tx != null && message.hasOwnProperty("tx"))
                        if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                            return "tx: buffer expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a RequestCheckTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestCheckTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestCheckTx} RequestCheckTx
                 */
                RequestCheckTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestCheckTx)
                        return object;
                    var message = new $root.tendermint.abci.RequestCheckTx();
                    if (object.tx != null)
                        if (typeof object.tx === "string")
                            $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                        else if (object.tx.length)
                            message.tx = object.tx;
                    switch (object.type) {
                    case "NEW":
                    case 0:
                        message.type = 0;
                        break;
                    case "RECHECK":
                    case 1:
                        message.type = 1;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestCheckTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestCheckTx
                 * @static
                 * @param {tendermint.abci.RequestCheckTx} message RequestCheckTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestCheckTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.tx = "";
                        else {
                            object.tx = [];
                            if (options.bytes !== Array)
                                object.tx = $util.newBuffer(object.tx);
                        }
                        object.type = options.enums === String ? "NEW" : 0;
                    }
                    if (message.tx != null && message.hasOwnProperty("tx"))
                        object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.tendermint.abci.CheckTxType[message.type] : message.type;
                    return object;
                };
    
                /**
                 * Converts this RequestCheckTx to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestCheckTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestCheckTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestCheckTx;
            })();
    
            abci.RequestDeliverTx = (function() {
    
                /**
                 * Properties of a RequestDeliverTx.
                 * @memberof tendermint.abci
                 * @interface IRequestDeliverTx
                 * @property {Uint8Array|null} [tx] RequestDeliverTx tx
                 */
    
                /**
                 * Constructs a new RequestDeliverTx.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestDeliverTx.
                 * @implements IRequestDeliverTx
                 * @constructor
                 * @param {tendermint.abci.IRequestDeliverTx=} [properties] Properties to set
                 */
                function RequestDeliverTx(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestDeliverTx tx.
                 * @member {Uint8Array} tx
                 * @memberof tendermint.abci.RequestDeliverTx
                 * @instance
                 */
                RequestDeliverTx.prototype.tx = $util.newBuffer([]);
    
                /**
                 * Encodes the specified RequestDeliverTx message. Does not implicitly {@link tendermint.abci.RequestDeliverTx.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestDeliverTx
                 * @static
                 * @param {tendermint.abci.IRequestDeliverTx} message RequestDeliverTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestDeliverTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.tx);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestDeliverTx message, length delimited. Does not implicitly {@link tendermint.abci.RequestDeliverTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestDeliverTx
                 * @static
                 * @param {tendermint.abci.IRequestDeliverTx} message RequestDeliverTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestDeliverTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestDeliverTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestDeliverTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestDeliverTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestDeliverTx();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.tx = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestDeliverTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestDeliverTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestDeliverTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestDeliverTx message.
                 * @function verify
                 * @memberof tendermint.abci.RequestDeliverTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestDeliverTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.tx != null && message.hasOwnProperty("tx"))
                        if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                            return "tx: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a RequestDeliverTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestDeliverTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestDeliverTx} RequestDeliverTx
                 */
                RequestDeliverTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestDeliverTx)
                        return object;
                    var message = new $root.tendermint.abci.RequestDeliverTx();
                    if (object.tx != null)
                        if (typeof object.tx === "string")
                            $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                        else if (object.tx.length)
                            message.tx = object.tx;
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestDeliverTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestDeliverTx
                 * @static
                 * @param {tendermint.abci.RequestDeliverTx} message RequestDeliverTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestDeliverTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.tx = "";
                        else {
                            object.tx = [];
                            if (options.bytes !== Array)
                                object.tx = $util.newBuffer(object.tx);
                        }
                    if (message.tx != null && message.hasOwnProperty("tx"))
                        object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                    return object;
                };
    
                /**
                 * Converts this RequestDeliverTx to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestDeliverTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestDeliverTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestDeliverTx;
            })();
    
            abci.RequestEndBlock = (function() {
    
                /**
                 * Properties of a RequestEndBlock.
                 * @memberof tendermint.abci
                 * @interface IRequestEndBlock
                 * @property {Long|null} [height] RequestEndBlock height
                 */
    
                /**
                 * Constructs a new RequestEndBlock.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestEndBlock.
                 * @implements IRequestEndBlock
                 * @constructor
                 * @param {tendermint.abci.IRequestEndBlock=} [properties] Properties to set
                 */
                function RequestEndBlock(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestEndBlock height.
                 * @member {Long} height
                 * @memberof tendermint.abci.RequestEndBlock
                 * @instance
                 */
                RequestEndBlock.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified RequestEndBlock message. Does not implicitly {@link tendermint.abci.RequestEndBlock.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestEndBlock
                 * @static
                 * @param {tendermint.abci.IRequestEndBlock} message RequestEndBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestEndBlock.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestEndBlock message, length delimited. Does not implicitly {@link tendermint.abci.RequestEndBlock.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestEndBlock
                 * @static
                 * @param {tendermint.abci.IRequestEndBlock} message RequestEndBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestEndBlock.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestEndBlock message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestEndBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestEndBlock.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestEndBlock();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.height = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestEndBlock message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestEndBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestEndBlock.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestEndBlock message.
                 * @function verify
                 * @memberof tendermint.abci.RequestEndBlock
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestEndBlock.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a RequestEndBlock message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestEndBlock
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestEndBlock} RequestEndBlock
                 */
                RequestEndBlock.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestEndBlock)
                        return object;
                    var message = new $root.tendermint.abci.RequestEndBlock();
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestEndBlock message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestEndBlock
                 * @static
                 * @param {tendermint.abci.RequestEndBlock} message RequestEndBlock
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestEndBlock.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    return object;
                };
    
                /**
                 * Converts this RequestEndBlock to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestEndBlock
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestEndBlock.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestEndBlock;
            })();
    
            abci.RequestCommit = (function() {
    
                /**
                 * Properties of a RequestCommit.
                 * @memberof tendermint.abci
                 * @interface IRequestCommit
                 */
    
                /**
                 * Constructs a new RequestCommit.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestCommit.
                 * @implements IRequestCommit
                 * @constructor
                 * @param {tendermint.abci.IRequestCommit=} [properties] Properties to set
                 */
                function RequestCommit(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified RequestCommit message. Does not implicitly {@link tendermint.abci.RequestCommit.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestCommit
                 * @static
                 * @param {tendermint.abci.IRequestCommit} message RequestCommit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestCommit.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestCommit message, length delimited. Does not implicitly {@link tendermint.abci.RequestCommit.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestCommit
                 * @static
                 * @param {tendermint.abci.IRequestCommit} message RequestCommit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestCommit.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestCommit message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestCommit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestCommit} RequestCommit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestCommit.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestCommit();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestCommit message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestCommit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestCommit} RequestCommit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestCommit.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestCommit message.
                 * @function verify
                 * @memberof tendermint.abci.RequestCommit
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestCommit.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a RequestCommit message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestCommit
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestCommit} RequestCommit
                 */
                RequestCommit.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestCommit)
                        return object;
                    return new $root.tendermint.abci.RequestCommit();
                };
    
                /**
                 * Creates a plain object from a RequestCommit message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestCommit
                 * @static
                 * @param {tendermint.abci.RequestCommit} message RequestCommit
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestCommit.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this RequestCommit to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestCommit
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestCommit.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestCommit;
            })();
    
            abci.RequestListSnapshots = (function() {
    
                /**
                 * Properties of a RequestListSnapshots.
                 * @memberof tendermint.abci
                 * @interface IRequestListSnapshots
                 */
    
                /**
                 * Constructs a new RequestListSnapshots.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestListSnapshots.
                 * @implements IRequestListSnapshots
                 * @constructor
                 * @param {tendermint.abci.IRequestListSnapshots=} [properties] Properties to set
                 */
                function RequestListSnapshots(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified RequestListSnapshots message. Does not implicitly {@link tendermint.abci.RequestListSnapshots.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestListSnapshots
                 * @static
                 * @param {tendermint.abci.IRequestListSnapshots} message RequestListSnapshots message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestListSnapshots.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestListSnapshots message, length delimited. Does not implicitly {@link tendermint.abci.RequestListSnapshots.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestListSnapshots
                 * @static
                 * @param {tendermint.abci.IRequestListSnapshots} message RequestListSnapshots message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestListSnapshots.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestListSnapshots message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestListSnapshots
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestListSnapshots.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestListSnapshots();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestListSnapshots message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestListSnapshots
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestListSnapshots.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestListSnapshots message.
                 * @function verify
                 * @memberof tendermint.abci.RequestListSnapshots
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestListSnapshots.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a RequestListSnapshots message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestListSnapshots
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestListSnapshots} RequestListSnapshots
                 */
                RequestListSnapshots.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestListSnapshots)
                        return object;
                    return new $root.tendermint.abci.RequestListSnapshots();
                };
    
                /**
                 * Creates a plain object from a RequestListSnapshots message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestListSnapshots
                 * @static
                 * @param {tendermint.abci.RequestListSnapshots} message RequestListSnapshots
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestListSnapshots.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this RequestListSnapshots to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestListSnapshots
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestListSnapshots.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestListSnapshots;
            })();
    
            abci.RequestOfferSnapshot = (function() {
    
                /**
                 * Properties of a RequestOfferSnapshot.
                 * @memberof tendermint.abci
                 * @interface IRequestOfferSnapshot
                 * @property {tendermint.abci.ISnapshot|null} [snapshot] RequestOfferSnapshot snapshot
                 * @property {Uint8Array|null} [app_hash] RequestOfferSnapshot app_hash
                 */
    
                /**
                 * Constructs a new RequestOfferSnapshot.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestOfferSnapshot.
                 * @implements IRequestOfferSnapshot
                 * @constructor
                 * @param {tendermint.abci.IRequestOfferSnapshot=} [properties] Properties to set
                 */
                function RequestOfferSnapshot(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestOfferSnapshot snapshot.
                 * @member {tendermint.abci.ISnapshot|null|undefined} snapshot
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @instance
                 */
                RequestOfferSnapshot.prototype.snapshot = null;
    
                /**
                 * RequestOfferSnapshot app_hash.
                 * @member {Uint8Array} app_hash
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @instance
                 */
                RequestOfferSnapshot.prototype.app_hash = $util.newBuffer([]);
    
                /**
                 * Encodes the specified RequestOfferSnapshot message. Does not implicitly {@link tendermint.abci.RequestOfferSnapshot.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @static
                 * @param {tendermint.abci.IRequestOfferSnapshot} message RequestOfferSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestOfferSnapshot.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.snapshot != null && Object.hasOwnProperty.call(message, "snapshot"))
                        $root.tendermint.abci.Snapshot.encode(message.snapshot, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.app_hash);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestOfferSnapshot message, length delimited. Does not implicitly {@link tendermint.abci.RequestOfferSnapshot.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @static
                 * @param {tendermint.abci.IRequestOfferSnapshot} message RequestOfferSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestOfferSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestOfferSnapshot message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestOfferSnapshot.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestOfferSnapshot();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.snapshot = $root.tendermint.abci.Snapshot.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.app_hash = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestOfferSnapshot message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestOfferSnapshot.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestOfferSnapshot message.
                 * @function verify
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestOfferSnapshot.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.snapshot != null && message.hasOwnProperty("snapshot")) {
                        var error = $root.tendermint.abci.Snapshot.verify(message.snapshot);
                        if (error)
                            return "snapshot." + error;
                    }
                    if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                        if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                            return "app_hash: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a RequestOfferSnapshot message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestOfferSnapshot} RequestOfferSnapshot
                 */
                RequestOfferSnapshot.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestOfferSnapshot)
                        return object;
                    var message = new $root.tendermint.abci.RequestOfferSnapshot();
                    if (object.snapshot != null) {
                        if (typeof object.snapshot !== "object")
                            throw TypeError(".tendermint.abci.RequestOfferSnapshot.snapshot: object expected");
                        message.snapshot = $root.tendermint.abci.Snapshot.fromObject(object.snapshot);
                    }
                    if (object.app_hash != null)
                        if (typeof object.app_hash === "string")
                            $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                        else if (object.app_hash.length)
                            message.app_hash = object.app_hash;
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestOfferSnapshot message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @static
                 * @param {tendermint.abci.RequestOfferSnapshot} message RequestOfferSnapshot
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestOfferSnapshot.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.snapshot = null;
                        if (options.bytes === String)
                            object.app_hash = "";
                        else {
                            object.app_hash = [];
                            if (options.bytes !== Array)
                                object.app_hash = $util.newBuffer(object.app_hash);
                        }
                    }
                    if (message.snapshot != null && message.hasOwnProperty("snapshot"))
                        object.snapshot = $root.tendermint.abci.Snapshot.toObject(message.snapshot, options);
                    if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                        object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                    return object;
                };
    
                /**
                 * Converts this RequestOfferSnapshot to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestOfferSnapshot
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestOfferSnapshot.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestOfferSnapshot;
            })();
    
            abci.RequestLoadSnapshotChunk = (function() {
    
                /**
                 * Properties of a RequestLoadSnapshotChunk.
                 * @memberof tendermint.abci
                 * @interface IRequestLoadSnapshotChunk
                 * @property {Long|null} [height] RequestLoadSnapshotChunk height
                 * @property {number|null} [format] RequestLoadSnapshotChunk format
                 * @property {number|null} [chunk] RequestLoadSnapshotChunk chunk
                 */
    
                /**
                 * Constructs a new RequestLoadSnapshotChunk.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestLoadSnapshotChunk.
                 * @implements IRequestLoadSnapshotChunk
                 * @constructor
                 * @param {tendermint.abci.IRequestLoadSnapshotChunk=} [properties] Properties to set
                 */
                function RequestLoadSnapshotChunk(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestLoadSnapshotChunk height.
                 * @member {Long} height
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @instance
                 */
                RequestLoadSnapshotChunk.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * RequestLoadSnapshotChunk format.
                 * @member {number} format
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @instance
                 */
                RequestLoadSnapshotChunk.prototype.format = 0;
    
                /**
                 * RequestLoadSnapshotChunk chunk.
                 * @member {number} chunk
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @instance
                 */
                RequestLoadSnapshotChunk.prototype.chunk = 0;
    
                /**
                 * Encodes the specified RequestLoadSnapshotChunk message. Does not implicitly {@link tendermint.abci.RequestLoadSnapshotChunk.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @static
                 * @param {tendermint.abci.IRequestLoadSnapshotChunk} message RequestLoadSnapshotChunk message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestLoadSnapshotChunk.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                    if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.format);
                    if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.chunk);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestLoadSnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.RequestLoadSnapshotChunk.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @static
                 * @param {tendermint.abci.IRequestLoadSnapshotChunk} message RequestLoadSnapshotChunk message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestLoadSnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestLoadSnapshotChunk message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestLoadSnapshotChunk.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestLoadSnapshotChunk();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.height = reader.uint64();
                            break;
                        case 2:
                            message.format = reader.uint32();
                            break;
                        case 3:
                            message.chunk = reader.uint32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestLoadSnapshotChunk message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestLoadSnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestLoadSnapshotChunk message.
                 * @function verify
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestLoadSnapshotChunk.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.format != null && message.hasOwnProperty("format"))
                        if (!$util.isInteger(message.format))
                            return "format: integer expected";
                    if (message.chunk != null && message.hasOwnProperty("chunk"))
                        if (!$util.isInteger(message.chunk))
                            return "chunk: integer expected";
                    return null;
                };
    
                /**
                 * Creates a RequestLoadSnapshotChunk message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestLoadSnapshotChunk} RequestLoadSnapshotChunk
                 */
                RequestLoadSnapshotChunk.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestLoadSnapshotChunk)
                        return object;
                    var message = new $root.tendermint.abci.RequestLoadSnapshotChunk();
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                    if (object.format != null)
                        message.format = object.format >>> 0;
                    if (object.chunk != null)
                        message.chunk = object.chunk >>> 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestLoadSnapshotChunk message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @static
                 * @param {tendermint.abci.RequestLoadSnapshotChunk} message RequestLoadSnapshotChunk
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestLoadSnapshotChunk.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.format = 0;
                        object.chunk = 0;
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                    if (message.format != null && message.hasOwnProperty("format"))
                        object.format = message.format;
                    if (message.chunk != null && message.hasOwnProperty("chunk"))
                        object.chunk = message.chunk;
                    return object;
                };
    
                /**
                 * Converts this RequestLoadSnapshotChunk to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestLoadSnapshotChunk
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestLoadSnapshotChunk.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestLoadSnapshotChunk;
            })();
    
            abci.RequestApplySnapshotChunk = (function() {
    
                /**
                 * Properties of a RequestApplySnapshotChunk.
                 * @memberof tendermint.abci
                 * @interface IRequestApplySnapshotChunk
                 * @property {number|null} [index] RequestApplySnapshotChunk index
                 * @property {Uint8Array|null} [chunk] RequestApplySnapshotChunk chunk
                 * @property {string|null} [sender] RequestApplySnapshotChunk sender
                 */
    
                /**
                 * Constructs a new RequestApplySnapshotChunk.
                 * @memberof tendermint.abci
                 * @classdesc Represents a RequestApplySnapshotChunk.
                 * @implements IRequestApplySnapshotChunk
                 * @constructor
                 * @param {tendermint.abci.IRequestApplySnapshotChunk=} [properties] Properties to set
                 */
                function RequestApplySnapshotChunk(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * RequestApplySnapshotChunk index.
                 * @member {number} index
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @instance
                 */
                RequestApplySnapshotChunk.prototype.index = 0;
    
                /**
                 * RequestApplySnapshotChunk chunk.
                 * @member {Uint8Array} chunk
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @instance
                 */
                RequestApplySnapshotChunk.prototype.chunk = $util.newBuffer([]);
    
                /**
                 * RequestApplySnapshotChunk sender.
                 * @member {string} sender
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @instance
                 */
                RequestApplySnapshotChunk.prototype.sender = "";
    
                /**
                 * Encodes the specified RequestApplySnapshotChunk message. Does not implicitly {@link tendermint.abci.RequestApplySnapshotChunk.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @static
                 * @param {tendermint.abci.IRequestApplySnapshotChunk} message RequestApplySnapshotChunk message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestApplySnapshotChunk.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                    if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.chunk);
                    if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.sender);
                    return writer;
                };
    
                /**
                 * Encodes the specified RequestApplySnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.RequestApplySnapshotChunk.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @static
                 * @param {tendermint.abci.IRequestApplySnapshotChunk} message RequestApplySnapshotChunk message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                RequestApplySnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a RequestApplySnapshotChunk message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestApplySnapshotChunk.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.RequestApplySnapshotChunk();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.index = reader.uint32();
                            break;
                        case 2:
                            message.chunk = reader.bytes();
                            break;
                        case 3:
                            message.sender = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a RequestApplySnapshotChunk message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                RequestApplySnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a RequestApplySnapshotChunk message.
                 * @function verify
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                RequestApplySnapshotChunk.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (!$util.isInteger(message.index))
                            return "index: integer expected";
                    if (message.chunk != null && message.hasOwnProperty("chunk"))
                        if (!(message.chunk && typeof message.chunk.length === "number" || $util.isString(message.chunk)))
                            return "chunk: buffer expected";
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        if (!$util.isString(message.sender))
                            return "sender: string expected";
                    return null;
                };
    
                /**
                 * Creates a RequestApplySnapshotChunk message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.RequestApplySnapshotChunk} RequestApplySnapshotChunk
                 */
                RequestApplySnapshotChunk.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.RequestApplySnapshotChunk)
                        return object;
                    var message = new $root.tendermint.abci.RequestApplySnapshotChunk();
                    if (object.index != null)
                        message.index = object.index >>> 0;
                    if (object.chunk != null)
                        if (typeof object.chunk === "string")
                            $util.base64.decode(object.chunk, message.chunk = $util.newBuffer($util.base64.length(object.chunk)), 0);
                        else if (object.chunk.length)
                            message.chunk = object.chunk;
                    if (object.sender != null)
                        message.sender = String(object.sender);
                    return message;
                };
    
                /**
                 * Creates a plain object from a RequestApplySnapshotChunk message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @static
                 * @param {tendermint.abci.RequestApplySnapshotChunk} message RequestApplySnapshotChunk
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                RequestApplySnapshotChunk.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.index = 0;
                        if (options.bytes === String)
                            object.chunk = "";
                        else {
                            object.chunk = [];
                            if (options.bytes !== Array)
                                object.chunk = $util.newBuffer(object.chunk);
                        }
                        object.sender = "";
                    }
                    if (message.index != null && message.hasOwnProperty("index"))
                        object.index = message.index;
                    if (message.chunk != null && message.hasOwnProperty("chunk"))
                        object.chunk = options.bytes === String ? $util.base64.encode(message.chunk, 0, message.chunk.length) : options.bytes === Array ? Array.prototype.slice.call(message.chunk) : message.chunk;
                    if (message.sender != null && message.hasOwnProperty("sender"))
                        object.sender = message.sender;
                    return object;
                };
    
                /**
                 * Converts this RequestApplySnapshotChunk to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.RequestApplySnapshotChunk
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                RequestApplySnapshotChunk.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return RequestApplySnapshotChunk;
            })();
    
            abci.Response = (function() {
    
                /**
                 * Properties of a Response.
                 * @memberof tendermint.abci
                 * @interface IResponse
                 * @property {tendermint.abci.IResponseException|null} [exception] Response exception
                 * @property {tendermint.abci.IResponseEcho|null} [echo] Response echo
                 * @property {tendermint.abci.IResponseFlush|null} [flush] Response flush
                 * @property {tendermint.abci.IResponseInfo|null} [info] Response info
                 * @property {tendermint.abci.IResponseSetOption|null} [set_option] Response set_option
                 * @property {tendermint.abci.IResponseInitChain|null} [init_chain] Response init_chain
                 * @property {tendermint.abci.IResponseQuery|null} [query] Response query
                 * @property {tendermint.abci.IResponseBeginBlock|null} [begin_block] Response begin_block
                 * @property {tendermint.abci.IResponseCheckTx|null} [check_tx] Response check_tx
                 * @property {tendermint.abci.IResponseDeliverTx|null} [deliver_tx] Response deliver_tx
                 * @property {tendermint.abci.IResponseEndBlock|null} [end_block] Response end_block
                 * @property {tendermint.abci.IResponseCommit|null} [commit] Response commit
                 * @property {tendermint.abci.IResponseListSnapshots|null} [list_snapshots] Response list_snapshots
                 * @property {tendermint.abci.IResponseOfferSnapshot|null} [offer_snapshot] Response offer_snapshot
                 * @property {tendermint.abci.IResponseLoadSnapshotChunk|null} [load_snapshot_chunk] Response load_snapshot_chunk
                 * @property {tendermint.abci.IResponseApplySnapshotChunk|null} [apply_snapshot_chunk] Response apply_snapshot_chunk
                 */
    
                /**
                 * Constructs a new Response.
                 * @memberof tendermint.abci
                 * @classdesc Represents a Response.
                 * @implements IResponse
                 * @constructor
                 * @param {tendermint.abci.IResponse=} [properties] Properties to set
                 */
                function Response(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Response exception.
                 * @member {tendermint.abci.IResponseException|null|undefined} exception
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.exception = null;
    
                /**
                 * Response echo.
                 * @member {tendermint.abci.IResponseEcho|null|undefined} echo
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.echo = null;
    
                /**
                 * Response flush.
                 * @member {tendermint.abci.IResponseFlush|null|undefined} flush
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.flush = null;
    
                /**
                 * Response info.
                 * @member {tendermint.abci.IResponseInfo|null|undefined} info
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.info = null;
    
                /**
                 * Response set_option.
                 * @member {tendermint.abci.IResponseSetOption|null|undefined} set_option
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.set_option = null;
    
                /**
                 * Response init_chain.
                 * @member {tendermint.abci.IResponseInitChain|null|undefined} init_chain
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.init_chain = null;
    
                /**
                 * Response query.
                 * @member {tendermint.abci.IResponseQuery|null|undefined} query
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.query = null;
    
                /**
                 * Response begin_block.
                 * @member {tendermint.abci.IResponseBeginBlock|null|undefined} begin_block
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.begin_block = null;
    
                /**
                 * Response check_tx.
                 * @member {tendermint.abci.IResponseCheckTx|null|undefined} check_tx
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.check_tx = null;
    
                /**
                 * Response deliver_tx.
                 * @member {tendermint.abci.IResponseDeliverTx|null|undefined} deliver_tx
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.deliver_tx = null;
    
                /**
                 * Response end_block.
                 * @member {tendermint.abci.IResponseEndBlock|null|undefined} end_block
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.end_block = null;
    
                /**
                 * Response commit.
                 * @member {tendermint.abci.IResponseCommit|null|undefined} commit
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.commit = null;
    
                /**
                 * Response list_snapshots.
                 * @member {tendermint.abci.IResponseListSnapshots|null|undefined} list_snapshots
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.list_snapshots = null;
    
                /**
                 * Response offer_snapshot.
                 * @member {tendermint.abci.IResponseOfferSnapshot|null|undefined} offer_snapshot
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.offer_snapshot = null;
    
                /**
                 * Response load_snapshot_chunk.
                 * @member {tendermint.abci.IResponseLoadSnapshotChunk|null|undefined} load_snapshot_chunk
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.load_snapshot_chunk = null;
    
                /**
                 * Response apply_snapshot_chunk.
                 * @member {tendermint.abci.IResponseApplySnapshotChunk|null|undefined} apply_snapshot_chunk
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Response.prototype.apply_snapshot_chunk = null;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * Response value.
                 * @member {"exception"|"echo"|"flush"|"info"|"set_option"|"init_chain"|"query"|"begin_block"|"check_tx"|"deliver_tx"|"end_block"|"commit"|"list_snapshots"|"offer_snapshot"|"load_snapshot_chunk"|"apply_snapshot_chunk"|undefined} value
                 * @memberof tendermint.abci.Response
                 * @instance
                 */
                Object.defineProperty(Response.prototype, "value", {
                    get: $util.oneOfGetter($oneOfFields = ["exception", "echo", "flush", "info", "set_option", "init_chain", "query", "begin_block", "check_tx", "deliver_tx", "end_block", "commit", "list_snapshots", "offer_snapshot", "load_snapshot_chunk", "apply_snapshot_chunk"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Encodes the specified Response message. Does not implicitly {@link tendermint.abci.Response.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.Response
                 * @static
                 * @param {tendermint.abci.IResponse} message Response message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Response.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.exception != null && Object.hasOwnProperty.call(message, "exception"))
                        $root.tendermint.abci.ResponseException.encode(message.exception, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.echo != null && Object.hasOwnProperty.call(message, "echo"))
                        $root.tendermint.abci.ResponseEcho.encode(message.echo, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.flush != null && Object.hasOwnProperty.call(message, "flush"))
                        $root.tendermint.abci.ResponseFlush.encode(message.flush, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                        $root.tendermint.abci.ResponseInfo.encode(message.info, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.set_option != null && Object.hasOwnProperty.call(message, "set_option"))
                        $root.tendermint.abci.ResponseSetOption.encode(message.set_option, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.init_chain != null && Object.hasOwnProperty.call(message, "init_chain"))
                        $root.tendermint.abci.ResponseInitChain.encode(message.init_chain, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                        $root.tendermint.abci.ResponseQuery.encode(message.query, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.begin_block != null && Object.hasOwnProperty.call(message, "begin_block"))
                        $root.tendermint.abci.ResponseBeginBlock.encode(message.begin_block, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.check_tx != null && Object.hasOwnProperty.call(message, "check_tx"))
                        $root.tendermint.abci.ResponseCheckTx.encode(message.check_tx, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.deliver_tx != null && Object.hasOwnProperty.call(message, "deliver_tx"))
                        $root.tendermint.abci.ResponseDeliverTx.encode(message.deliver_tx, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();
                    if (message.end_block != null && Object.hasOwnProperty.call(message, "end_block"))
                        $root.tendermint.abci.ResponseEndBlock.encode(message.end_block, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                        $root.tendermint.abci.ResponseCommit.encode(message.commit, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();
                    if (message.list_snapshots != null && Object.hasOwnProperty.call(message, "list_snapshots"))
                        $root.tendermint.abci.ResponseListSnapshots.encode(message.list_snapshots, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
                    if (message.offer_snapshot != null && Object.hasOwnProperty.call(message, "offer_snapshot"))
                        $root.tendermint.abci.ResponseOfferSnapshot.encode(message.offer_snapshot, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
                    if (message.load_snapshot_chunk != null && Object.hasOwnProperty.call(message, "load_snapshot_chunk"))
                        $root.tendermint.abci.ResponseLoadSnapshotChunk.encode(message.load_snapshot_chunk, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();
                    if (message.apply_snapshot_chunk != null && Object.hasOwnProperty.call(message, "apply_snapshot_chunk"))
                        $root.tendermint.abci.ResponseApplySnapshotChunk.encode(message.apply_snapshot_chunk, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Response message, length delimited. Does not implicitly {@link tendermint.abci.Response.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.Response
                 * @static
                 * @param {tendermint.abci.IResponse} message Response message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Response.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Response message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.Response
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.Response} Response
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Response.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Response();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.exception = $root.tendermint.abci.ResponseException.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.echo = $root.tendermint.abci.ResponseEcho.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.flush = $root.tendermint.abci.ResponseFlush.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.info = $root.tendermint.abci.ResponseInfo.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.set_option = $root.tendermint.abci.ResponseSetOption.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.init_chain = $root.tendermint.abci.ResponseInitChain.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.query = $root.tendermint.abci.ResponseQuery.decode(reader, reader.uint32());
                            break;
                        case 8:
                            message.begin_block = $root.tendermint.abci.ResponseBeginBlock.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.check_tx = $root.tendermint.abci.ResponseCheckTx.decode(reader, reader.uint32());
                            break;
                        case 10:
                            message.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.decode(reader, reader.uint32());
                            break;
                        case 11:
                            message.end_block = $root.tendermint.abci.ResponseEndBlock.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.commit = $root.tendermint.abci.ResponseCommit.decode(reader, reader.uint32());
                            break;
                        case 13:
                            message.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.decode(reader, reader.uint32());
                            break;
                        case 14:
                            message.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.decode(reader, reader.uint32());
                            break;
                        case 15:
                            message.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.decode(reader, reader.uint32());
                            break;
                        case 16:
                            message.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Response message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.Response
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.Response} Response
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Response.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Response message.
                 * @function verify
                 * @memberof tendermint.abci.Response
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Response.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.exception != null && message.hasOwnProperty("exception")) {
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseException.verify(message.exception);
                            if (error)
                                return "exception." + error;
                        }
                    }
                    if (message.echo != null && message.hasOwnProperty("echo")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseEcho.verify(message.echo);
                            if (error)
                                return "echo." + error;
                        }
                    }
                    if (message.flush != null && message.hasOwnProperty("flush")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseFlush.verify(message.flush);
                            if (error)
                                return "flush." + error;
                        }
                    }
                    if (message.info != null && message.hasOwnProperty("info")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseInfo.verify(message.info);
                            if (error)
                                return "info." + error;
                        }
                    }
                    if (message.set_option != null && message.hasOwnProperty("set_option")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseSetOption.verify(message.set_option);
                            if (error)
                                return "set_option." + error;
                        }
                    }
                    if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseInitChain.verify(message.init_chain);
                            if (error)
                                return "init_chain." + error;
                        }
                    }
                    if (message.query != null && message.hasOwnProperty("query")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseQuery.verify(message.query);
                            if (error)
                                return "query." + error;
                        }
                    }
                    if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseBeginBlock.verify(message.begin_block);
                            if (error)
                                return "begin_block." + error;
                        }
                    }
                    if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseCheckTx.verify(message.check_tx);
                            if (error)
                                return "check_tx." + error;
                        }
                    }
                    if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseDeliverTx.verify(message.deliver_tx);
                            if (error)
                                return "deliver_tx." + error;
                        }
                    }
                    if (message.end_block != null && message.hasOwnProperty("end_block")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseEndBlock.verify(message.end_block);
                            if (error)
                                return "end_block." + error;
                        }
                    }
                    if (message.commit != null && message.hasOwnProperty("commit")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseCommit.verify(message.commit);
                            if (error)
                                return "commit." + error;
                        }
                    }
                    if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseListSnapshots.verify(message.list_snapshots);
                            if (error)
                                return "list_snapshots." + error;
                        }
                    }
                    if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseOfferSnapshot.verify(message.offer_snapshot);
                            if (error)
                                return "offer_snapshot." + error;
                        }
                    }
                    if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseLoadSnapshotChunk.verify(message.load_snapshot_chunk);
                            if (error)
                                return "load_snapshot_chunk." + error;
                        }
                    }
                    if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                        if (properties.value === 1)
                            return "value: multiple values";
                        properties.value = 1;
                        {
                            var error = $root.tendermint.abci.ResponseApplySnapshotChunk.verify(message.apply_snapshot_chunk);
                            if (error)
                                return "apply_snapshot_chunk." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Response message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.Response
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.Response} Response
                 */
                Response.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.Response)
                        return object;
                    var message = new $root.tendermint.abci.Response();
                    if (object.exception != null) {
                        if (typeof object.exception !== "object")
                            throw TypeError(".tendermint.abci.Response.exception: object expected");
                        message.exception = $root.tendermint.abci.ResponseException.fromObject(object.exception);
                    }
                    if (object.echo != null) {
                        if (typeof object.echo !== "object")
                            throw TypeError(".tendermint.abci.Response.echo: object expected");
                        message.echo = $root.tendermint.abci.ResponseEcho.fromObject(object.echo);
                    }
                    if (object.flush != null) {
                        if (typeof object.flush !== "object")
                            throw TypeError(".tendermint.abci.Response.flush: object expected");
                        message.flush = $root.tendermint.abci.ResponseFlush.fromObject(object.flush);
                    }
                    if (object.info != null) {
                        if (typeof object.info !== "object")
                            throw TypeError(".tendermint.abci.Response.info: object expected");
                        message.info = $root.tendermint.abci.ResponseInfo.fromObject(object.info);
                    }
                    if (object.set_option != null) {
                        if (typeof object.set_option !== "object")
                            throw TypeError(".tendermint.abci.Response.set_option: object expected");
                        message.set_option = $root.tendermint.abci.ResponseSetOption.fromObject(object.set_option);
                    }
                    if (object.init_chain != null) {
                        if (typeof object.init_chain !== "object")
                            throw TypeError(".tendermint.abci.Response.init_chain: object expected");
                        message.init_chain = $root.tendermint.abci.ResponseInitChain.fromObject(object.init_chain);
                    }
                    if (object.query != null) {
                        if (typeof object.query !== "object")
                            throw TypeError(".tendermint.abci.Response.query: object expected");
                        message.query = $root.tendermint.abci.ResponseQuery.fromObject(object.query);
                    }
                    if (object.begin_block != null) {
                        if (typeof object.begin_block !== "object")
                            throw TypeError(".tendermint.abci.Response.begin_block: object expected");
                        message.begin_block = $root.tendermint.abci.ResponseBeginBlock.fromObject(object.begin_block);
                    }
                    if (object.check_tx != null) {
                        if (typeof object.check_tx !== "object")
                            throw TypeError(".tendermint.abci.Response.check_tx: object expected");
                        message.check_tx = $root.tendermint.abci.ResponseCheckTx.fromObject(object.check_tx);
                    }
                    if (object.deliver_tx != null) {
                        if (typeof object.deliver_tx !== "object")
                            throw TypeError(".tendermint.abci.Response.deliver_tx: object expected");
                        message.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.fromObject(object.deliver_tx);
                    }
                    if (object.end_block != null) {
                        if (typeof object.end_block !== "object")
                            throw TypeError(".tendermint.abci.Response.end_block: object expected");
                        message.end_block = $root.tendermint.abci.ResponseEndBlock.fromObject(object.end_block);
                    }
                    if (object.commit != null) {
                        if (typeof object.commit !== "object")
                            throw TypeError(".tendermint.abci.Response.commit: object expected");
                        message.commit = $root.tendermint.abci.ResponseCommit.fromObject(object.commit);
                    }
                    if (object.list_snapshots != null) {
                        if (typeof object.list_snapshots !== "object")
                            throw TypeError(".tendermint.abci.Response.list_snapshots: object expected");
                        message.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.fromObject(object.list_snapshots);
                    }
                    if (object.offer_snapshot != null) {
                        if (typeof object.offer_snapshot !== "object")
                            throw TypeError(".tendermint.abci.Response.offer_snapshot: object expected");
                        message.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.fromObject(object.offer_snapshot);
                    }
                    if (object.load_snapshot_chunk != null) {
                        if (typeof object.load_snapshot_chunk !== "object")
                            throw TypeError(".tendermint.abci.Response.load_snapshot_chunk: object expected");
                        message.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.fromObject(object.load_snapshot_chunk);
                    }
                    if (object.apply_snapshot_chunk != null) {
                        if (typeof object.apply_snapshot_chunk !== "object")
                            throw TypeError(".tendermint.abci.Response.apply_snapshot_chunk: object expected");
                        message.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.fromObject(object.apply_snapshot_chunk);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Response message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.Response
                 * @static
                 * @param {tendermint.abci.Response} message Response
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Response.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (message.exception != null && message.hasOwnProperty("exception")) {
                        object.exception = $root.tendermint.abci.ResponseException.toObject(message.exception, options);
                        if (options.oneofs)
                            object.value = "exception";
                    }
                    if (message.echo != null && message.hasOwnProperty("echo")) {
                        object.echo = $root.tendermint.abci.ResponseEcho.toObject(message.echo, options);
                        if (options.oneofs)
                            object.value = "echo";
                    }
                    if (message.flush != null && message.hasOwnProperty("flush")) {
                        object.flush = $root.tendermint.abci.ResponseFlush.toObject(message.flush, options);
                        if (options.oneofs)
                            object.value = "flush";
                    }
                    if (message.info != null && message.hasOwnProperty("info")) {
                        object.info = $root.tendermint.abci.ResponseInfo.toObject(message.info, options);
                        if (options.oneofs)
                            object.value = "info";
                    }
                    if (message.set_option != null && message.hasOwnProperty("set_option")) {
                        object.set_option = $root.tendermint.abci.ResponseSetOption.toObject(message.set_option, options);
                        if (options.oneofs)
                            object.value = "set_option";
                    }
                    if (message.init_chain != null && message.hasOwnProperty("init_chain")) {
                        object.init_chain = $root.tendermint.abci.ResponseInitChain.toObject(message.init_chain, options);
                        if (options.oneofs)
                            object.value = "init_chain";
                    }
                    if (message.query != null && message.hasOwnProperty("query")) {
                        object.query = $root.tendermint.abci.ResponseQuery.toObject(message.query, options);
                        if (options.oneofs)
                            object.value = "query";
                    }
                    if (message.begin_block != null && message.hasOwnProperty("begin_block")) {
                        object.begin_block = $root.tendermint.abci.ResponseBeginBlock.toObject(message.begin_block, options);
                        if (options.oneofs)
                            object.value = "begin_block";
                    }
                    if (message.check_tx != null && message.hasOwnProperty("check_tx")) {
                        object.check_tx = $root.tendermint.abci.ResponseCheckTx.toObject(message.check_tx, options);
                        if (options.oneofs)
                            object.value = "check_tx";
                    }
                    if (message.deliver_tx != null && message.hasOwnProperty("deliver_tx")) {
                        object.deliver_tx = $root.tendermint.abci.ResponseDeliverTx.toObject(message.deliver_tx, options);
                        if (options.oneofs)
                            object.value = "deliver_tx";
                    }
                    if (message.end_block != null && message.hasOwnProperty("end_block")) {
                        object.end_block = $root.tendermint.abci.ResponseEndBlock.toObject(message.end_block, options);
                        if (options.oneofs)
                            object.value = "end_block";
                    }
                    if (message.commit != null && message.hasOwnProperty("commit")) {
                        object.commit = $root.tendermint.abci.ResponseCommit.toObject(message.commit, options);
                        if (options.oneofs)
                            object.value = "commit";
                    }
                    if (message.list_snapshots != null && message.hasOwnProperty("list_snapshots")) {
                        object.list_snapshots = $root.tendermint.abci.ResponseListSnapshots.toObject(message.list_snapshots, options);
                        if (options.oneofs)
                            object.value = "list_snapshots";
                    }
                    if (message.offer_snapshot != null && message.hasOwnProperty("offer_snapshot")) {
                        object.offer_snapshot = $root.tendermint.abci.ResponseOfferSnapshot.toObject(message.offer_snapshot, options);
                        if (options.oneofs)
                            object.value = "offer_snapshot";
                    }
                    if (message.load_snapshot_chunk != null && message.hasOwnProperty("load_snapshot_chunk")) {
                        object.load_snapshot_chunk = $root.tendermint.abci.ResponseLoadSnapshotChunk.toObject(message.load_snapshot_chunk, options);
                        if (options.oneofs)
                            object.value = "load_snapshot_chunk";
                    }
                    if (message.apply_snapshot_chunk != null && message.hasOwnProperty("apply_snapshot_chunk")) {
                        object.apply_snapshot_chunk = $root.tendermint.abci.ResponseApplySnapshotChunk.toObject(message.apply_snapshot_chunk, options);
                        if (options.oneofs)
                            object.value = "apply_snapshot_chunk";
                    }
                    return object;
                };
    
                /**
                 * Converts this Response to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.Response
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Response.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Response;
            })();
    
            abci.ResponseException = (function() {
    
                /**
                 * Properties of a ResponseException.
                 * @memberof tendermint.abci
                 * @interface IResponseException
                 * @property {string|null} [error] ResponseException error
                 */
    
                /**
                 * Constructs a new ResponseException.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseException.
                 * @implements IResponseException
                 * @constructor
                 * @param {tendermint.abci.IResponseException=} [properties] Properties to set
                 */
                function ResponseException(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseException error.
                 * @member {string} error
                 * @memberof tendermint.abci.ResponseException
                 * @instance
                 */
                ResponseException.prototype.error = "";
    
                /**
                 * Encodes the specified ResponseException message. Does not implicitly {@link tendermint.abci.ResponseException.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseException
                 * @static
                 * @param {tendermint.abci.IResponseException} message ResponseException message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseException.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.error);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseException message, length delimited. Does not implicitly {@link tendermint.abci.ResponseException.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseException
                 * @static
                 * @param {tendermint.abci.IResponseException} message ResponseException message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseException.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseException message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseException
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseException} ResponseException
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseException.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseException();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.error = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseException message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseException
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseException} ResponseException
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseException.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseException message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseException
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseException.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.error != null && message.hasOwnProperty("error"))
                        if (!$util.isString(message.error))
                            return "error: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseException message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseException
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseException} ResponseException
                 */
                ResponseException.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseException)
                        return object;
                    var message = new $root.tendermint.abci.ResponseException();
                    if (object.error != null)
                        message.error = String(object.error);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseException message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseException
                 * @static
                 * @param {tendermint.abci.ResponseException} message ResponseException
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseException.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.error = "";
                    if (message.error != null && message.hasOwnProperty("error"))
                        object.error = message.error;
                    return object;
                };
    
                /**
                 * Converts this ResponseException to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseException
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseException.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseException;
            })();
    
            abci.ResponseEcho = (function() {
    
                /**
                 * Properties of a ResponseEcho.
                 * @memberof tendermint.abci
                 * @interface IResponseEcho
                 * @property {string|null} [message] ResponseEcho message
                 */
    
                /**
                 * Constructs a new ResponseEcho.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseEcho.
                 * @implements IResponseEcho
                 * @constructor
                 * @param {tendermint.abci.IResponseEcho=} [properties] Properties to set
                 */
                function ResponseEcho(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseEcho message.
                 * @member {string} message
                 * @memberof tendermint.abci.ResponseEcho
                 * @instance
                 */
                ResponseEcho.prototype.message = "";
    
                /**
                 * Encodes the specified ResponseEcho message. Does not implicitly {@link tendermint.abci.ResponseEcho.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseEcho
                 * @static
                 * @param {tendermint.abci.IResponseEcho} message ResponseEcho message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseEcho.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message != null && Object.hasOwnProperty.call(message, "message"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseEcho message, length delimited. Does not implicitly {@link tendermint.abci.ResponseEcho.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseEcho
                 * @static
                 * @param {tendermint.abci.IResponseEcho} message ResponseEcho message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseEcho.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseEcho message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseEcho
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseEcho} ResponseEcho
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseEcho.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseEcho();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseEcho message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseEcho
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseEcho} ResponseEcho
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseEcho.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseEcho message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseEcho
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseEcho.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message != null && message.hasOwnProperty("message"))
                        if (!$util.isString(message.message))
                            return "message: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseEcho message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseEcho
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseEcho} ResponseEcho
                 */
                ResponseEcho.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseEcho)
                        return object;
                    var message = new $root.tendermint.abci.ResponseEcho();
                    if (object.message != null)
                        message.message = String(object.message);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseEcho message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseEcho
                 * @static
                 * @param {tendermint.abci.ResponseEcho} message ResponseEcho
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseEcho.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.message = "";
                    if (message.message != null && message.hasOwnProperty("message"))
                        object.message = message.message;
                    return object;
                };
    
                /**
                 * Converts this ResponseEcho to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseEcho
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseEcho.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseEcho;
            })();
    
            abci.ResponseFlush = (function() {
    
                /**
                 * Properties of a ResponseFlush.
                 * @memberof tendermint.abci
                 * @interface IResponseFlush
                 */
    
                /**
                 * Constructs a new ResponseFlush.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseFlush.
                 * @implements IResponseFlush
                 * @constructor
                 * @param {tendermint.abci.IResponseFlush=} [properties] Properties to set
                 */
                function ResponseFlush(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Encodes the specified ResponseFlush message. Does not implicitly {@link tendermint.abci.ResponseFlush.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseFlush
                 * @static
                 * @param {tendermint.abci.IResponseFlush} message ResponseFlush message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseFlush.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseFlush message, length delimited. Does not implicitly {@link tendermint.abci.ResponseFlush.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseFlush
                 * @static
                 * @param {tendermint.abci.IResponseFlush} message ResponseFlush message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseFlush.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseFlush message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseFlush
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseFlush} ResponseFlush
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseFlush.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseFlush();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseFlush message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseFlush
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseFlush} ResponseFlush
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseFlush.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseFlush message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseFlush
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseFlush.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseFlush message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseFlush
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseFlush} ResponseFlush
                 */
                ResponseFlush.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseFlush)
                        return object;
                    return new $root.tendermint.abci.ResponseFlush();
                };
    
                /**
                 * Creates a plain object from a ResponseFlush message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseFlush
                 * @static
                 * @param {tendermint.abci.ResponseFlush} message ResponseFlush
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseFlush.toObject = function toObject() {
                    return {};
                };
    
                /**
                 * Converts this ResponseFlush to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseFlush
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseFlush.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseFlush;
            })();
    
            abci.ResponseInfo = (function() {
    
                /**
                 * Properties of a ResponseInfo.
                 * @memberof tendermint.abci
                 * @interface IResponseInfo
                 * @property {string|null} [data] ResponseInfo data
                 * @property {string|null} [version] ResponseInfo version
                 * @property {Long|null} [app_version] ResponseInfo app_version
                 * @property {Long|null} [last_block_height] ResponseInfo last_block_height
                 * @property {Uint8Array|null} [last_block_app_hash] ResponseInfo last_block_app_hash
                 */
    
                /**
                 * Constructs a new ResponseInfo.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseInfo.
                 * @implements IResponseInfo
                 * @constructor
                 * @param {tendermint.abci.IResponseInfo=} [properties] Properties to set
                 */
                function ResponseInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseInfo data.
                 * @member {string} data
                 * @memberof tendermint.abci.ResponseInfo
                 * @instance
                 */
                ResponseInfo.prototype.data = "";
    
                /**
                 * ResponseInfo version.
                 * @member {string} version
                 * @memberof tendermint.abci.ResponseInfo
                 * @instance
                 */
                ResponseInfo.prototype.version = "";
    
                /**
                 * ResponseInfo app_version.
                 * @member {Long} app_version
                 * @memberof tendermint.abci.ResponseInfo
                 * @instance
                 */
                ResponseInfo.prototype.app_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * ResponseInfo last_block_height.
                 * @member {Long} last_block_height
                 * @memberof tendermint.abci.ResponseInfo
                 * @instance
                 */
                ResponseInfo.prototype.last_block_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * ResponseInfo last_block_app_hash.
                 * @member {Uint8Array} last_block_app_hash
                 * @memberof tendermint.abci.ResponseInfo
                 * @instance
                 */
                ResponseInfo.prototype.last_block_app_hash = $util.newBuffer([]);
    
                /**
                 * Encodes the specified ResponseInfo message. Does not implicitly {@link tendermint.abci.ResponseInfo.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseInfo
                 * @static
                 * @param {tendermint.abci.IResponseInfo} message ResponseInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.data);
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.version);
                    if (message.app_version != null && Object.hasOwnProperty.call(message, "app_version"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.app_version);
                    if (message.last_block_height != null && Object.hasOwnProperty.call(message, "last_block_height"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.last_block_height);
                    if (message.last_block_app_hash != null && Object.hasOwnProperty.call(message, "last_block_app_hash"))
                        writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.last_block_app_hash);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseInfo message, length delimited. Does not implicitly {@link tendermint.abci.ResponseInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseInfo
                 * @static
                 * @param {tendermint.abci.IResponseInfo} message ResponseInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseInfo} ResponseInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.data = reader.string();
                            break;
                        case 2:
                            message.version = reader.string();
                            break;
                        case 3:
                            message.app_version = reader.uint64();
                            break;
                        case 4:
                            message.last_block_height = reader.int64();
                            break;
                        case 5:
                            message.last_block_app_hash = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseInfo} ResponseInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseInfo message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!$util.isString(message.data))
                            return "data: string expected";
                    if (message.version != null && message.hasOwnProperty("version"))
                        if (!$util.isString(message.version))
                            return "version: string expected";
                    if (message.app_version != null && message.hasOwnProperty("app_version"))
                        if (!$util.isInteger(message.app_version) && !(message.app_version && $util.isInteger(message.app_version.low) && $util.isInteger(message.app_version.high)))
                            return "app_version: integer|Long expected";
                    if (message.last_block_height != null && message.hasOwnProperty("last_block_height"))
                        if (!$util.isInteger(message.last_block_height) && !(message.last_block_height && $util.isInteger(message.last_block_height.low) && $util.isInteger(message.last_block_height.high)))
                            return "last_block_height: integer|Long expected";
                    if (message.last_block_app_hash != null && message.hasOwnProperty("last_block_app_hash"))
                        if (!(message.last_block_app_hash && typeof message.last_block_app_hash.length === "number" || $util.isString(message.last_block_app_hash)))
                            return "last_block_app_hash: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseInfo} ResponseInfo
                 */
                ResponseInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseInfo)
                        return object;
                    var message = new $root.tendermint.abci.ResponseInfo();
                    if (object.data != null)
                        message.data = String(object.data);
                    if (object.version != null)
                        message.version = String(object.version);
                    if (object.app_version != null)
                        if ($util.Long)
                            (message.app_version = $util.Long.fromValue(object.app_version)).unsigned = true;
                        else if (typeof object.app_version === "string")
                            message.app_version = parseInt(object.app_version, 10);
                        else if (typeof object.app_version === "number")
                            message.app_version = object.app_version;
                        else if (typeof object.app_version === "object")
                            message.app_version = new $util.LongBits(object.app_version.low >>> 0, object.app_version.high >>> 0).toNumber(true);
                    if (object.last_block_height != null)
                        if ($util.Long)
                            (message.last_block_height = $util.Long.fromValue(object.last_block_height)).unsigned = false;
                        else if (typeof object.last_block_height === "string")
                            message.last_block_height = parseInt(object.last_block_height, 10);
                        else if (typeof object.last_block_height === "number")
                            message.last_block_height = object.last_block_height;
                        else if (typeof object.last_block_height === "object")
                            message.last_block_height = new $util.LongBits(object.last_block_height.low >>> 0, object.last_block_height.high >>> 0).toNumber();
                    if (object.last_block_app_hash != null)
                        if (typeof object.last_block_app_hash === "string")
                            $util.base64.decode(object.last_block_app_hash, message.last_block_app_hash = $util.newBuffer($util.base64.length(object.last_block_app_hash)), 0);
                        else if (object.last_block_app_hash.length)
                            message.last_block_app_hash = object.last_block_app_hash;
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseInfo
                 * @static
                 * @param {tendermint.abci.ResponseInfo} message ResponseInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.data = "";
                        object.version = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.app_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.app_version = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.last_block_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.last_block_height = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.last_block_app_hash = "";
                        else {
                            object.last_block_app_hash = [];
                            if (options.bytes !== Array)
                                object.last_block_app_hash = $util.newBuffer(object.last_block_app_hash);
                        }
                    }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = message.data;
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = message.version;
                    if (message.app_version != null && message.hasOwnProperty("app_version"))
                        if (typeof message.app_version === "number")
                            object.app_version = options.longs === String ? String(message.app_version) : message.app_version;
                        else
                            object.app_version = options.longs === String ? $util.Long.prototype.toString.call(message.app_version) : options.longs === Number ? new $util.LongBits(message.app_version.low >>> 0, message.app_version.high >>> 0).toNumber(true) : message.app_version;
                    if (message.last_block_height != null && message.hasOwnProperty("last_block_height"))
                        if (typeof message.last_block_height === "number")
                            object.last_block_height = options.longs === String ? String(message.last_block_height) : message.last_block_height;
                        else
                            object.last_block_height = options.longs === String ? $util.Long.prototype.toString.call(message.last_block_height) : options.longs === Number ? new $util.LongBits(message.last_block_height.low >>> 0, message.last_block_height.high >>> 0).toNumber() : message.last_block_height;
                    if (message.last_block_app_hash != null && message.hasOwnProperty("last_block_app_hash"))
                        object.last_block_app_hash = options.bytes === String ? $util.base64.encode(message.last_block_app_hash, 0, message.last_block_app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_block_app_hash) : message.last_block_app_hash;
                    return object;
                };
    
                /**
                 * Converts this ResponseInfo to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseInfo;
            })();
    
            abci.ResponseSetOption = (function() {
    
                /**
                 * Properties of a ResponseSetOption.
                 * @memberof tendermint.abci
                 * @interface IResponseSetOption
                 * @property {number|null} [code] ResponseSetOption code
                 * @property {string|null} [log] ResponseSetOption log
                 * @property {string|null} [info] ResponseSetOption info
                 */
    
                /**
                 * Constructs a new ResponseSetOption.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseSetOption.
                 * @implements IResponseSetOption
                 * @constructor
                 * @param {tendermint.abci.IResponseSetOption=} [properties] Properties to set
                 */
                function ResponseSetOption(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseSetOption code.
                 * @member {number} code
                 * @memberof tendermint.abci.ResponseSetOption
                 * @instance
                 */
                ResponseSetOption.prototype.code = 0;
    
                /**
                 * ResponseSetOption log.
                 * @member {string} log
                 * @memberof tendermint.abci.ResponseSetOption
                 * @instance
                 */
                ResponseSetOption.prototype.log = "";
    
                /**
                 * ResponseSetOption info.
                 * @member {string} info
                 * @memberof tendermint.abci.ResponseSetOption
                 * @instance
                 */
                ResponseSetOption.prototype.info = "";
    
                /**
                 * Encodes the specified ResponseSetOption message. Does not implicitly {@link tendermint.abci.ResponseSetOption.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseSetOption
                 * @static
                 * @param {tendermint.abci.IResponseSetOption} message ResponseSetOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseSetOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                    if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                    if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseSetOption message, length delimited. Does not implicitly {@link tendermint.abci.ResponseSetOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseSetOption
                 * @static
                 * @param {tendermint.abci.IResponseSetOption} message ResponseSetOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseSetOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseSetOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseSetOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseSetOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseSetOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.uint32();
                            break;
                        case 3:
                            message.log = reader.string();
                            break;
                        case 4:
                            message.info = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseSetOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseSetOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseSetOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseSetOption message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseSetOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseSetOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.log != null && message.hasOwnProperty("log"))
                        if (!$util.isString(message.log))
                            return "log: string expected";
                    if (message.info != null && message.hasOwnProperty("info"))
                        if (!$util.isString(message.info))
                            return "info: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseSetOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseSetOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseSetOption} ResponseSetOption
                 */
                ResponseSetOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseSetOption)
                        return object;
                    var message = new $root.tendermint.abci.ResponseSetOption();
                    if (object.code != null)
                        message.code = object.code >>> 0;
                    if (object.log != null)
                        message.log = String(object.log);
                    if (object.info != null)
                        message.info = String(object.info);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseSetOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseSetOption
                 * @static
                 * @param {tendermint.abci.ResponseSetOption} message ResponseSetOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseSetOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.log = "";
                        object.info = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.log != null && message.hasOwnProperty("log"))
                        object.log = message.log;
                    if (message.info != null && message.hasOwnProperty("info"))
                        object.info = message.info;
                    return object;
                };
    
                /**
                 * Converts this ResponseSetOption to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseSetOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseSetOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseSetOption;
            })();
    
            abci.ResponseInitChain = (function() {
    
                /**
                 * Properties of a ResponseInitChain.
                 * @memberof tendermint.abci
                 * @interface IResponseInitChain
                 * @property {tendermint.abci.IConsensusParams|null} [consensus_params] ResponseInitChain consensus_params
                 * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validators] ResponseInitChain validators
                 * @property {Uint8Array|null} [app_hash] ResponseInitChain app_hash
                 */
    
                /**
                 * Constructs a new ResponseInitChain.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseInitChain.
                 * @implements IResponseInitChain
                 * @constructor
                 * @param {tendermint.abci.IResponseInitChain=} [properties] Properties to set
                 */
                function ResponseInitChain(properties) {
                    this.validators = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseInitChain consensus_params.
                 * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_params
                 * @memberof tendermint.abci.ResponseInitChain
                 * @instance
                 */
                ResponseInitChain.prototype.consensus_params = null;
    
                /**
                 * ResponseInitChain validators.
                 * @member {Array.<tendermint.abci.IValidatorUpdate>} validators
                 * @memberof tendermint.abci.ResponseInitChain
                 * @instance
                 */
                ResponseInitChain.prototype.validators = $util.emptyArray;
    
                /**
                 * ResponseInitChain app_hash.
                 * @member {Uint8Array} app_hash
                 * @memberof tendermint.abci.ResponseInitChain
                 * @instance
                 */
                ResponseInitChain.prototype.app_hash = $util.newBuffer([]);
    
                /**
                 * Encodes the specified ResponseInitChain message. Does not implicitly {@link tendermint.abci.ResponseInitChain.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseInitChain
                 * @static
                 * @param {tendermint.abci.IResponseInitChain} message ResponseInitChain message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseInitChain.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.consensus_params != null && Object.hasOwnProperty.call(message, "consensus_params"))
                        $root.tendermint.abci.ConsensusParams.encode(message.consensus_params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.validators != null && message.validators.length)
                        for (var i = 0; i < message.validators.length; ++i)
                            $root.tendermint.abci.ValidatorUpdate.encode(message.validators[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.app_hash);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseInitChain message, length delimited. Does not implicitly {@link tendermint.abci.ResponseInitChain.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseInitChain
                 * @static
                 * @param {tendermint.abci.IResponseInitChain} message ResponseInitChain message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseInitChain.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseInitChain message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseInitChain
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseInitChain.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseInitChain();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.consensus_params = $root.tendermint.abci.ConsensusParams.decode(reader, reader.uint32());
                            break;
                        case 2:
                            if (!(message.validators && message.validators.length))
                                message.validators = [];
                            message.validators.push($root.tendermint.abci.ValidatorUpdate.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.app_hash = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseInitChain message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseInitChain
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseInitChain.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseInitChain message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseInitChain
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseInitChain.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.consensus_params != null && message.hasOwnProperty("consensus_params")) {
                        var error = $root.tendermint.abci.ConsensusParams.verify(message.consensus_params);
                        if (error)
                            return "consensus_params." + error;
                    }
                    if (message.validators != null && message.hasOwnProperty("validators")) {
                        if (!Array.isArray(message.validators))
                            return "validators: array expected";
                        for (var i = 0; i < message.validators.length; ++i) {
                            var error = $root.tendermint.abci.ValidatorUpdate.verify(message.validators[i]);
                            if (error)
                                return "validators." + error;
                        }
                    }
                    if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                        if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                            return "app_hash: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseInitChain message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseInitChain
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseInitChain} ResponseInitChain
                 */
                ResponseInitChain.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseInitChain)
                        return object;
                    var message = new $root.tendermint.abci.ResponseInitChain();
                    if (object.consensus_params != null) {
                        if (typeof object.consensus_params !== "object")
                            throw TypeError(".tendermint.abci.ResponseInitChain.consensus_params: object expected");
                        message.consensus_params = $root.tendermint.abci.ConsensusParams.fromObject(object.consensus_params);
                    }
                    if (object.validators) {
                        if (!Array.isArray(object.validators))
                            throw TypeError(".tendermint.abci.ResponseInitChain.validators: array expected");
                        message.validators = [];
                        for (var i = 0; i < object.validators.length; ++i) {
                            if (typeof object.validators[i] !== "object")
                                throw TypeError(".tendermint.abci.ResponseInitChain.validators: object expected");
                            message.validators[i] = $root.tendermint.abci.ValidatorUpdate.fromObject(object.validators[i]);
                        }
                    }
                    if (object.app_hash != null)
                        if (typeof object.app_hash === "string")
                            $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                        else if (object.app_hash.length)
                            message.app_hash = object.app_hash;
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseInitChain message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseInitChain
                 * @static
                 * @param {tendermint.abci.ResponseInitChain} message ResponseInitChain
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseInitChain.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.validators = [];
                    if (options.defaults) {
                        object.consensus_params = null;
                        if (options.bytes === String)
                            object.app_hash = "";
                        else {
                            object.app_hash = [];
                            if (options.bytes !== Array)
                                object.app_hash = $util.newBuffer(object.app_hash);
                        }
                    }
                    if (message.consensus_params != null && message.hasOwnProperty("consensus_params"))
                        object.consensus_params = $root.tendermint.abci.ConsensusParams.toObject(message.consensus_params, options);
                    if (message.validators && message.validators.length) {
                        object.validators = [];
                        for (var j = 0; j < message.validators.length; ++j)
                            object.validators[j] = $root.tendermint.abci.ValidatorUpdate.toObject(message.validators[j], options);
                    }
                    if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                        object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                    return object;
                };
    
                /**
                 * Converts this ResponseInitChain to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseInitChain
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseInitChain.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseInitChain;
            })();
    
            abci.ResponseQuery = (function() {
    
                /**
                 * Properties of a ResponseQuery.
                 * @memberof tendermint.abci
                 * @interface IResponseQuery
                 * @property {number|null} [code] ResponseQuery code
                 * @property {string|null} [log] ResponseQuery log
                 * @property {string|null} [info] ResponseQuery info
                 * @property {Long|null} [index] ResponseQuery index
                 * @property {Uint8Array|null} [key] ResponseQuery key
                 * @property {Uint8Array|null} [value] ResponseQuery value
                 * @property {tendermint.crypto.IProofOps|null} [proof_ops] ResponseQuery proof_ops
                 * @property {Long|null} [height] ResponseQuery height
                 * @property {string|null} [codespace] ResponseQuery codespace
                 */
    
                /**
                 * Constructs a new ResponseQuery.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseQuery.
                 * @implements IResponseQuery
                 * @constructor
                 * @param {tendermint.abci.IResponseQuery=} [properties] Properties to set
                 */
                function ResponseQuery(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseQuery code.
                 * @member {number} code
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 */
                ResponseQuery.prototype.code = 0;
    
                /**
                 * ResponseQuery log.
                 * @member {string} log
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 */
                ResponseQuery.prototype.log = "";
    
                /**
                 * ResponseQuery info.
                 * @member {string} info
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 */
                ResponseQuery.prototype.info = "";
    
                /**
                 * ResponseQuery index.
                 * @member {Long} index
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 */
                ResponseQuery.prototype.index = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * ResponseQuery key.
                 * @member {Uint8Array} key
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 */
                ResponseQuery.prototype.key = $util.newBuffer([]);
    
                /**
                 * ResponseQuery value.
                 * @member {Uint8Array} value
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 */
                ResponseQuery.prototype.value = $util.newBuffer([]);
    
                /**
                 * ResponseQuery proof_ops.
                 * @member {tendermint.crypto.IProofOps|null|undefined} proof_ops
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 */
                ResponseQuery.prototype.proof_ops = null;
    
                /**
                 * ResponseQuery height.
                 * @member {Long} height
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 */
                ResponseQuery.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * ResponseQuery codespace.
                 * @member {string} codespace
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 */
                ResponseQuery.prototype.codespace = "";
    
                /**
                 * Encodes the specified ResponseQuery message. Does not implicitly {@link tendermint.abci.ResponseQuery.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseQuery
                 * @static
                 * @param {tendermint.abci.IResponseQuery} message ResponseQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseQuery.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                    if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                    if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.index);
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.key);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.value);
                    if (message.proof_ops != null && Object.hasOwnProperty.call(message, "proof_ops"))
                        $root.tendermint.crypto.ProofOps.encode(message.proof_ops, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int64(message.height);
                    if (message.codespace != null && Object.hasOwnProperty.call(message, "codespace"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.codespace);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseQuery message, length delimited. Does not implicitly {@link tendermint.abci.ResponseQuery.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseQuery
                 * @static
                 * @param {tendermint.abci.IResponseQuery} message ResponseQuery message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseQuery.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseQuery message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseQuery
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseQuery} ResponseQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseQuery.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseQuery();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.uint32();
                            break;
                        case 3:
                            message.log = reader.string();
                            break;
                        case 4:
                            message.info = reader.string();
                            break;
                        case 5:
                            message.index = reader.int64();
                            break;
                        case 6:
                            message.key = reader.bytes();
                            break;
                        case 7:
                            message.value = reader.bytes();
                            break;
                        case 8:
                            message.proof_ops = $root.tendermint.crypto.ProofOps.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.height = reader.int64();
                            break;
                        case 10:
                            message.codespace = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseQuery message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseQuery
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseQuery} ResponseQuery
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseQuery.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseQuery message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseQuery
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseQuery.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.log != null && message.hasOwnProperty("log"))
                        if (!$util.isString(message.log))
                            return "log: string expected";
                    if (message.info != null && message.hasOwnProperty("info"))
                        if (!$util.isString(message.info))
                            return "info: string expected";
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (!$util.isInteger(message.index) && !(message.index && $util.isInteger(message.index.low) && $util.isInteger(message.index.high)))
                            return "index: integer|Long expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                            return "key: buffer expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    if (message.proof_ops != null && message.hasOwnProperty("proof_ops")) {
                        var error = $root.tendermint.crypto.ProofOps.verify(message.proof_ops);
                        if (error)
                            return "proof_ops." + error;
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.codespace != null && message.hasOwnProperty("codespace"))
                        if (!$util.isString(message.codespace))
                            return "codespace: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseQuery message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseQuery
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseQuery} ResponseQuery
                 */
                ResponseQuery.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseQuery)
                        return object;
                    var message = new $root.tendermint.abci.ResponseQuery();
                    if (object.code != null)
                        message.code = object.code >>> 0;
                    if (object.log != null)
                        message.log = String(object.log);
                    if (object.info != null)
                        message.info = String(object.info);
                    if (object.index != null)
                        if ($util.Long)
                            (message.index = $util.Long.fromValue(object.index)).unsigned = false;
                        else if (typeof object.index === "string")
                            message.index = parseInt(object.index, 10);
                        else if (typeof object.index === "number")
                            message.index = object.index;
                        else if (typeof object.index === "object")
                            message.index = new $util.LongBits(object.index.low >>> 0, object.index.high >>> 0).toNumber();
                    if (object.key != null)
                        if (typeof object.key === "string")
                            $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                        else if (object.key.length)
                            message.key = object.key;
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    if (object.proof_ops != null) {
                        if (typeof object.proof_ops !== "object")
                            throw TypeError(".tendermint.abci.ResponseQuery.proof_ops: object expected");
                        message.proof_ops = $root.tendermint.crypto.ProofOps.fromObject(object.proof_ops);
                    }
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.codespace != null)
                        message.codespace = String(object.codespace);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseQuery message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseQuery
                 * @static
                 * @param {tendermint.abci.ResponseQuery} message ResponseQuery
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseQuery.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.code = 0;
                        object.log = "";
                        object.info = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.index = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.index = options.longs === String ? "0" : 0;
                        if (options.bytes === String)
                            object.key = "";
                        else {
                            object.key = [];
                            if (options.bytes !== Array)
                                object.key = $util.newBuffer(object.key);
                        }
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                        object.proof_ops = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.codespace = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.log != null && message.hasOwnProperty("log"))
                        object.log = message.log;
                    if (message.info != null && message.hasOwnProperty("info"))
                        object.info = message.info;
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (typeof message.index === "number")
                            object.index = options.longs === String ? String(message.index) : message.index;
                        else
                            object.index = options.longs === String ? $util.Long.prototype.toString.call(message.index) : options.longs === Number ? new $util.LongBits(message.index.low >>> 0, message.index.high >>> 0).toNumber() : message.index;
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    if (message.proof_ops != null && message.hasOwnProperty("proof_ops"))
                        object.proof_ops = $root.tendermint.crypto.ProofOps.toObject(message.proof_ops, options);
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.codespace != null && message.hasOwnProperty("codespace"))
                        object.codespace = message.codespace;
                    return object;
                };
    
                /**
                 * Converts this ResponseQuery to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseQuery
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseQuery.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseQuery;
            })();
    
            abci.ResponseBeginBlock = (function() {
    
                /**
                 * Properties of a ResponseBeginBlock.
                 * @memberof tendermint.abci
                 * @interface IResponseBeginBlock
                 * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseBeginBlock events
                 */
    
                /**
                 * Constructs a new ResponseBeginBlock.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseBeginBlock.
                 * @implements IResponseBeginBlock
                 * @constructor
                 * @param {tendermint.abci.IResponseBeginBlock=} [properties] Properties to set
                 */
                function ResponseBeginBlock(properties) {
                    this.events = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseBeginBlock events.
                 * @member {Array.<tendermint.abci.IEvent>} events
                 * @memberof tendermint.abci.ResponseBeginBlock
                 * @instance
                 */
                ResponseBeginBlock.prototype.events = $util.emptyArray;
    
                /**
                 * Encodes the specified ResponseBeginBlock message. Does not implicitly {@link tendermint.abci.ResponseBeginBlock.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseBeginBlock
                 * @static
                 * @param {tendermint.abci.IResponseBeginBlock} message ResponseBeginBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseBeginBlock.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.events != null && message.events.length)
                        for (var i = 0; i < message.events.length; ++i)
                            $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseBeginBlock message, length delimited. Does not implicitly {@link tendermint.abci.ResponseBeginBlock.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseBeginBlock
                 * @static
                 * @param {tendermint.abci.IResponseBeginBlock} message ResponseBeginBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseBeginBlock.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseBeginBlock message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseBeginBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseBeginBlock.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseBeginBlock();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.events && message.events.length))
                                message.events = [];
                            message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseBeginBlock message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseBeginBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseBeginBlock.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseBeginBlock message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseBeginBlock
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseBeginBlock.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.events != null && message.hasOwnProperty("events")) {
                        if (!Array.isArray(message.events))
                            return "events: array expected";
                        for (var i = 0; i < message.events.length; ++i) {
                            var error = $root.tendermint.abci.Event.verify(message.events[i]);
                            if (error)
                                return "events." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResponseBeginBlock message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseBeginBlock
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseBeginBlock} ResponseBeginBlock
                 */
                ResponseBeginBlock.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseBeginBlock)
                        return object;
                    var message = new $root.tendermint.abci.ResponseBeginBlock();
                    if (object.events) {
                        if (!Array.isArray(object.events))
                            throw TypeError(".tendermint.abci.ResponseBeginBlock.events: array expected");
                        message.events = [];
                        for (var i = 0; i < object.events.length; ++i) {
                            if (typeof object.events[i] !== "object")
                                throw TypeError(".tendermint.abci.ResponseBeginBlock.events: object expected");
                            message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseBeginBlock message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseBeginBlock
                 * @static
                 * @param {tendermint.abci.ResponseBeginBlock} message ResponseBeginBlock
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseBeginBlock.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.events = [];
                    if (message.events && message.events.length) {
                        object.events = [];
                        for (var j = 0; j < message.events.length; ++j)
                            object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ResponseBeginBlock to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseBeginBlock
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseBeginBlock.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseBeginBlock;
            })();
    
            abci.ResponseCheckTx = (function() {
    
                /**
                 * Properties of a ResponseCheckTx.
                 * @memberof tendermint.abci
                 * @interface IResponseCheckTx
                 * @property {number|null} [code] ResponseCheckTx code
                 * @property {Uint8Array|null} [data] ResponseCheckTx data
                 * @property {string|null} [log] ResponseCheckTx log
                 * @property {string|null} [info] ResponseCheckTx info
                 * @property {Long|null} [gas_wanted] ResponseCheckTx gas_wanted
                 * @property {Long|null} [gas_used] ResponseCheckTx gas_used
                 * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseCheckTx events
                 * @property {string|null} [codespace] ResponseCheckTx codespace
                 */
    
                /**
                 * Constructs a new ResponseCheckTx.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseCheckTx.
                 * @implements IResponseCheckTx
                 * @constructor
                 * @param {tendermint.abci.IResponseCheckTx=} [properties] Properties to set
                 */
                function ResponseCheckTx(properties) {
                    this.events = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseCheckTx code.
                 * @member {number} code
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @instance
                 */
                ResponseCheckTx.prototype.code = 0;
    
                /**
                 * ResponseCheckTx data.
                 * @member {Uint8Array} data
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @instance
                 */
                ResponseCheckTx.prototype.data = $util.newBuffer([]);
    
                /**
                 * ResponseCheckTx log.
                 * @member {string} log
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @instance
                 */
                ResponseCheckTx.prototype.log = "";
    
                /**
                 * ResponseCheckTx info.
                 * @member {string} info
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @instance
                 */
                ResponseCheckTx.prototype.info = "";
    
                /**
                 * ResponseCheckTx gas_wanted.
                 * @member {Long} gas_wanted
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @instance
                 */
                ResponseCheckTx.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * ResponseCheckTx gas_used.
                 * @member {Long} gas_used
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @instance
                 */
                ResponseCheckTx.prototype.gas_used = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * ResponseCheckTx events.
                 * @member {Array.<tendermint.abci.IEvent>} events
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @instance
                 */
                ResponseCheckTx.prototype.events = $util.emptyArray;
    
                /**
                 * ResponseCheckTx codespace.
                 * @member {string} codespace
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @instance
                 */
                ResponseCheckTx.prototype.codespace = "";
    
                /**
                 * Encodes the specified ResponseCheckTx message. Does not implicitly {@link tendermint.abci.ResponseCheckTx.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @static
                 * @param {tendermint.abci.IResponseCheckTx} message ResponseCheckTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseCheckTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                    if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                    if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                    if (message.gas_wanted != null && Object.hasOwnProperty.call(message, "gas_wanted"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.gas_wanted);
                    if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int64(message.gas_used);
                    if (message.events != null && message.events.length)
                        for (var i = 0; i < message.events.length; ++i)
                            $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.codespace != null && Object.hasOwnProperty.call(message, "codespace"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.codespace);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseCheckTx message, length delimited. Does not implicitly {@link tendermint.abci.ResponseCheckTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @static
                 * @param {tendermint.abci.IResponseCheckTx} message ResponseCheckTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseCheckTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseCheckTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseCheckTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseCheckTx();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.uint32();
                            break;
                        case 2:
                            message.data = reader.bytes();
                            break;
                        case 3:
                            message.log = reader.string();
                            break;
                        case 4:
                            message.info = reader.string();
                            break;
                        case 5:
                            message.gas_wanted = reader.int64();
                            break;
                        case 6:
                            message.gas_used = reader.int64();
                            break;
                        case 7:
                            if (!(message.events && message.events.length))
                                message.events = [];
                            message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.codespace = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseCheckTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseCheckTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseCheckTx message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseCheckTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    if (message.log != null && message.hasOwnProperty("log"))
                        if (!$util.isString(message.log))
                            return "log: string expected";
                    if (message.info != null && message.hasOwnProperty("info"))
                        if (!$util.isString(message.info))
                            return "info: string expected";
                    if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                        if (!$util.isInteger(message.gas_wanted) && !(message.gas_wanted && $util.isInteger(message.gas_wanted.low) && $util.isInteger(message.gas_wanted.high)))
                            return "gas_wanted: integer|Long expected";
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (!$util.isInteger(message.gas_used) && !(message.gas_used && $util.isInteger(message.gas_used.low) && $util.isInteger(message.gas_used.high)))
                            return "gas_used: integer|Long expected";
                    if (message.events != null && message.hasOwnProperty("events")) {
                        if (!Array.isArray(message.events))
                            return "events: array expected";
                        for (var i = 0; i < message.events.length; ++i) {
                            var error = $root.tendermint.abci.Event.verify(message.events[i]);
                            if (error)
                                return "events." + error;
                        }
                    }
                    if (message.codespace != null && message.hasOwnProperty("codespace"))
                        if (!$util.isString(message.codespace))
                            return "codespace: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseCheckTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseCheckTx} ResponseCheckTx
                 */
                ResponseCheckTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseCheckTx)
                        return object;
                    var message = new $root.tendermint.abci.ResponseCheckTx();
                    if (object.code != null)
                        message.code = object.code >>> 0;
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    if (object.log != null)
                        message.log = String(object.log);
                    if (object.info != null)
                        message.info = String(object.info);
                    if (object.gas_wanted != null)
                        if ($util.Long)
                            (message.gas_wanted = $util.Long.fromValue(object.gas_wanted)).unsigned = false;
                        else if (typeof object.gas_wanted === "string")
                            message.gas_wanted = parseInt(object.gas_wanted, 10);
                        else if (typeof object.gas_wanted === "number")
                            message.gas_wanted = object.gas_wanted;
                        else if (typeof object.gas_wanted === "object")
                            message.gas_wanted = new $util.LongBits(object.gas_wanted.low >>> 0, object.gas_wanted.high >>> 0).toNumber();
                    if (object.gas_used != null)
                        if ($util.Long)
                            (message.gas_used = $util.Long.fromValue(object.gas_used)).unsigned = false;
                        else if (typeof object.gas_used === "string")
                            message.gas_used = parseInt(object.gas_used, 10);
                        else if (typeof object.gas_used === "number")
                            message.gas_used = object.gas_used;
                        else if (typeof object.gas_used === "object")
                            message.gas_used = new $util.LongBits(object.gas_used.low >>> 0, object.gas_used.high >>> 0).toNumber();
                    if (object.events) {
                        if (!Array.isArray(object.events))
                            throw TypeError(".tendermint.abci.ResponseCheckTx.events: array expected");
                        message.events = [];
                        for (var i = 0; i < object.events.length; ++i) {
                            if (typeof object.events[i] !== "object")
                                throw TypeError(".tendermint.abci.ResponseCheckTx.events: object expected");
                            message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                        }
                    }
                    if (object.codespace != null)
                        message.codespace = String(object.codespace);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseCheckTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @static
                 * @param {tendermint.abci.ResponseCheckTx} message ResponseCheckTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseCheckTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.events = [];
                    if (options.defaults) {
                        object.code = 0;
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                        object.log = "";
                        object.info = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.gas_wanted = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas_wanted = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas_used = options.longs === String ? "0" : 0;
                        object.codespace = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    if (message.log != null && message.hasOwnProperty("log"))
                        object.log = message.log;
                    if (message.info != null && message.hasOwnProperty("info"))
                        object.info = message.info;
                    if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                        if (typeof message.gas_wanted === "number")
                            object.gas_wanted = options.longs === String ? String(message.gas_wanted) : message.gas_wanted;
                        else
                            object.gas_wanted = options.longs === String ? $util.Long.prototype.toString.call(message.gas_wanted) : options.longs === Number ? new $util.LongBits(message.gas_wanted.low >>> 0, message.gas_wanted.high >>> 0).toNumber() : message.gas_wanted;
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (typeof message.gas_used === "number")
                            object.gas_used = options.longs === String ? String(message.gas_used) : message.gas_used;
                        else
                            object.gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.gas_used) : options.longs === Number ? new $util.LongBits(message.gas_used.low >>> 0, message.gas_used.high >>> 0).toNumber() : message.gas_used;
                    if (message.events && message.events.length) {
                        object.events = [];
                        for (var j = 0; j < message.events.length; ++j)
                            object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                    }
                    if (message.codespace != null && message.hasOwnProperty("codespace"))
                        object.codespace = message.codespace;
                    return object;
                };
    
                /**
                 * Converts this ResponseCheckTx to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseCheckTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseCheckTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseCheckTx;
            })();
    
            abci.ResponseDeliverTx = (function() {
    
                /**
                 * Properties of a ResponseDeliverTx.
                 * @memberof tendermint.abci
                 * @interface IResponseDeliverTx
                 * @property {number|null} [code] ResponseDeliverTx code
                 * @property {Uint8Array|null} [data] ResponseDeliverTx data
                 * @property {string|null} [log] ResponseDeliverTx log
                 * @property {string|null} [info] ResponseDeliverTx info
                 * @property {Long|null} [gas_wanted] ResponseDeliverTx gas_wanted
                 * @property {Long|null} [gas_used] ResponseDeliverTx gas_used
                 * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseDeliverTx events
                 * @property {string|null} [codespace] ResponseDeliverTx codespace
                 */
    
                /**
                 * Constructs a new ResponseDeliverTx.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseDeliverTx.
                 * @implements IResponseDeliverTx
                 * @constructor
                 * @param {tendermint.abci.IResponseDeliverTx=} [properties] Properties to set
                 */
                function ResponseDeliverTx(properties) {
                    this.events = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseDeliverTx code.
                 * @member {number} code
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @instance
                 */
                ResponseDeliverTx.prototype.code = 0;
    
                /**
                 * ResponseDeliverTx data.
                 * @member {Uint8Array} data
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @instance
                 */
                ResponseDeliverTx.prototype.data = $util.newBuffer([]);
    
                /**
                 * ResponseDeliverTx log.
                 * @member {string} log
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @instance
                 */
                ResponseDeliverTx.prototype.log = "";
    
                /**
                 * ResponseDeliverTx info.
                 * @member {string} info
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @instance
                 */
                ResponseDeliverTx.prototype.info = "";
    
                /**
                 * ResponseDeliverTx gas_wanted.
                 * @member {Long} gas_wanted
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @instance
                 */
                ResponseDeliverTx.prototype.gas_wanted = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * ResponseDeliverTx gas_used.
                 * @member {Long} gas_used
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @instance
                 */
                ResponseDeliverTx.prototype.gas_used = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * ResponseDeliverTx events.
                 * @member {Array.<tendermint.abci.IEvent>} events
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @instance
                 */
                ResponseDeliverTx.prototype.events = $util.emptyArray;
    
                /**
                 * ResponseDeliverTx codespace.
                 * @member {string} codespace
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @instance
                 */
                ResponseDeliverTx.prototype.codespace = "";
    
                /**
                 * Encodes the specified ResponseDeliverTx message. Does not implicitly {@link tendermint.abci.ResponseDeliverTx.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @static
                 * @param {tendermint.abci.IResponseDeliverTx} message ResponseDeliverTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseDeliverTx.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.code != null && Object.hasOwnProperty.call(message, "code"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.code);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                    if (message.log != null && Object.hasOwnProperty.call(message, "log"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.log);
                    if (message.info != null && Object.hasOwnProperty.call(message, "info"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.info);
                    if (message.gas_wanted != null && Object.hasOwnProperty.call(message, "gas_wanted"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.gas_wanted);
                    if (message.gas_used != null && Object.hasOwnProperty.call(message, "gas_used"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int64(message.gas_used);
                    if (message.events != null && message.events.length)
                        for (var i = 0; i < message.events.length; ++i)
                            $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.codespace != null && Object.hasOwnProperty.call(message, "codespace"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.codespace);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseDeliverTx message, length delimited. Does not implicitly {@link tendermint.abci.ResponseDeliverTx.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @static
                 * @param {tendermint.abci.IResponseDeliverTx} message ResponseDeliverTx message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseDeliverTx.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseDeliverTx message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseDeliverTx.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseDeliverTx();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.code = reader.uint32();
                            break;
                        case 2:
                            message.data = reader.bytes();
                            break;
                        case 3:
                            message.log = reader.string();
                            break;
                        case 4:
                            message.info = reader.string();
                            break;
                        case 5:
                            message.gas_wanted = reader.int64();
                            break;
                        case 6:
                            message.gas_used = reader.int64();
                            break;
                        case 7:
                            if (!(message.events && message.events.length))
                                message.events = [];
                            message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.codespace = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseDeliverTx message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseDeliverTx.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseDeliverTx message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseDeliverTx.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.code != null && message.hasOwnProperty("code"))
                        if (!$util.isInteger(message.code))
                            return "code: integer expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    if (message.log != null && message.hasOwnProperty("log"))
                        if (!$util.isString(message.log))
                            return "log: string expected";
                    if (message.info != null && message.hasOwnProperty("info"))
                        if (!$util.isString(message.info))
                            return "info: string expected";
                    if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                        if (!$util.isInteger(message.gas_wanted) && !(message.gas_wanted && $util.isInteger(message.gas_wanted.low) && $util.isInteger(message.gas_wanted.high)))
                            return "gas_wanted: integer|Long expected";
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (!$util.isInteger(message.gas_used) && !(message.gas_used && $util.isInteger(message.gas_used.low) && $util.isInteger(message.gas_used.high)))
                            return "gas_used: integer|Long expected";
                    if (message.events != null && message.hasOwnProperty("events")) {
                        if (!Array.isArray(message.events))
                            return "events: array expected";
                        for (var i = 0; i < message.events.length; ++i) {
                            var error = $root.tendermint.abci.Event.verify(message.events[i]);
                            if (error)
                                return "events." + error;
                        }
                    }
                    if (message.codespace != null && message.hasOwnProperty("codespace"))
                        if (!$util.isString(message.codespace))
                            return "codespace: string expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseDeliverTx message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseDeliverTx} ResponseDeliverTx
                 */
                ResponseDeliverTx.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseDeliverTx)
                        return object;
                    var message = new $root.tendermint.abci.ResponseDeliverTx();
                    if (object.code != null)
                        message.code = object.code >>> 0;
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    if (object.log != null)
                        message.log = String(object.log);
                    if (object.info != null)
                        message.info = String(object.info);
                    if (object.gas_wanted != null)
                        if ($util.Long)
                            (message.gas_wanted = $util.Long.fromValue(object.gas_wanted)).unsigned = false;
                        else if (typeof object.gas_wanted === "string")
                            message.gas_wanted = parseInt(object.gas_wanted, 10);
                        else if (typeof object.gas_wanted === "number")
                            message.gas_wanted = object.gas_wanted;
                        else if (typeof object.gas_wanted === "object")
                            message.gas_wanted = new $util.LongBits(object.gas_wanted.low >>> 0, object.gas_wanted.high >>> 0).toNumber();
                    if (object.gas_used != null)
                        if ($util.Long)
                            (message.gas_used = $util.Long.fromValue(object.gas_used)).unsigned = false;
                        else if (typeof object.gas_used === "string")
                            message.gas_used = parseInt(object.gas_used, 10);
                        else if (typeof object.gas_used === "number")
                            message.gas_used = object.gas_used;
                        else if (typeof object.gas_used === "object")
                            message.gas_used = new $util.LongBits(object.gas_used.low >>> 0, object.gas_used.high >>> 0).toNumber();
                    if (object.events) {
                        if (!Array.isArray(object.events))
                            throw TypeError(".tendermint.abci.ResponseDeliverTx.events: array expected");
                        message.events = [];
                        for (var i = 0; i < object.events.length; ++i) {
                            if (typeof object.events[i] !== "object")
                                throw TypeError(".tendermint.abci.ResponseDeliverTx.events: object expected");
                            message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                        }
                    }
                    if (object.codespace != null)
                        message.codespace = String(object.codespace);
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseDeliverTx message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @static
                 * @param {tendermint.abci.ResponseDeliverTx} message ResponseDeliverTx
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseDeliverTx.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.events = [];
                    if (options.defaults) {
                        object.code = 0;
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                        object.log = "";
                        object.info = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.gas_wanted = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas_wanted = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.gas_used = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.gas_used = options.longs === String ? "0" : 0;
                        object.codespace = "";
                    }
                    if (message.code != null && message.hasOwnProperty("code"))
                        object.code = message.code;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    if (message.log != null && message.hasOwnProperty("log"))
                        object.log = message.log;
                    if (message.info != null && message.hasOwnProperty("info"))
                        object.info = message.info;
                    if (message.gas_wanted != null && message.hasOwnProperty("gas_wanted"))
                        if (typeof message.gas_wanted === "number")
                            object.gas_wanted = options.longs === String ? String(message.gas_wanted) : message.gas_wanted;
                        else
                            object.gas_wanted = options.longs === String ? $util.Long.prototype.toString.call(message.gas_wanted) : options.longs === Number ? new $util.LongBits(message.gas_wanted.low >>> 0, message.gas_wanted.high >>> 0).toNumber() : message.gas_wanted;
                    if (message.gas_used != null && message.hasOwnProperty("gas_used"))
                        if (typeof message.gas_used === "number")
                            object.gas_used = options.longs === String ? String(message.gas_used) : message.gas_used;
                        else
                            object.gas_used = options.longs === String ? $util.Long.prototype.toString.call(message.gas_used) : options.longs === Number ? new $util.LongBits(message.gas_used.low >>> 0, message.gas_used.high >>> 0).toNumber() : message.gas_used;
                    if (message.events && message.events.length) {
                        object.events = [];
                        for (var j = 0; j < message.events.length; ++j)
                            object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                    }
                    if (message.codespace != null && message.hasOwnProperty("codespace"))
                        object.codespace = message.codespace;
                    return object;
                };
    
                /**
                 * Converts this ResponseDeliverTx to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseDeliverTx
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseDeliverTx.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseDeliverTx;
            })();
    
            abci.ResponseEndBlock = (function() {
    
                /**
                 * Properties of a ResponseEndBlock.
                 * @memberof tendermint.abci
                 * @interface IResponseEndBlock
                 * @property {Array.<tendermint.abci.IValidatorUpdate>|null} [validator_updates] ResponseEndBlock validator_updates
                 * @property {tendermint.abci.IConsensusParams|null} [consensus_param_updates] ResponseEndBlock consensus_param_updates
                 * @property {Array.<tendermint.abci.IEvent>|null} [events] ResponseEndBlock events
                 */
    
                /**
                 * Constructs a new ResponseEndBlock.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseEndBlock.
                 * @implements IResponseEndBlock
                 * @constructor
                 * @param {tendermint.abci.IResponseEndBlock=} [properties] Properties to set
                 */
                function ResponseEndBlock(properties) {
                    this.validator_updates = [];
                    this.events = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseEndBlock validator_updates.
                 * @member {Array.<tendermint.abci.IValidatorUpdate>} validator_updates
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @instance
                 */
                ResponseEndBlock.prototype.validator_updates = $util.emptyArray;
    
                /**
                 * ResponseEndBlock consensus_param_updates.
                 * @member {tendermint.abci.IConsensusParams|null|undefined} consensus_param_updates
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @instance
                 */
                ResponseEndBlock.prototype.consensus_param_updates = null;
    
                /**
                 * ResponseEndBlock events.
                 * @member {Array.<tendermint.abci.IEvent>} events
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @instance
                 */
                ResponseEndBlock.prototype.events = $util.emptyArray;
    
                /**
                 * Encodes the specified ResponseEndBlock message. Does not implicitly {@link tendermint.abci.ResponseEndBlock.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @static
                 * @param {tendermint.abci.IResponseEndBlock} message ResponseEndBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseEndBlock.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validator_updates != null && message.validator_updates.length)
                        for (var i = 0; i < message.validator_updates.length; ++i)
                            $root.tendermint.abci.ValidatorUpdate.encode(message.validator_updates[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.consensus_param_updates != null && Object.hasOwnProperty.call(message, "consensus_param_updates"))
                        $root.tendermint.abci.ConsensusParams.encode(message.consensus_param_updates, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.events != null && message.events.length)
                        for (var i = 0; i < message.events.length; ++i)
                            $root.tendermint.abci.Event.encode(message.events[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseEndBlock message, length delimited. Does not implicitly {@link tendermint.abci.ResponseEndBlock.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @static
                 * @param {tendermint.abci.IResponseEndBlock} message ResponseEndBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseEndBlock.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseEndBlock message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseEndBlock.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseEndBlock();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.validator_updates && message.validator_updates.length))
                                message.validator_updates = [];
                            message.validator_updates.push($root.tendermint.abci.ValidatorUpdate.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.consensus_param_updates = $root.tendermint.abci.ConsensusParams.decode(reader, reader.uint32());
                            break;
                        case 3:
                            if (!(message.events && message.events.length))
                                message.events = [];
                            message.events.push($root.tendermint.abci.Event.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseEndBlock message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseEndBlock.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseEndBlock message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseEndBlock.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validator_updates != null && message.hasOwnProperty("validator_updates")) {
                        if (!Array.isArray(message.validator_updates))
                            return "validator_updates: array expected";
                        for (var i = 0; i < message.validator_updates.length; ++i) {
                            var error = $root.tendermint.abci.ValidatorUpdate.verify(message.validator_updates[i]);
                            if (error)
                                return "validator_updates." + error;
                        }
                    }
                    if (message.consensus_param_updates != null && message.hasOwnProperty("consensus_param_updates")) {
                        var error = $root.tendermint.abci.ConsensusParams.verify(message.consensus_param_updates);
                        if (error)
                            return "consensus_param_updates." + error;
                    }
                    if (message.events != null && message.hasOwnProperty("events")) {
                        if (!Array.isArray(message.events))
                            return "events: array expected";
                        for (var i = 0; i < message.events.length; ++i) {
                            var error = $root.tendermint.abci.Event.verify(message.events[i]);
                            if (error)
                                return "events." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResponseEndBlock message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseEndBlock} ResponseEndBlock
                 */
                ResponseEndBlock.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseEndBlock)
                        return object;
                    var message = new $root.tendermint.abci.ResponseEndBlock();
                    if (object.validator_updates) {
                        if (!Array.isArray(object.validator_updates))
                            throw TypeError(".tendermint.abci.ResponseEndBlock.validator_updates: array expected");
                        message.validator_updates = [];
                        for (var i = 0; i < object.validator_updates.length; ++i) {
                            if (typeof object.validator_updates[i] !== "object")
                                throw TypeError(".tendermint.abci.ResponseEndBlock.validator_updates: object expected");
                            message.validator_updates[i] = $root.tendermint.abci.ValidatorUpdate.fromObject(object.validator_updates[i]);
                        }
                    }
                    if (object.consensus_param_updates != null) {
                        if (typeof object.consensus_param_updates !== "object")
                            throw TypeError(".tendermint.abci.ResponseEndBlock.consensus_param_updates: object expected");
                        message.consensus_param_updates = $root.tendermint.abci.ConsensusParams.fromObject(object.consensus_param_updates);
                    }
                    if (object.events) {
                        if (!Array.isArray(object.events))
                            throw TypeError(".tendermint.abci.ResponseEndBlock.events: array expected");
                        message.events = [];
                        for (var i = 0; i < object.events.length; ++i) {
                            if (typeof object.events[i] !== "object")
                                throw TypeError(".tendermint.abci.ResponseEndBlock.events: object expected");
                            message.events[i] = $root.tendermint.abci.Event.fromObject(object.events[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseEndBlock message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @static
                 * @param {tendermint.abci.ResponseEndBlock} message ResponseEndBlock
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseEndBlock.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.validator_updates = [];
                        object.events = [];
                    }
                    if (options.defaults)
                        object.consensus_param_updates = null;
                    if (message.validator_updates && message.validator_updates.length) {
                        object.validator_updates = [];
                        for (var j = 0; j < message.validator_updates.length; ++j)
                            object.validator_updates[j] = $root.tendermint.abci.ValidatorUpdate.toObject(message.validator_updates[j], options);
                    }
                    if (message.consensus_param_updates != null && message.hasOwnProperty("consensus_param_updates"))
                        object.consensus_param_updates = $root.tendermint.abci.ConsensusParams.toObject(message.consensus_param_updates, options);
                    if (message.events && message.events.length) {
                        object.events = [];
                        for (var j = 0; j < message.events.length; ++j)
                            object.events[j] = $root.tendermint.abci.Event.toObject(message.events[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ResponseEndBlock to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseEndBlock
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseEndBlock.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseEndBlock;
            })();
    
            abci.ResponseCommit = (function() {
    
                /**
                 * Properties of a ResponseCommit.
                 * @memberof tendermint.abci
                 * @interface IResponseCommit
                 * @property {Uint8Array|null} [data] ResponseCommit data
                 * @property {Long|null} [retain_height] ResponseCommit retain_height
                 */
    
                /**
                 * Constructs a new ResponseCommit.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseCommit.
                 * @implements IResponseCommit
                 * @constructor
                 * @param {tendermint.abci.IResponseCommit=} [properties] Properties to set
                 */
                function ResponseCommit(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseCommit data.
                 * @member {Uint8Array} data
                 * @memberof tendermint.abci.ResponseCommit
                 * @instance
                 */
                ResponseCommit.prototype.data = $util.newBuffer([]);
    
                /**
                 * ResponseCommit retain_height.
                 * @member {Long} retain_height
                 * @memberof tendermint.abci.ResponseCommit
                 * @instance
                 */
                ResponseCommit.prototype.retain_height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified ResponseCommit message. Does not implicitly {@link tendermint.abci.ResponseCommit.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseCommit
                 * @static
                 * @param {tendermint.abci.IResponseCommit} message ResponseCommit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseCommit.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                    if (message.retain_height != null && Object.hasOwnProperty.call(message, "retain_height"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.retain_height);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseCommit message, length delimited. Does not implicitly {@link tendermint.abci.ResponseCommit.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseCommit
                 * @static
                 * @param {tendermint.abci.IResponseCommit} message ResponseCommit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseCommit.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseCommit message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseCommit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseCommit} ResponseCommit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseCommit.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseCommit();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.data = reader.bytes();
                            break;
                        case 3:
                            message.retain_height = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseCommit message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseCommit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseCommit} ResponseCommit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseCommit.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseCommit message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseCommit
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseCommit.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    if (message.retain_height != null && message.hasOwnProperty("retain_height"))
                        if (!$util.isInteger(message.retain_height) && !(message.retain_height && $util.isInteger(message.retain_height.low) && $util.isInteger(message.retain_height.high)))
                            return "retain_height: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseCommit message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseCommit
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseCommit} ResponseCommit
                 */
                ResponseCommit.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseCommit)
                        return object;
                    var message = new $root.tendermint.abci.ResponseCommit();
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    if (object.retain_height != null)
                        if ($util.Long)
                            (message.retain_height = $util.Long.fromValue(object.retain_height)).unsigned = false;
                        else if (typeof object.retain_height === "string")
                            message.retain_height = parseInt(object.retain_height, 10);
                        else if (typeof object.retain_height === "number")
                            message.retain_height = object.retain_height;
                        else if (typeof object.retain_height === "object")
                            message.retain_height = new $util.LongBits(object.retain_height.low >>> 0, object.retain_height.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseCommit message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseCommit
                 * @static
                 * @param {tendermint.abci.ResponseCommit} message ResponseCommit
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseCommit.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.retain_height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.retain_height = options.longs === String ? "0" : 0;
                    }
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    if (message.retain_height != null && message.hasOwnProperty("retain_height"))
                        if (typeof message.retain_height === "number")
                            object.retain_height = options.longs === String ? String(message.retain_height) : message.retain_height;
                        else
                            object.retain_height = options.longs === String ? $util.Long.prototype.toString.call(message.retain_height) : options.longs === Number ? new $util.LongBits(message.retain_height.low >>> 0, message.retain_height.high >>> 0).toNumber() : message.retain_height;
                    return object;
                };
    
                /**
                 * Converts this ResponseCommit to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseCommit
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseCommit.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseCommit;
            })();
    
            abci.ResponseListSnapshots = (function() {
    
                /**
                 * Properties of a ResponseListSnapshots.
                 * @memberof tendermint.abci
                 * @interface IResponseListSnapshots
                 * @property {Array.<tendermint.abci.ISnapshot>|null} [snapshots] ResponseListSnapshots snapshots
                 */
    
                /**
                 * Constructs a new ResponseListSnapshots.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseListSnapshots.
                 * @implements IResponseListSnapshots
                 * @constructor
                 * @param {tendermint.abci.IResponseListSnapshots=} [properties] Properties to set
                 */
                function ResponseListSnapshots(properties) {
                    this.snapshots = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseListSnapshots snapshots.
                 * @member {Array.<tendermint.abci.ISnapshot>} snapshots
                 * @memberof tendermint.abci.ResponseListSnapshots
                 * @instance
                 */
                ResponseListSnapshots.prototype.snapshots = $util.emptyArray;
    
                /**
                 * Encodes the specified ResponseListSnapshots message. Does not implicitly {@link tendermint.abci.ResponseListSnapshots.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseListSnapshots
                 * @static
                 * @param {tendermint.abci.IResponseListSnapshots} message ResponseListSnapshots message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseListSnapshots.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.snapshots != null && message.snapshots.length)
                        for (var i = 0; i < message.snapshots.length; ++i)
                            $root.tendermint.abci.Snapshot.encode(message.snapshots[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseListSnapshots message, length delimited. Does not implicitly {@link tendermint.abci.ResponseListSnapshots.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseListSnapshots
                 * @static
                 * @param {tendermint.abci.IResponseListSnapshots} message ResponseListSnapshots message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseListSnapshots.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseListSnapshots message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseListSnapshots
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseListSnapshots.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseListSnapshots();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.snapshots && message.snapshots.length))
                                message.snapshots = [];
                            message.snapshots.push($root.tendermint.abci.Snapshot.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseListSnapshots message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseListSnapshots
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseListSnapshots.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseListSnapshots message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseListSnapshots
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseListSnapshots.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.snapshots != null && message.hasOwnProperty("snapshots")) {
                        if (!Array.isArray(message.snapshots))
                            return "snapshots: array expected";
                        for (var i = 0; i < message.snapshots.length; ++i) {
                            var error = $root.tendermint.abci.Snapshot.verify(message.snapshots[i]);
                            if (error)
                                return "snapshots." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ResponseListSnapshots message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseListSnapshots
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseListSnapshots} ResponseListSnapshots
                 */
                ResponseListSnapshots.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseListSnapshots)
                        return object;
                    var message = new $root.tendermint.abci.ResponseListSnapshots();
                    if (object.snapshots) {
                        if (!Array.isArray(object.snapshots))
                            throw TypeError(".tendermint.abci.ResponseListSnapshots.snapshots: array expected");
                        message.snapshots = [];
                        for (var i = 0; i < object.snapshots.length; ++i) {
                            if (typeof object.snapshots[i] !== "object")
                                throw TypeError(".tendermint.abci.ResponseListSnapshots.snapshots: object expected");
                            message.snapshots[i] = $root.tendermint.abci.Snapshot.fromObject(object.snapshots[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseListSnapshots message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseListSnapshots
                 * @static
                 * @param {tendermint.abci.ResponseListSnapshots} message ResponseListSnapshots
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseListSnapshots.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.snapshots = [];
                    if (message.snapshots && message.snapshots.length) {
                        object.snapshots = [];
                        for (var j = 0; j < message.snapshots.length; ++j)
                            object.snapshots[j] = $root.tendermint.abci.Snapshot.toObject(message.snapshots[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ResponseListSnapshots to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseListSnapshots
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseListSnapshots.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseListSnapshots;
            })();
    
            abci.ResponseOfferSnapshot = (function() {
    
                /**
                 * Properties of a ResponseOfferSnapshot.
                 * @memberof tendermint.abci
                 * @interface IResponseOfferSnapshot
                 * @property {tendermint.abci.ResponseOfferSnapshot.Result|null} [result] ResponseOfferSnapshot result
                 */
    
                /**
                 * Constructs a new ResponseOfferSnapshot.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseOfferSnapshot.
                 * @implements IResponseOfferSnapshot
                 * @constructor
                 * @param {tendermint.abci.IResponseOfferSnapshot=} [properties] Properties to set
                 */
                function ResponseOfferSnapshot(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseOfferSnapshot result.
                 * @member {tendermint.abci.ResponseOfferSnapshot.Result} result
                 * @memberof tendermint.abci.ResponseOfferSnapshot
                 * @instance
                 */
                ResponseOfferSnapshot.prototype.result = 0;
    
                /**
                 * Encodes the specified ResponseOfferSnapshot message. Does not implicitly {@link tendermint.abci.ResponseOfferSnapshot.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseOfferSnapshot
                 * @static
                 * @param {tendermint.abci.IResponseOfferSnapshot} message ResponseOfferSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseOfferSnapshot.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseOfferSnapshot message, length delimited. Does not implicitly {@link tendermint.abci.ResponseOfferSnapshot.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseOfferSnapshot
                 * @static
                 * @param {tendermint.abci.IResponseOfferSnapshot} message ResponseOfferSnapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseOfferSnapshot.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseOfferSnapshot message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseOfferSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseOfferSnapshot.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseOfferSnapshot();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.result = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseOfferSnapshot message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseOfferSnapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseOfferSnapshot.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseOfferSnapshot message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseOfferSnapshot
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseOfferSnapshot.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.result != null && message.hasOwnProperty("result"))
                        switch (message.result) {
                        default:
                            return "result: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    return null;
                };
    
                /**
                 * Creates a ResponseOfferSnapshot message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseOfferSnapshot
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseOfferSnapshot} ResponseOfferSnapshot
                 */
                ResponseOfferSnapshot.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseOfferSnapshot)
                        return object;
                    var message = new $root.tendermint.abci.ResponseOfferSnapshot();
                    switch (object.result) {
                    case "UNKNOWN":
                    case 0:
                        message.result = 0;
                        break;
                    case "ACCEPT":
                    case 1:
                        message.result = 1;
                        break;
                    case "ABORT":
                    case 2:
                        message.result = 2;
                        break;
                    case "REJECT":
                    case 3:
                        message.result = 3;
                        break;
                    case "REJECT_FORMAT":
                    case 4:
                        message.result = 4;
                        break;
                    case "REJECT_SENDER":
                    case 5:
                        message.result = 5;
                        break;
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseOfferSnapshot message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseOfferSnapshot
                 * @static
                 * @param {tendermint.abci.ResponseOfferSnapshot} message ResponseOfferSnapshot
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseOfferSnapshot.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        object.result = options.enums === String ? "UNKNOWN" : 0;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = options.enums === String ? $root.tendermint.abci.ResponseOfferSnapshot.Result[message.result] : message.result;
                    return object;
                };
    
                /**
                 * Converts this ResponseOfferSnapshot to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseOfferSnapshot
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseOfferSnapshot.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Result enum.
                 * @name tendermint.abci.ResponseOfferSnapshot.Result
                 * @enum {number}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} ACCEPT=1 ACCEPT value
                 * @property {number} ABORT=2 ABORT value
                 * @property {number} REJECT=3 REJECT value
                 * @property {number} REJECT_FORMAT=4 REJECT_FORMAT value
                 * @property {number} REJECT_SENDER=5 REJECT_SENDER value
                 */
                ResponseOfferSnapshot.Result = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN"] = 0;
                    values[valuesById[1] = "ACCEPT"] = 1;
                    values[valuesById[2] = "ABORT"] = 2;
                    values[valuesById[3] = "REJECT"] = 3;
                    values[valuesById[4] = "REJECT_FORMAT"] = 4;
                    values[valuesById[5] = "REJECT_SENDER"] = 5;
                    return values;
                })();
    
                return ResponseOfferSnapshot;
            })();
    
            abci.ResponseLoadSnapshotChunk = (function() {
    
                /**
                 * Properties of a ResponseLoadSnapshotChunk.
                 * @memberof tendermint.abci
                 * @interface IResponseLoadSnapshotChunk
                 * @property {Uint8Array|null} [chunk] ResponseLoadSnapshotChunk chunk
                 */
    
                /**
                 * Constructs a new ResponseLoadSnapshotChunk.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseLoadSnapshotChunk.
                 * @implements IResponseLoadSnapshotChunk
                 * @constructor
                 * @param {tendermint.abci.IResponseLoadSnapshotChunk=} [properties] Properties to set
                 */
                function ResponseLoadSnapshotChunk(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseLoadSnapshotChunk chunk.
                 * @member {Uint8Array} chunk
                 * @memberof tendermint.abci.ResponseLoadSnapshotChunk
                 * @instance
                 */
                ResponseLoadSnapshotChunk.prototype.chunk = $util.newBuffer([]);
    
                /**
                 * Encodes the specified ResponseLoadSnapshotChunk message. Does not implicitly {@link tendermint.abci.ResponseLoadSnapshotChunk.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseLoadSnapshotChunk
                 * @static
                 * @param {tendermint.abci.IResponseLoadSnapshotChunk} message ResponseLoadSnapshotChunk message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseLoadSnapshotChunk.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.chunk != null && Object.hasOwnProperty.call(message, "chunk"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.chunk);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseLoadSnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.ResponseLoadSnapshotChunk.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseLoadSnapshotChunk
                 * @static
                 * @param {tendermint.abci.IResponseLoadSnapshotChunk} message ResponseLoadSnapshotChunk message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseLoadSnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseLoadSnapshotChunk message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseLoadSnapshotChunk
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseLoadSnapshotChunk.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseLoadSnapshotChunk();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.chunk = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseLoadSnapshotChunk message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseLoadSnapshotChunk
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseLoadSnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseLoadSnapshotChunk message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseLoadSnapshotChunk
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseLoadSnapshotChunk.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.chunk != null && message.hasOwnProperty("chunk"))
                        if (!(message.chunk && typeof message.chunk.length === "number" || $util.isString(message.chunk)))
                            return "chunk: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a ResponseLoadSnapshotChunk message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseLoadSnapshotChunk
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseLoadSnapshotChunk} ResponseLoadSnapshotChunk
                 */
                ResponseLoadSnapshotChunk.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseLoadSnapshotChunk)
                        return object;
                    var message = new $root.tendermint.abci.ResponseLoadSnapshotChunk();
                    if (object.chunk != null)
                        if (typeof object.chunk === "string")
                            $util.base64.decode(object.chunk, message.chunk = $util.newBuffer($util.base64.length(object.chunk)), 0);
                        else if (object.chunk.length)
                            message.chunk = object.chunk;
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseLoadSnapshotChunk message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseLoadSnapshotChunk
                 * @static
                 * @param {tendermint.abci.ResponseLoadSnapshotChunk} message ResponseLoadSnapshotChunk
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseLoadSnapshotChunk.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if (options.bytes === String)
                            object.chunk = "";
                        else {
                            object.chunk = [];
                            if (options.bytes !== Array)
                                object.chunk = $util.newBuffer(object.chunk);
                        }
                    if (message.chunk != null && message.hasOwnProperty("chunk"))
                        object.chunk = options.bytes === String ? $util.base64.encode(message.chunk, 0, message.chunk.length) : options.bytes === Array ? Array.prototype.slice.call(message.chunk) : message.chunk;
                    return object;
                };
    
                /**
                 * Converts this ResponseLoadSnapshotChunk to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseLoadSnapshotChunk
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseLoadSnapshotChunk.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ResponseLoadSnapshotChunk;
            })();
    
            abci.ResponseApplySnapshotChunk = (function() {
    
                /**
                 * Properties of a ResponseApplySnapshotChunk.
                 * @memberof tendermint.abci
                 * @interface IResponseApplySnapshotChunk
                 * @property {tendermint.abci.ResponseApplySnapshotChunk.Result|null} [result] ResponseApplySnapshotChunk result
                 * @property {Array.<number>|null} [refetch_chunks] ResponseApplySnapshotChunk refetch_chunks
                 * @property {Array.<string>|null} [reject_senders] ResponseApplySnapshotChunk reject_senders
                 */
    
                /**
                 * Constructs a new ResponseApplySnapshotChunk.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ResponseApplySnapshotChunk.
                 * @implements IResponseApplySnapshotChunk
                 * @constructor
                 * @param {tendermint.abci.IResponseApplySnapshotChunk=} [properties] Properties to set
                 */
                function ResponseApplySnapshotChunk(properties) {
                    this.refetch_chunks = [];
                    this.reject_senders = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ResponseApplySnapshotChunk result.
                 * @member {tendermint.abci.ResponseApplySnapshotChunk.Result} result
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @instance
                 */
                ResponseApplySnapshotChunk.prototype.result = 0;
    
                /**
                 * ResponseApplySnapshotChunk refetch_chunks.
                 * @member {Array.<number>} refetch_chunks
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @instance
                 */
                ResponseApplySnapshotChunk.prototype.refetch_chunks = $util.emptyArray;
    
                /**
                 * ResponseApplySnapshotChunk reject_senders.
                 * @member {Array.<string>} reject_senders
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @instance
                 */
                ResponseApplySnapshotChunk.prototype.reject_senders = $util.emptyArray;
    
                /**
                 * Encodes the specified ResponseApplySnapshotChunk message. Does not implicitly {@link tendermint.abci.ResponseApplySnapshotChunk.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @static
                 * @param {tendermint.abci.IResponseApplySnapshotChunk} message ResponseApplySnapshotChunk message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseApplySnapshotChunk.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.result);
                    if (message.refetch_chunks != null && message.refetch_chunks.length) {
                        writer.uint32(/* id 2, wireType 2 =*/18).fork();
                        for (var i = 0; i < message.refetch_chunks.length; ++i)
                            writer.uint32(message.refetch_chunks[i]);
                        writer.ldelim();
                    }
                    if (message.reject_senders != null && message.reject_senders.length)
                        for (var i = 0; i < message.reject_senders.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.reject_senders[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ResponseApplySnapshotChunk message, length delimited. Does not implicitly {@link tendermint.abci.ResponseApplySnapshotChunk.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @static
                 * @param {tendermint.abci.IResponseApplySnapshotChunk} message ResponseApplySnapshotChunk message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ResponseApplySnapshotChunk.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ResponseApplySnapshotChunk message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseApplySnapshotChunk.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ResponseApplySnapshotChunk();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.result = reader.int32();
                            break;
                        case 2:
                            if (!(message.refetch_chunks && message.refetch_chunks.length))
                                message.refetch_chunks = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.refetch_chunks.push(reader.uint32());
                            } else
                                message.refetch_chunks.push(reader.uint32());
                            break;
                        case 3:
                            if (!(message.reject_senders && message.reject_senders.length))
                                message.reject_senders = [];
                            message.reject_senders.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ResponseApplySnapshotChunk message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ResponseApplySnapshotChunk.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ResponseApplySnapshotChunk message.
                 * @function verify
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ResponseApplySnapshotChunk.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.result != null && message.hasOwnProperty("result"))
                        switch (message.result) {
                        default:
                            return "result: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                            break;
                        }
                    if (message.refetch_chunks != null && message.hasOwnProperty("refetch_chunks")) {
                        if (!Array.isArray(message.refetch_chunks))
                            return "refetch_chunks: array expected";
                        for (var i = 0; i < message.refetch_chunks.length; ++i)
                            if (!$util.isInteger(message.refetch_chunks[i]))
                                return "refetch_chunks: integer[] expected";
                    }
                    if (message.reject_senders != null && message.hasOwnProperty("reject_senders")) {
                        if (!Array.isArray(message.reject_senders))
                            return "reject_senders: array expected";
                        for (var i = 0; i < message.reject_senders.length; ++i)
                            if (!$util.isString(message.reject_senders[i]))
                                return "reject_senders: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a ResponseApplySnapshotChunk message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ResponseApplySnapshotChunk} ResponseApplySnapshotChunk
                 */
                ResponseApplySnapshotChunk.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ResponseApplySnapshotChunk)
                        return object;
                    var message = new $root.tendermint.abci.ResponseApplySnapshotChunk();
                    switch (object.result) {
                    case "UNKNOWN":
                    case 0:
                        message.result = 0;
                        break;
                    case "ACCEPT":
                    case 1:
                        message.result = 1;
                        break;
                    case "ABORT":
                    case 2:
                        message.result = 2;
                        break;
                    case "RETRY":
                    case 3:
                        message.result = 3;
                        break;
                    case "RETRY_SNAPSHOT":
                    case 4:
                        message.result = 4;
                        break;
                    case "REJECT_SNAPSHOT":
                    case 5:
                        message.result = 5;
                        break;
                    }
                    if (object.refetch_chunks) {
                        if (!Array.isArray(object.refetch_chunks))
                            throw TypeError(".tendermint.abci.ResponseApplySnapshotChunk.refetch_chunks: array expected");
                        message.refetch_chunks = [];
                        for (var i = 0; i < object.refetch_chunks.length; ++i)
                            message.refetch_chunks[i] = object.refetch_chunks[i] >>> 0;
                    }
                    if (object.reject_senders) {
                        if (!Array.isArray(object.reject_senders))
                            throw TypeError(".tendermint.abci.ResponseApplySnapshotChunk.reject_senders: array expected");
                        message.reject_senders = [];
                        for (var i = 0; i < object.reject_senders.length; ++i)
                            message.reject_senders[i] = String(object.reject_senders[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ResponseApplySnapshotChunk message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @static
                 * @param {tendermint.abci.ResponseApplySnapshotChunk} message ResponseApplySnapshotChunk
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ResponseApplySnapshotChunk.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.refetch_chunks = [];
                        object.reject_senders = [];
                    }
                    if (options.defaults)
                        object.result = options.enums === String ? "UNKNOWN" : 0;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = options.enums === String ? $root.tendermint.abci.ResponseApplySnapshotChunk.Result[message.result] : message.result;
                    if (message.refetch_chunks && message.refetch_chunks.length) {
                        object.refetch_chunks = [];
                        for (var j = 0; j < message.refetch_chunks.length; ++j)
                            object.refetch_chunks[j] = message.refetch_chunks[j];
                    }
                    if (message.reject_senders && message.reject_senders.length) {
                        object.reject_senders = [];
                        for (var j = 0; j < message.reject_senders.length; ++j)
                            object.reject_senders[j] = message.reject_senders[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ResponseApplySnapshotChunk to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ResponseApplySnapshotChunk
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ResponseApplySnapshotChunk.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Result enum.
                 * @name tendermint.abci.ResponseApplySnapshotChunk.Result
                 * @enum {number}
                 * @property {number} UNKNOWN=0 UNKNOWN value
                 * @property {number} ACCEPT=1 ACCEPT value
                 * @property {number} ABORT=2 ABORT value
                 * @property {number} RETRY=3 RETRY value
                 * @property {number} RETRY_SNAPSHOT=4 RETRY_SNAPSHOT value
                 * @property {number} REJECT_SNAPSHOT=5 REJECT_SNAPSHOT value
                 */
                ResponseApplySnapshotChunk.Result = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "UNKNOWN"] = 0;
                    values[valuesById[1] = "ACCEPT"] = 1;
                    values[valuesById[2] = "ABORT"] = 2;
                    values[valuesById[3] = "RETRY"] = 3;
                    values[valuesById[4] = "RETRY_SNAPSHOT"] = 4;
                    values[valuesById[5] = "REJECT_SNAPSHOT"] = 5;
                    return values;
                })();
    
                return ResponseApplySnapshotChunk;
            })();
    
            abci.ConsensusParams = (function() {
    
                /**
                 * Properties of a ConsensusParams.
                 * @memberof tendermint.abci
                 * @interface IConsensusParams
                 * @property {tendermint.abci.IBlockParams|null} [block] ConsensusParams block
                 * @property {tendermint.types.IEvidenceParams|null} [evidence] ConsensusParams evidence
                 * @property {tendermint.types.IValidatorParams|null} [validator] ConsensusParams validator
                 * @property {tendermint.types.IVersionParams|null} [version] ConsensusParams version
                 */
    
                /**
                 * Constructs a new ConsensusParams.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ConsensusParams.
                 * @implements IConsensusParams
                 * @constructor
                 * @param {tendermint.abci.IConsensusParams=} [properties] Properties to set
                 */
                function ConsensusParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ConsensusParams block.
                 * @member {tendermint.abci.IBlockParams|null|undefined} block
                 * @memberof tendermint.abci.ConsensusParams
                 * @instance
                 */
                ConsensusParams.prototype.block = null;
    
                /**
                 * ConsensusParams evidence.
                 * @member {tendermint.types.IEvidenceParams|null|undefined} evidence
                 * @memberof tendermint.abci.ConsensusParams
                 * @instance
                 */
                ConsensusParams.prototype.evidence = null;
    
                /**
                 * ConsensusParams validator.
                 * @member {tendermint.types.IValidatorParams|null|undefined} validator
                 * @memberof tendermint.abci.ConsensusParams
                 * @instance
                 */
                ConsensusParams.prototype.validator = null;
    
                /**
                 * ConsensusParams version.
                 * @member {tendermint.types.IVersionParams|null|undefined} version
                 * @memberof tendermint.abci.ConsensusParams
                 * @instance
                 */
                ConsensusParams.prototype.version = null;
    
                /**
                 * Encodes the specified ConsensusParams message. Does not implicitly {@link tendermint.abci.ConsensusParams.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ConsensusParams
                 * @static
                 * @param {tendermint.abci.IConsensusParams} message ConsensusParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ConsensusParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                        $root.tendermint.abci.BlockParams.encode(message.block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.evidence != null && Object.hasOwnProperty.call(message, "evidence"))
                        $root.tendermint.types.EvidenceParams.encode(message.evidence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        $root.tendermint.types.ValidatorParams.encode(message.validator, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        $root.tendermint.types.VersionParams.encode(message.version, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ConsensusParams message, length delimited. Does not implicitly {@link tendermint.abci.ConsensusParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ConsensusParams
                 * @static
                 * @param {tendermint.abci.IConsensusParams} message ConsensusParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ConsensusParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ConsensusParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ConsensusParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ConsensusParams} ConsensusParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ConsensusParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ConsensusParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.block = $root.tendermint.abci.BlockParams.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.evidence = $root.tendermint.types.EvidenceParams.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.validator = $root.tendermint.types.ValidatorParams.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.version = $root.tendermint.types.VersionParams.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ConsensusParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ConsensusParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ConsensusParams} ConsensusParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ConsensusParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ConsensusParams message.
                 * @function verify
                 * @memberof tendermint.abci.ConsensusParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ConsensusParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.block != null && message.hasOwnProperty("block")) {
                        var error = $root.tendermint.abci.BlockParams.verify(message.block);
                        if (error)
                            return "block." + error;
                    }
                    if (message.evidence != null && message.hasOwnProperty("evidence")) {
                        var error = $root.tendermint.types.EvidenceParams.verify(message.evidence);
                        if (error)
                            return "evidence." + error;
                    }
                    if (message.validator != null && message.hasOwnProperty("validator")) {
                        var error = $root.tendermint.types.ValidatorParams.verify(message.validator);
                        if (error)
                            return "validator." + error;
                    }
                    if (message.version != null && message.hasOwnProperty("version")) {
                        var error = $root.tendermint.types.VersionParams.verify(message.version);
                        if (error)
                            return "version." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ConsensusParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ConsensusParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ConsensusParams} ConsensusParams
                 */
                ConsensusParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ConsensusParams)
                        return object;
                    var message = new $root.tendermint.abci.ConsensusParams();
                    if (object.block != null) {
                        if (typeof object.block !== "object")
                            throw TypeError(".tendermint.abci.ConsensusParams.block: object expected");
                        message.block = $root.tendermint.abci.BlockParams.fromObject(object.block);
                    }
                    if (object.evidence != null) {
                        if (typeof object.evidence !== "object")
                            throw TypeError(".tendermint.abci.ConsensusParams.evidence: object expected");
                        message.evidence = $root.tendermint.types.EvidenceParams.fromObject(object.evidence);
                    }
                    if (object.validator != null) {
                        if (typeof object.validator !== "object")
                            throw TypeError(".tendermint.abci.ConsensusParams.validator: object expected");
                        message.validator = $root.tendermint.types.ValidatorParams.fromObject(object.validator);
                    }
                    if (object.version != null) {
                        if (typeof object.version !== "object")
                            throw TypeError(".tendermint.abci.ConsensusParams.version: object expected");
                        message.version = $root.tendermint.types.VersionParams.fromObject(object.version);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ConsensusParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ConsensusParams
                 * @static
                 * @param {tendermint.abci.ConsensusParams} message ConsensusParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ConsensusParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.block = null;
                        object.evidence = null;
                        object.validator = null;
                        object.version = null;
                    }
                    if (message.block != null && message.hasOwnProperty("block"))
                        object.block = $root.tendermint.abci.BlockParams.toObject(message.block, options);
                    if (message.evidence != null && message.hasOwnProperty("evidence"))
                        object.evidence = $root.tendermint.types.EvidenceParams.toObject(message.evidence, options);
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = $root.tendermint.types.ValidatorParams.toObject(message.validator, options);
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = $root.tendermint.types.VersionParams.toObject(message.version, options);
                    return object;
                };
    
                /**
                 * Converts this ConsensusParams to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ConsensusParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ConsensusParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ConsensusParams;
            })();
    
            abci.BlockParams = (function() {
    
                /**
                 * Properties of a BlockParams.
                 * @memberof tendermint.abci
                 * @interface IBlockParams
                 * @property {Long|null} [max_bytes] BlockParams max_bytes
                 * @property {Long|null} [max_gas] BlockParams max_gas
                 */
    
                /**
                 * Constructs a new BlockParams.
                 * @memberof tendermint.abci
                 * @classdesc Represents a BlockParams.
                 * @implements IBlockParams
                 * @constructor
                 * @param {tendermint.abci.IBlockParams=} [properties] Properties to set
                 */
                function BlockParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BlockParams max_bytes.
                 * @member {Long} max_bytes
                 * @memberof tendermint.abci.BlockParams
                 * @instance
                 */
                BlockParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * BlockParams max_gas.
                 * @member {Long} max_gas
                 * @memberof tendermint.abci.BlockParams
                 * @instance
                 */
                BlockParams.prototype.max_gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified BlockParams message. Does not implicitly {@link tendermint.abci.BlockParams.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.BlockParams
                 * @static
                 * @param {tendermint.abci.IBlockParams} message BlockParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.max_bytes != null && Object.hasOwnProperty.call(message, "max_bytes"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.max_bytes);
                    if (message.max_gas != null && Object.hasOwnProperty.call(message, "max_gas"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.max_gas);
                    return writer;
                };
    
                /**
                 * Encodes the specified BlockParams message, length delimited. Does not implicitly {@link tendermint.abci.BlockParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.BlockParams
                 * @static
                 * @param {tendermint.abci.IBlockParams} message BlockParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BlockParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.BlockParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.BlockParams} BlockParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.BlockParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.max_bytes = reader.int64();
                            break;
                        case 2:
                            message.max_gas = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BlockParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.BlockParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.BlockParams} BlockParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BlockParams message.
                 * @function verify
                 * @memberof tendermint.abci.BlockParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BlockParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                        if (!$util.isInteger(message.max_bytes) && !(message.max_bytes && $util.isInteger(message.max_bytes.low) && $util.isInteger(message.max_bytes.high)))
                            return "max_bytes: integer|Long expected";
                    if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                        if (!$util.isInteger(message.max_gas) && !(message.max_gas && $util.isInteger(message.max_gas.low) && $util.isInteger(message.max_gas.high)))
                            return "max_gas: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a BlockParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.BlockParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.BlockParams} BlockParams
                 */
                BlockParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.BlockParams)
                        return object;
                    var message = new $root.tendermint.abci.BlockParams();
                    if (object.max_bytes != null)
                        if ($util.Long)
                            (message.max_bytes = $util.Long.fromValue(object.max_bytes)).unsigned = false;
                        else if (typeof object.max_bytes === "string")
                            message.max_bytes = parseInt(object.max_bytes, 10);
                        else if (typeof object.max_bytes === "number")
                            message.max_bytes = object.max_bytes;
                        else if (typeof object.max_bytes === "object")
                            message.max_bytes = new $util.LongBits(object.max_bytes.low >>> 0, object.max_bytes.high >>> 0).toNumber();
                    if (object.max_gas != null)
                        if ($util.Long)
                            (message.max_gas = $util.Long.fromValue(object.max_gas)).unsigned = false;
                        else if (typeof object.max_gas === "string")
                            message.max_gas = parseInt(object.max_gas, 10);
                        else if (typeof object.max_gas === "number")
                            message.max_gas = object.max_gas;
                        else if (typeof object.max_gas === "object")
                            message.max_gas = new $util.LongBits(object.max_gas.low >>> 0, object.max_gas.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a BlockParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.BlockParams
                 * @static
                 * @param {tendermint.abci.BlockParams} message BlockParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BlockParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_bytes = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.max_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_gas = options.longs === String ? "0" : 0;
                    }
                    if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                        if (typeof message.max_bytes === "number")
                            object.max_bytes = options.longs === String ? String(message.max_bytes) : message.max_bytes;
                        else
                            object.max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.max_bytes) : options.longs === Number ? new $util.LongBits(message.max_bytes.low >>> 0, message.max_bytes.high >>> 0).toNumber() : message.max_bytes;
                    if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                        if (typeof message.max_gas === "number")
                            object.max_gas = options.longs === String ? String(message.max_gas) : message.max_gas;
                        else
                            object.max_gas = options.longs === String ? $util.Long.prototype.toString.call(message.max_gas) : options.longs === Number ? new $util.LongBits(message.max_gas.low >>> 0, message.max_gas.high >>> 0).toNumber() : message.max_gas;
                    return object;
                };
    
                /**
                 * Converts this BlockParams to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.BlockParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BlockParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return BlockParams;
            })();
    
            abci.LastCommitInfo = (function() {
    
                /**
                 * Properties of a LastCommitInfo.
                 * @memberof tendermint.abci
                 * @interface ILastCommitInfo
                 * @property {number|null} [round] LastCommitInfo round
                 * @property {Array.<tendermint.abci.IVoteInfo>|null} [votes] LastCommitInfo votes
                 */
    
                /**
                 * Constructs a new LastCommitInfo.
                 * @memberof tendermint.abci
                 * @classdesc Represents a LastCommitInfo.
                 * @implements ILastCommitInfo
                 * @constructor
                 * @param {tendermint.abci.ILastCommitInfo=} [properties] Properties to set
                 */
                function LastCommitInfo(properties) {
                    this.votes = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * LastCommitInfo round.
                 * @member {number} round
                 * @memberof tendermint.abci.LastCommitInfo
                 * @instance
                 */
                LastCommitInfo.prototype.round = 0;
    
                /**
                 * LastCommitInfo votes.
                 * @member {Array.<tendermint.abci.IVoteInfo>} votes
                 * @memberof tendermint.abci.LastCommitInfo
                 * @instance
                 */
                LastCommitInfo.prototype.votes = $util.emptyArray;
    
                /**
                 * Encodes the specified LastCommitInfo message. Does not implicitly {@link tendermint.abci.LastCommitInfo.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.LastCommitInfo
                 * @static
                 * @param {tendermint.abci.ILastCommitInfo} message LastCommitInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LastCommitInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.round);
                    if (message.votes != null && message.votes.length)
                        for (var i = 0; i < message.votes.length; ++i)
                            $root.tendermint.abci.VoteInfo.encode(message.votes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified LastCommitInfo message, length delimited. Does not implicitly {@link tendermint.abci.LastCommitInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.LastCommitInfo
                 * @static
                 * @param {tendermint.abci.ILastCommitInfo} message LastCommitInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LastCommitInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a LastCommitInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.LastCommitInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LastCommitInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.LastCommitInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.round = reader.int32();
                            break;
                        case 2:
                            if (!(message.votes && message.votes.length))
                                message.votes = [];
                            message.votes.push($root.tendermint.abci.VoteInfo.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a LastCommitInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.LastCommitInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LastCommitInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a LastCommitInfo message.
                 * @function verify
                 * @memberof tendermint.abci.LastCommitInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LastCommitInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.round != null && message.hasOwnProperty("round"))
                        if (!$util.isInteger(message.round))
                            return "round: integer expected";
                    if (message.votes != null && message.hasOwnProperty("votes")) {
                        if (!Array.isArray(message.votes))
                            return "votes: array expected";
                        for (var i = 0; i < message.votes.length; ++i) {
                            var error = $root.tendermint.abci.VoteInfo.verify(message.votes[i]);
                            if (error)
                                return "votes." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a LastCommitInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.LastCommitInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.LastCommitInfo} LastCommitInfo
                 */
                LastCommitInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.LastCommitInfo)
                        return object;
                    var message = new $root.tendermint.abci.LastCommitInfo();
                    if (object.round != null)
                        message.round = object.round | 0;
                    if (object.votes) {
                        if (!Array.isArray(object.votes))
                            throw TypeError(".tendermint.abci.LastCommitInfo.votes: array expected");
                        message.votes = [];
                        for (var i = 0; i < object.votes.length; ++i) {
                            if (typeof object.votes[i] !== "object")
                                throw TypeError(".tendermint.abci.LastCommitInfo.votes: object expected");
                            message.votes[i] = $root.tendermint.abci.VoteInfo.fromObject(object.votes[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a LastCommitInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.LastCommitInfo
                 * @static
                 * @param {tendermint.abci.LastCommitInfo} message LastCommitInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LastCommitInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.votes = [];
                    if (options.defaults)
                        object.round = 0;
                    if (message.round != null && message.hasOwnProperty("round"))
                        object.round = message.round;
                    if (message.votes && message.votes.length) {
                        object.votes = [];
                        for (var j = 0; j < message.votes.length; ++j)
                            object.votes[j] = $root.tendermint.abci.VoteInfo.toObject(message.votes[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this LastCommitInfo to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.LastCommitInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LastCommitInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return LastCommitInfo;
            })();
    
            abci.Event = (function() {
    
                /**
                 * Properties of an Event.
                 * @memberof tendermint.abci
                 * @interface IEvent
                 * @property {string|null} [type] Event type
                 * @property {Array.<tendermint.abci.IEventAttribute>|null} [attributes] Event attributes
                 */
    
                /**
                 * Constructs a new Event.
                 * @memberof tendermint.abci
                 * @classdesc Represents an Event.
                 * @implements IEvent
                 * @constructor
                 * @param {tendermint.abci.IEvent=} [properties] Properties to set
                 */
                function Event(properties) {
                    this.attributes = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Event type.
                 * @member {string} type
                 * @memberof tendermint.abci.Event
                 * @instance
                 */
                Event.prototype.type = "";
    
                /**
                 * Event attributes.
                 * @member {Array.<tendermint.abci.IEventAttribute>} attributes
                 * @memberof tendermint.abci.Event
                 * @instance
                 */
                Event.prototype.attributes = $util.emptyArray;
    
                /**
                 * Encodes the specified Event message. Does not implicitly {@link tendermint.abci.Event.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.Event
                 * @static
                 * @param {tendermint.abci.IEvent} message Event message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Event.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type);
                    if (message.attributes != null && message.attributes.length)
                        for (var i = 0; i < message.attributes.length; ++i)
                            $root.tendermint.abci.EventAttribute.encode(message.attributes[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Event message, length delimited. Does not implicitly {@link tendermint.abci.Event.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.Event
                 * @static
                 * @param {tendermint.abci.IEvent} message Event message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Event.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Event message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.Event
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.Event} Event
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Event.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Event();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.string();
                            break;
                        case 2:
                            if (!(message.attributes && message.attributes.length))
                                message.attributes = [];
                            message.attributes.push($root.tendermint.abci.EventAttribute.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Event message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.Event
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.Event} Event
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Event.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Event message.
                 * @function verify
                 * @memberof tendermint.abci.Event
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Event.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        if (!$util.isString(message.type))
                            return "type: string expected";
                    if (message.attributes != null && message.hasOwnProperty("attributes")) {
                        if (!Array.isArray(message.attributes))
                            return "attributes: array expected";
                        for (var i = 0; i < message.attributes.length; ++i) {
                            var error = $root.tendermint.abci.EventAttribute.verify(message.attributes[i]);
                            if (error)
                                return "attributes." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an Event message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.Event
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.Event} Event
                 */
                Event.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.Event)
                        return object;
                    var message = new $root.tendermint.abci.Event();
                    if (object.type != null)
                        message.type = String(object.type);
                    if (object.attributes) {
                        if (!Array.isArray(object.attributes))
                            throw TypeError(".tendermint.abci.Event.attributes: array expected");
                        message.attributes = [];
                        for (var i = 0; i < object.attributes.length; ++i) {
                            if (typeof object.attributes[i] !== "object")
                                throw TypeError(".tendermint.abci.Event.attributes: object expected");
                            message.attributes[i] = $root.tendermint.abci.EventAttribute.fromObject(object.attributes[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an Event message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.Event
                 * @static
                 * @param {tendermint.abci.Event} message Event
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Event.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.attributes = [];
                    if (options.defaults)
                        object.type = "";
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = message.type;
                    if (message.attributes && message.attributes.length) {
                        object.attributes = [];
                        for (var j = 0; j < message.attributes.length; ++j)
                            object.attributes[j] = $root.tendermint.abci.EventAttribute.toObject(message.attributes[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Event to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.Event
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Event.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Event;
            })();
    
            abci.EventAttribute = (function() {
    
                /**
                 * Properties of an EventAttribute.
                 * @memberof tendermint.abci
                 * @interface IEventAttribute
                 * @property {Uint8Array|null} [key] EventAttribute key
                 * @property {Uint8Array|null} [value] EventAttribute value
                 * @property {boolean|null} [index] EventAttribute index
                 */
    
                /**
                 * Constructs a new EventAttribute.
                 * @memberof tendermint.abci
                 * @classdesc Represents an EventAttribute.
                 * @implements IEventAttribute
                 * @constructor
                 * @param {tendermint.abci.IEventAttribute=} [properties] Properties to set
                 */
                function EventAttribute(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EventAttribute key.
                 * @member {Uint8Array} key
                 * @memberof tendermint.abci.EventAttribute
                 * @instance
                 */
                EventAttribute.prototype.key = $util.newBuffer([]);
    
                /**
                 * EventAttribute value.
                 * @member {Uint8Array} value
                 * @memberof tendermint.abci.EventAttribute
                 * @instance
                 */
                EventAttribute.prototype.value = $util.newBuffer([]);
    
                /**
                 * EventAttribute index.
                 * @member {boolean} index
                 * @memberof tendermint.abci.EventAttribute
                 * @instance
                 */
                EventAttribute.prototype.index = false;
    
                /**
                 * Encodes the specified EventAttribute message. Does not implicitly {@link tendermint.abci.EventAttribute.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.EventAttribute
                 * @static
                 * @param {tendermint.abci.IEventAttribute} message EventAttribute message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventAttribute.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.key != null && Object.hasOwnProperty.call(message, "key"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.key);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.index);
                    return writer;
                };
    
                /**
                 * Encodes the specified EventAttribute message, length delimited. Does not implicitly {@link tendermint.abci.EventAttribute.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.EventAttribute
                 * @static
                 * @param {tendermint.abci.IEventAttribute} message EventAttribute message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EventAttribute.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EventAttribute message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.EventAttribute
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.EventAttribute} EventAttribute
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventAttribute.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.EventAttribute();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.key = reader.bytes();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        case 3:
                            message.index = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EventAttribute message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.EventAttribute
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.EventAttribute} EventAttribute
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EventAttribute.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EventAttribute message.
                 * @function verify
                 * @memberof tendermint.abci.EventAttribute
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EventAttribute.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.key != null && message.hasOwnProperty("key"))
                        if (!(message.key && typeof message.key.length === "number" || $util.isString(message.key)))
                            return "key: buffer expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (typeof message.index !== "boolean")
                            return "index: boolean expected";
                    return null;
                };
    
                /**
                 * Creates an EventAttribute message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.EventAttribute
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.EventAttribute} EventAttribute
                 */
                EventAttribute.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.EventAttribute)
                        return object;
                    var message = new $root.tendermint.abci.EventAttribute();
                    if (object.key != null)
                        if (typeof object.key === "string")
                            $util.base64.decode(object.key, message.key = $util.newBuffer($util.base64.length(object.key)), 0);
                        else if (object.key.length)
                            message.key = object.key;
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    if (object.index != null)
                        message.index = Boolean(object.index);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EventAttribute message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.EventAttribute
                 * @static
                 * @param {tendermint.abci.EventAttribute} message EventAttribute
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EventAttribute.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.key = "";
                        else {
                            object.key = [];
                            if (options.bytes !== Array)
                                object.key = $util.newBuffer(object.key);
                        }
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                        object.index = false;
                    }
                    if (message.key != null && message.hasOwnProperty("key"))
                        object.key = options.bytes === String ? $util.base64.encode(message.key, 0, message.key.length) : options.bytes === Array ? Array.prototype.slice.call(message.key) : message.key;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    if (message.index != null && message.hasOwnProperty("index"))
                        object.index = message.index;
                    return object;
                };
    
                /**
                 * Converts this EventAttribute to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.EventAttribute
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EventAttribute.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EventAttribute;
            })();
    
            abci.TxResult = (function() {
    
                /**
                 * Properties of a TxResult.
                 * @memberof tendermint.abci
                 * @interface ITxResult
                 * @property {Long|null} [height] TxResult height
                 * @property {number|null} [index] TxResult index
                 * @property {Uint8Array|null} [tx] TxResult tx
                 * @property {tendermint.abci.IResponseDeliverTx|null} [result] TxResult result
                 */
    
                /**
                 * Constructs a new TxResult.
                 * @memberof tendermint.abci
                 * @classdesc Represents a TxResult.
                 * @implements ITxResult
                 * @constructor
                 * @param {tendermint.abci.ITxResult=} [properties] Properties to set
                 */
                function TxResult(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TxResult height.
                 * @member {Long} height
                 * @memberof tendermint.abci.TxResult
                 * @instance
                 */
                TxResult.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * TxResult index.
                 * @member {number} index
                 * @memberof tendermint.abci.TxResult
                 * @instance
                 */
                TxResult.prototype.index = 0;
    
                /**
                 * TxResult tx.
                 * @member {Uint8Array} tx
                 * @memberof tendermint.abci.TxResult
                 * @instance
                 */
                TxResult.prototype.tx = $util.newBuffer([]);
    
                /**
                 * TxResult result.
                 * @member {tendermint.abci.IResponseDeliverTx|null|undefined} result
                 * @memberof tendermint.abci.TxResult
                 * @instance
                 */
                TxResult.prototype.result = null;
    
                /**
                 * Encodes the specified TxResult message. Does not implicitly {@link tendermint.abci.TxResult.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.TxResult
                 * @static
                 * @param {tendermint.abci.ITxResult} message TxResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxResult.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);
                    if (message.tx != null && Object.hasOwnProperty.call(message, "tx"))
                        writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.tx);
                    if (message.result != null && Object.hasOwnProperty.call(message, "result"))
                        $root.tendermint.abci.ResponseDeliverTx.encode(message.result, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified TxResult message, length delimited. Does not implicitly {@link tendermint.abci.TxResult.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.TxResult
                 * @static
                 * @param {tendermint.abci.ITxResult} message TxResult message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxResult.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TxResult message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.TxResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.TxResult} TxResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxResult.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.TxResult();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.height = reader.int64();
                            break;
                        case 2:
                            message.index = reader.uint32();
                            break;
                        case 3:
                            message.tx = reader.bytes();
                            break;
                        case 4:
                            message.result = $root.tendermint.abci.ResponseDeliverTx.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a TxResult message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.TxResult
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.TxResult} TxResult
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxResult.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TxResult message.
                 * @function verify
                 * @memberof tendermint.abci.TxResult
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TxResult.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (!$util.isInteger(message.index))
                            return "index: integer expected";
                    if (message.tx != null && message.hasOwnProperty("tx"))
                        if (!(message.tx && typeof message.tx.length === "number" || $util.isString(message.tx)))
                            return "tx: buffer expected";
                    if (message.result != null && message.hasOwnProperty("result")) {
                        var error = $root.tendermint.abci.ResponseDeliverTx.verify(message.result);
                        if (error)
                            return "result." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a TxResult message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.TxResult
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.TxResult} TxResult
                 */
                TxResult.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.TxResult)
                        return object;
                    var message = new $root.tendermint.abci.TxResult();
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.index != null)
                        message.index = object.index >>> 0;
                    if (object.tx != null)
                        if (typeof object.tx === "string")
                            $util.base64.decode(object.tx, message.tx = $util.newBuffer($util.base64.length(object.tx)), 0);
                        else if (object.tx.length)
                            message.tx = object.tx;
                    if (object.result != null) {
                        if (typeof object.result !== "object")
                            throw TypeError(".tendermint.abci.TxResult.result: object expected");
                        message.result = $root.tendermint.abci.ResponseDeliverTx.fromObject(object.result);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a TxResult message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.TxResult
                 * @static
                 * @param {tendermint.abci.TxResult} message TxResult
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TxResult.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.index = 0;
                        if (options.bytes === String)
                            object.tx = "";
                        else {
                            object.tx = [];
                            if (options.bytes !== Array)
                                object.tx = $util.newBuffer(object.tx);
                        }
                        object.result = null;
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.index != null && message.hasOwnProperty("index"))
                        object.index = message.index;
                    if (message.tx != null && message.hasOwnProperty("tx"))
                        object.tx = options.bytes === String ? $util.base64.encode(message.tx, 0, message.tx.length) : options.bytes === Array ? Array.prototype.slice.call(message.tx) : message.tx;
                    if (message.result != null && message.hasOwnProperty("result"))
                        object.result = $root.tendermint.abci.ResponseDeliverTx.toObject(message.result, options);
                    return object;
                };
    
                /**
                 * Converts this TxResult to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.TxResult
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TxResult.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TxResult;
            })();
    
            abci.Validator = (function() {
    
                /**
                 * Properties of a Validator.
                 * @memberof tendermint.abci
                 * @interface IValidator
                 * @property {Uint8Array|null} [address] Validator address
                 * @property {Long|null} [power] Validator power
                 */
    
                /**
                 * Constructs a new Validator.
                 * @memberof tendermint.abci
                 * @classdesc Represents a Validator.
                 * @implements IValidator
                 * @constructor
                 * @param {tendermint.abci.IValidator=} [properties] Properties to set
                 */
                function Validator(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Validator address.
                 * @member {Uint8Array} address
                 * @memberof tendermint.abci.Validator
                 * @instance
                 */
                Validator.prototype.address = $util.newBuffer([]);
    
                /**
                 * Validator power.
                 * @member {Long} power
                 * @memberof tendermint.abci.Validator
                 * @instance
                 */
                Validator.prototype.power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified Validator message. Does not implicitly {@link tendermint.abci.Validator.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.Validator
                 * @static
                 * @param {tendermint.abci.IValidator} message Validator message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Validator.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.address);
                    if (message.power != null && Object.hasOwnProperty.call(message, "power"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.power);
                    return writer;
                };
    
                /**
                 * Encodes the specified Validator message, length delimited. Does not implicitly {@link tendermint.abci.Validator.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.Validator
                 * @static
                 * @param {tendermint.abci.IValidator} message Validator message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Validator.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Validator message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.Validator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.Validator} Validator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Validator.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Validator();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.bytes();
                            break;
                        case 3:
                            message.power = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Validator message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.Validator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.Validator} Validator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Validator.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Validator message.
                 * @function verify
                 * @memberof tendermint.abci.Validator
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Validator.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!(message.address && typeof message.address.length === "number" || $util.isString(message.address)))
                            return "address: buffer expected";
                    if (message.power != null && message.hasOwnProperty("power"))
                        if (!$util.isInteger(message.power) && !(message.power && $util.isInteger(message.power.low) && $util.isInteger(message.power.high)))
                            return "power: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a Validator message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.Validator
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.Validator} Validator
                 */
                Validator.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.Validator)
                        return object;
                    var message = new $root.tendermint.abci.Validator();
                    if (object.address != null)
                        if (typeof object.address === "string")
                            $util.base64.decode(object.address, message.address = $util.newBuffer($util.base64.length(object.address)), 0);
                        else if (object.address.length)
                            message.address = object.address;
                    if (object.power != null)
                        if ($util.Long)
                            (message.power = $util.Long.fromValue(object.power)).unsigned = false;
                        else if (typeof object.power === "string")
                            message.power = parseInt(object.power, 10);
                        else if (typeof object.power === "number")
                            message.power = object.power;
                        else if (typeof object.power === "object")
                            message.power = new $util.LongBits(object.power.low >>> 0, object.power.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a Validator message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.Validator
                 * @static
                 * @param {tendermint.abci.Validator} message Validator
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Validator.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.address = "";
                        else {
                            object.address = [];
                            if (options.bytes !== Array)
                                object.address = $util.newBuffer(object.address);
                        }
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.power = options.longs === String ? "0" : 0;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = options.bytes === String ? $util.base64.encode(message.address, 0, message.address.length) : options.bytes === Array ? Array.prototype.slice.call(message.address) : message.address;
                    if (message.power != null && message.hasOwnProperty("power"))
                        if (typeof message.power === "number")
                            object.power = options.longs === String ? String(message.power) : message.power;
                        else
                            object.power = options.longs === String ? $util.Long.prototype.toString.call(message.power) : options.longs === Number ? new $util.LongBits(message.power.low >>> 0, message.power.high >>> 0).toNumber() : message.power;
                    return object;
                };
    
                /**
                 * Converts this Validator to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.Validator
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Validator.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Validator;
            })();
    
            abci.ValidatorUpdate = (function() {
    
                /**
                 * Properties of a ValidatorUpdate.
                 * @memberof tendermint.abci
                 * @interface IValidatorUpdate
                 * @property {tendermint.crypto.IPublicKey|null} [pub_key] ValidatorUpdate pub_key
                 * @property {Long|null} [power] ValidatorUpdate power
                 */
    
                /**
                 * Constructs a new ValidatorUpdate.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ValidatorUpdate.
                 * @implements IValidatorUpdate
                 * @constructor
                 * @param {tendermint.abci.IValidatorUpdate=} [properties] Properties to set
                 */
                function ValidatorUpdate(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ValidatorUpdate pub_key.
                 * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @instance
                 */
                ValidatorUpdate.prototype.pub_key = null;
    
                /**
                 * ValidatorUpdate power.
                 * @member {Long} power
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @instance
                 */
                ValidatorUpdate.prototype.power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified ValidatorUpdate message. Does not implicitly {@link tendermint.abci.ValidatorUpdate.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @static
                 * @param {tendermint.abci.IValidatorUpdate} message ValidatorUpdate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorUpdate.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                        $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.power != null && Object.hasOwnProperty.call(message, "power"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.power);
                    return writer;
                };
    
                /**
                 * Encodes the specified ValidatorUpdate message, length delimited. Does not implicitly {@link tendermint.abci.ValidatorUpdate.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @static
                 * @param {tendermint.abci.IValidatorUpdate} message ValidatorUpdate message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorUpdate.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ValidatorUpdate message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorUpdate.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.ValidatorUpdate();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.power = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ValidatorUpdate message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorUpdate.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ValidatorUpdate message.
                 * @function verify
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValidatorUpdate.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                        var error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                        if (error)
                            return "pub_key." + error;
                    }
                    if (message.power != null && message.hasOwnProperty("power"))
                        if (!$util.isInteger(message.power) && !(message.power && $util.isInteger(message.power.low) && $util.isInteger(message.power.high)))
                            return "power: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a ValidatorUpdate message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.ValidatorUpdate} ValidatorUpdate
                 */
                ValidatorUpdate.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.ValidatorUpdate)
                        return object;
                    var message = new $root.tendermint.abci.ValidatorUpdate();
                    if (object.pub_key != null) {
                        if (typeof object.pub_key !== "object")
                            throw TypeError(".tendermint.abci.ValidatorUpdate.pub_key: object expected");
                        message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                    }
                    if (object.power != null)
                        if ($util.Long)
                            (message.power = $util.Long.fromValue(object.power)).unsigned = false;
                        else if (typeof object.power === "string")
                            message.power = parseInt(object.power, 10);
                        else if (typeof object.power === "number")
                            message.power = object.power;
                        else if (typeof object.power === "object")
                            message.power = new $util.LongBits(object.power.low >>> 0, object.power.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a ValidatorUpdate message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @static
                 * @param {tendermint.abci.ValidatorUpdate} message ValidatorUpdate
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValidatorUpdate.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.pub_key = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.power = options.longs === String ? "0" : 0;
                    }
                    if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                        object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                    if (message.power != null && message.hasOwnProperty("power"))
                        if (typeof message.power === "number")
                            object.power = options.longs === String ? String(message.power) : message.power;
                        else
                            object.power = options.longs === String ? $util.Long.prototype.toString.call(message.power) : options.longs === Number ? new $util.LongBits(message.power.low >>> 0, message.power.high >>> 0).toNumber() : message.power;
                    return object;
                };
    
                /**
                 * Converts this ValidatorUpdate to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.ValidatorUpdate
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValidatorUpdate.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ValidatorUpdate;
            })();
    
            abci.VoteInfo = (function() {
    
                /**
                 * Properties of a VoteInfo.
                 * @memberof tendermint.abci
                 * @interface IVoteInfo
                 * @property {tendermint.abci.IValidator|null} [validator] VoteInfo validator
                 * @property {boolean|null} [signed_last_block] VoteInfo signed_last_block
                 */
    
                /**
                 * Constructs a new VoteInfo.
                 * @memberof tendermint.abci
                 * @classdesc Represents a VoteInfo.
                 * @implements IVoteInfo
                 * @constructor
                 * @param {tendermint.abci.IVoteInfo=} [properties] Properties to set
                 */
                function VoteInfo(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VoteInfo validator.
                 * @member {tendermint.abci.IValidator|null|undefined} validator
                 * @memberof tendermint.abci.VoteInfo
                 * @instance
                 */
                VoteInfo.prototype.validator = null;
    
                /**
                 * VoteInfo signed_last_block.
                 * @member {boolean} signed_last_block
                 * @memberof tendermint.abci.VoteInfo
                 * @instance
                 */
                VoteInfo.prototype.signed_last_block = false;
    
                /**
                 * Encodes the specified VoteInfo message. Does not implicitly {@link tendermint.abci.VoteInfo.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.VoteInfo
                 * @static
                 * @param {tendermint.abci.IVoteInfo} message VoteInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VoteInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        $root.tendermint.abci.Validator.encode(message.validator, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.signed_last_block != null && Object.hasOwnProperty.call(message, "signed_last_block"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.signed_last_block);
                    return writer;
                };
    
                /**
                 * Encodes the specified VoteInfo message, length delimited. Does not implicitly {@link tendermint.abci.VoteInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.VoteInfo
                 * @static
                 * @param {tendermint.abci.IVoteInfo} message VoteInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VoteInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VoteInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.VoteInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.VoteInfo} VoteInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VoteInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.VoteInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.validator = $root.tendermint.abci.Validator.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.signed_last_block = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VoteInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.VoteInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.VoteInfo} VoteInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VoteInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VoteInfo message.
                 * @function verify
                 * @memberof tendermint.abci.VoteInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VoteInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validator != null && message.hasOwnProperty("validator")) {
                        var error = $root.tendermint.abci.Validator.verify(message.validator);
                        if (error)
                            return "validator." + error;
                    }
                    if (message.signed_last_block != null && message.hasOwnProperty("signed_last_block"))
                        if (typeof message.signed_last_block !== "boolean")
                            return "signed_last_block: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a VoteInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.VoteInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.VoteInfo} VoteInfo
                 */
                VoteInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.VoteInfo)
                        return object;
                    var message = new $root.tendermint.abci.VoteInfo();
                    if (object.validator != null) {
                        if (typeof object.validator !== "object")
                            throw TypeError(".tendermint.abci.VoteInfo.validator: object expected");
                        message.validator = $root.tendermint.abci.Validator.fromObject(object.validator);
                    }
                    if (object.signed_last_block != null)
                        message.signed_last_block = Boolean(object.signed_last_block);
                    return message;
                };
    
                /**
                 * Creates a plain object from a VoteInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.VoteInfo
                 * @static
                 * @param {tendermint.abci.VoteInfo} message VoteInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VoteInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.validator = null;
                        object.signed_last_block = false;
                    }
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = $root.tendermint.abci.Validator.toObject(message.validator, options);
                    if (message.signed_last_block != null && message.hasOwnProperty("signed_last_block"))
                        object.signed_last_block = message.signed_last_block;
                    return object;
                };
    
                /**
                 * Converts this VoteInfo to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.VoteInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VoteInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return VoteInfo;
            })();
    
            /**
             * EvidenceType enum.
             * @name tendermint.abci.EvidenceType
             * @enum {number}
             * @property {number} UNKNOWN=0 UNKNOWN value
             * @property {number} DUPLICATE_VOTE=1 DUPLICATE_VOTE value
             * @property {number} LIGHT_CLIENT_ATTACK=2 LIGHT_CLIENT_ATTACK value
             */
            abci.EvidenceType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "UNKNOWN"] = 0;
                values[valuesById[1] = "DUPLICATE_VOTE"] = 1;
                values[valuesById[2] = "LIGHT_CLIENT_ATTACK"] = 2;
                return values;
            })();
    
            abci.Evidence = (function() {
    
                /**
                 * Properties of an Evidence.
                 * @memberof tendermint.abci
                 * @interface IEvidence
                 * @property {tendermint.abci.EvidenceType|null} [type] Evidence type
                 * @property {tendermint.abci.IValidator|null} [validator] Evidence validator
                 * @property {Long|null} [height] Evidence height
                 * @property {google.protobuf.ITimestamp|null} [time] Evidence time
                 * @property {Long|null} [total_voting_power] Evidence total_voting_power
                 */
    
                /**
                 * Constructs a new Evidence.
                 * @memberof tendermint.abci
                 * @classdesc Represents an Evidence.
                 * @implements IEvidence
                 * @constructor
                 * @param {tendermint.abci.IEvidence=} [properties] Properties to set
                 */
                function Evidence(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Evidence type.
                 * @member {tendermint.abci.EvidenceType} type
                 * @memberof tendermint.abci.Evidence
                 * @instance
                 */
                Evidence.prototype.type = 0;
    
                /**
                 * Evidence validator.
                 * @member {tendermint.abci.IValidator|null|undefined} validator
                 * @memberof tendermint.abci.Evidence
                 * @instance
                 */
                Evidence.prototype.validator = null;
    
                /**
                 * Evidence height.
                 * @member {Long} height
                 * @memberof tendermint.abci.Evidence
                 * @instance
                 */
                Evidence.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Evidence time.
                 * @member {google.protobuf.ITimestamp|null|undefined} time
                 * @memberof tendermint.abci.Evidence
                 * @instance
                 */
                Evidence.prototype.time = null;
    
                /**
                 * Evidence total_voting_power.
                 * @member {Long} total_voting_power
                 * @memberof tendermint.abci.Evidence
                 * @instance
                 */
                Evidence.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified Evidence message. Does not implicitly {@link tendermint.abci.Evidence.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.Evidence
                 * @static
                 * @param {tendermint.abci.IEvidence} message Evidence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Evidence.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        $root.tendermint.abci.Validator.encode(message.validator, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                    if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                        $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.total_voting_power != null && Object.hasOwnProperty.call(message, "total_voting_power"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.total_voting_power);
                    return writer;
                };
    
                /**
                 * Encodes the specified Evidence message, length delimited. Does not implicitly {@link tendermint.abci.Evidence.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.Evidence
                 * @static
                 * @param {tendermint.abci.IEvidence} message Evidence message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Evidence.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Evidence message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.Evidence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.Evidence} Evidence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Evidence.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Evidence();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.int32();
                            break;
                        case 2:
                            message.validator = $root.tendermint.abci.Validator.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.height = reader.int64();
                            break;
                        case 4:
                            message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.total_voting_power = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Evidence message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.Evidence
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.Evidence} Evidence
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Evidence.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Evidence message.
                 * @function verify
                 * @memberof tendermint.abci.Evidence
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Evidence.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.validator != null && message.hasOwnProperty("validator")) {
                        var error = $root.tendermint.abci.Validator.verify(message.validator);
                        if (error)
                            return "validator." + error;
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.time != null && message.hasOwnProperty("time")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.time);
                        if (error)
                            return "time." + error;
                    }
                    if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                        if (!$util.isInteger(message.total_voting_power) && !(message.total_voting_power && $util.isInteger(message.total_voting_power.low) && $util.isInteger(message.total_voting_power.high)))
                            return "total_voting_power: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates an Evidence message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.Evidence
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.Evidence} Evidence
                 */
                Evidence.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.Evidence)
                        return object;
                    var message = new $root.tendermint.abci.Evidence();
                    switch (object.type) {
                    case "UNKNOWN":
                    case 0:
                        message.type = 0;
                        break;
                    case "DUPLICATE_VOTE":
                    case 1:
                        message.type = 1;
                        break;
                    case "LIGHT_CLIENT_ATTACK":
                    case 2:
                        message.type = 2;
                        break;
                    }
                    if (object.validator != null) {
                        if (typeof object.validator !== "object")
                            throw TypeError(".tendermint.abci.Evidence.validator: object expected");
                        message.validator = $root.tendermint.abci.Validator.fromObject(object.validator);
                    }
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.time != null) {
                        if (typeof object.time !== "object")
                            throw TypeError(".tendermint.abci.Evidence.time: object expected");
                        message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                    }
                    if (object.total_voting_power != null)
                        if ($util.Long)
                            (message.total_voting_power = $util.Long.fromValue(object.total_voting_power)).unsigned = false;
                        else if (typeof object.total_voting_power === "string")
                            message.total_voting_power = parseInt(object.total_voting_power, 10);
                        else if (typeof object.total_voting_power === "number")
                            message.total_voting_power = object.total_voting_power;
                        else if (typeof object.total_voting_power === "object")
                            message.total_voting_power = new $util.LongBits(object.total_voting_power.low >>> 0, object.total_voting_power.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from an Evidence message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.Evidence
                 * @static
                 * @param {tendermint.abci.Evidence} message Evidence
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Evidence.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = options.enums === String ? "UNKNOWN" : 0;
                        object.validator = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.time = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.total_voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.total_voting_power = options.longs === String ? "0" : 0;
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.tendermint.abci.EvidenceType[message.type] : message.type;
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = $root.tendermint.abci.Validator.toObject(message.validator, options);
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.time != null && message.hasOwnProperty("time"))
                        object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                    if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                        if (typeof message.total_voting_power === "number")
                            object.total_voting_power = options.longs === String ? String(message.total_voting_power) : message.total_voting_power;
                        else
                            object.total_voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.total_voting_power) : options.longs === Number ? new $util.LongBits(message.total_voting_power.low >>> 0, message.total_voting_power.high >>> 0).toNumber() : message.total_voting_power;
                    return object;
                };
    
                /**
                 * Converts this Evidence to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.Evidence
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Evidence.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Evidence;
            })();
    
            abci.Snapshot = (function() {
    
                /**
                 * Properties of a Snapshot.
                 * @memberof tendermint.abci
                 * @interface ISnapshot
                 * @property {Long|null} [height] Snapshot height
                 * @property {number|null} [format] Snapshot format
                 * @property {number|null} [chunks] Snapshot chunks
                 * @property {Uint8Array|null} [hash] Snapshot hash
                 * @property {Uint8Array|null} [metadata] Snapshot metadata
                 */
    
                /**
                 * Constructs a new Snapshot.
                 * @memberof tendermint.abci
                 * @classdesc Represents a Snapshot.
                 * @implements ISnapshot
                 * @constructor
                 * @param {tendermint.abci.ISnapshot=} [properties] Properties to set
                 */
                function Snapshot(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Snapshot height.
                 * @member {Long} height
                 * @memberof tendermint.abci.Snapshot
                 * @instance
                 */
                Snapshot.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Snapshot format.
                 * @member {number} format
                 * @memberof tendermint.abci.Snapshot
                 * @instance
                 */
                Snapshot.prototype.format = 0;
    
                /**
                 * Snapshot chunks.
                 * @member {number} chunks
                 * @memberof tendermint.abci.Snapshot
                 * @instance
                 */
                Snapshot.prototype.chunks = 0;
    
                /**
                 * Snapshot hash.
                 * @member {Uint8Array} hash
                 * @memberof tendermint.abci.Snapshot
                 * @instance
                 */
                Snapshot.prototype.hash = $util.newBuffer([]);
    
                /**
                 * Snapshot metadata.
                 * @member {Uint8Array} metadata
                 * @memberof tendermint.abci.Snapshot
                 * @instance
                 */
                Snapshot.prototype.metadata = $util.newBuffer([]);
    
                /**
                 * Encodes the specified Snapshot message. Does not implicitly {@link tendermint.abci.Snapshot.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.abci.Snapshot
                 * @static
                 * @param {tendermint.abci.ISnapshot} message Snapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Snapshot.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                    if (message.format != null && Object.hasOwnProperty.call(message, "format"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.format);
                    if (message.chunks != null && Object.hasOwnProperty.call(message, "chunks"))
                        writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.chunks);
                    if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.hash);
                    if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                        writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.metadata);
                    return writer;
                };
    
                /**
                 * Encodes the specified Snapshot message, length delimited. Does not implicitly {@link tendermint.abci.Snapshot.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.abci.Snapshot
                 * @static
                 * @param {tendermint.abci.ISnapshot} message Snapshot message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Snapshot.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Snapshot message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.abci.Snapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.abci.Snapshot} Snapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Snapshot.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.abci.Snapshot();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.height = reader.uint64();
                            break;
                        case 2:
                            message.format = reader.uint32();
                            break;
                        case 3:
                            message.chunks = reader.uint32();
                            break;
                        case 4:
                            message.hash = reader.bytes();
                            break;
                        case 5:
                            message.metadata = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Snapshot message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.abci.Snapshot
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.abci.Snapshot} Snapshot
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Snapshot.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Snapshot message.
                 * @function verify
                 * @memberof tendermint.abci.Snapshot
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Snapshot.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.format != null && message.hasOwnProperty("format"))
                        if (!$util.isInteger(message.format))
                            return "format: integer expected";
                    if (message.chunks != null && message.hasOwnProperty("chunks"))
                        if (!$util.isInteger(message.chunks))
                            return "chunks: integer expected";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                            return "hash: buffer expected";
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        if (!(message.metadata && typeof message.metadata.length === "number" || $util.isString(message.metadata)))
                            return "metadata: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Snapshot message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.abci.Snapshot
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.abci.Snapshot} Snapshot
                 */
                Snapshot.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.abci.Snapshot)
                        return object;
                    var message = new $root.tendermint.abci.Snapshot();
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                    if (object.format != null)
                        message.format = object.format >>> 0;
                    if (object.chunks != null)
                        message.chunks = object.chunks >>> 0;
                    if (object.hash != null)
                        if (typeof object.hash === "string")
                            $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                        else if (object.hash.length)
                            message.hash = object.hash;
                    if (object.metadata != null)
                        if (typeof object.metadata === "string")
                            $util.base64.decode(object.metadata, message.metadata = $util.newBuffer($util.base64.length(object.metadata)), 0);
                        else if (object.metadata.length)
                            message.metadata = object.metadata;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Snapshot message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.abci.Snapshot
                 * @static
                 * @param {tendermint.abci.Snapshot} message Snapshot
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Snapshot.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.format = 0;
                        object.chunks = 0;
                        if (options.bytes === String)
                            object.hash = "";
                        else {
                            object.hash = [];
                            if (options.bytes !== Array)
                                object.hash = $util.newBuffer(object.hash);
                        }
                        if (options.bytes === String)
                            object.metadata = "";
                        else {
                            object.metadata = [];
                            if (options.bytes !== Array)
                                object.metadata = $util.newBuffer(object.metadata);
                        }
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                    if (message.format != null && message.hasOwnProperty("format"))
                        object.format = message.format;
                    if (message.chunks != null && message.hasOwnProperty("chunks"))
                        object.chunks = message.chunks;
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                    if (message.metadata != null && message.hasOwnProperty("metadata"))
                        object.metadata = options.bytes === String ? $util.base64.encode(message.metadata, 0, message.metadata.length) : options.bytes === Array ? Array.prototype.slice.call(message.metadata) : message.metadata;
                    return object;
                };
    
                /**
                 * Converts this Snapshot to JSON.
                 * @function toJSON
                 * @memberof tendermint.abci.Snapshot
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Snapshot.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Snapshot;
            })();
    
            abci.ABCIApplication = (function() {
    
                /**
                 * Constructs a new ABCIApplication service.
                 * @memberof tendermint.abci
                 * @classdesc Represents a ABCIApplication
                 * @extends $protobuf.rpc.Service
                 * @constructor
                 * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                 */
                function ABCIApplication(rpcImpl, requestDelimited, responseDelimited) {
                    $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                }
    
                (ABCIApplication.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = ABCIApplication;
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#echo}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef EchoCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseEcho} [response] ResponseEcho
                 */
    
                /**
                 * Calls Echo.
                 * @function echo
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestEcho} request RequestEcho message or plain object
                 * @param {tendermint.abci.ABCIApplication.EchoCallback} callback Node-style callback called with the error, if any, and ResponseEcho
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.echo = function echo(request, callback) {
                    return this.rpcCall(echo, $root.tendermint.abci.RequestEcho, $root.tendermint.abci.ResponseEcho, request, callback);
                }, "name", { value: "Echo" });
    
                /**
                 * Calls Echo.
                 * @function echo
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestEcho} request RequestEcho message or plain object
                 * @returns {Promise<tendermint.abci.ResponseEcho>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#flush}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef FlushCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseFlush} [response] ResponseFlush
                 */
    
                /**
                 * Calls Flush.
                 * @function flush
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestFlush} request RequestFlush message or plain object
                 * @param {tendermint.abci.ABCIApplication.FlushCallback} callback Node-style callback called with the error, if any, and ResponseFlush
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.flush = function flush(request, callback) {
                    return this.rpcCall(flush, $root.tendermint.abci.RequestFlush, $root.tendermint.abci.ResponseFlush, request, callback);
                }, "name", { value: "Flush" });
    
                /**
                 * Calls Flush.
                 * @function flush
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestFlush} request RequestFlush message or plain object
                 * @returns {Promise<tendermint.abci.ResponseFlush>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#info}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef InfoCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseInfo} [response] ResponseInfo
                 */
    
                /**
                 * Calls Info.
                 * @function info
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestInfo} request RequestInfo message or plain object
                 * @param {tendermint.abci.ABCIApplication.InfoCallback} callback Node-style callback called with the error, if any, and ResponseInfo
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.info = function info(request, callback) {
                    return this.rpcCall(info, $root.tendermint.abci.RequestInfo, $root.tendermint.abci.ResponseInfo, request, callback);
                }, "name", { value: "Info" });
    
                /**
                 * Calls Info.
                 * @function info
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestInfo} request RequestInfo message or plain object
                 * @returns {Promise<tendermint.abci.ResponseInfo>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#setOption}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef SetOptionCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseSetOption} [response] ResponseSetOption
                 */
    
                /**
                 * Calls SetOption.
                 * @function setOption
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestSetOption} request RequestSetOption message or plain object
                 * @param {tendermint.abci.ABCIApplication.SetOptionCallback} callback Node-style callback called with the error, if any, and ResponseSetOption
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.setOption = function setOption(request, callback) {
                    return this.rpcCall(setOption, $root.tendermint.abci.RequestSetOption, $root.tendermint.abci.ResponseSetOption, request, callback);
                }, "name", { value: "SetOption" });
    
                /**
                 * Calls SetOption.
                 * @function setOption
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestSetOption} request RequestSetOption message or plain object
                 * @returns {Promise<tendermint.abci.ResponseSetOption>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#deliverTx}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef DeliverTxCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseDeliverTx} [response] ResponseDeliverTx
                 */
    
                /**
                 * Calls DeliverTx.
                 * @function deliverTx
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestDeliverTx} request RequestDeliverTx message or plain object
                 * @param {tendermint.abci.ABCIApplication.DeliverTxCallback} callback Node-style callback called with the error, if any, and ResponseDeliverTx
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.deliverTx = function deliverTx(request, callback) {
                    return this.rpcCall(deliverTx, $root.tendermint.abci.RequestDeliverTx, $root.tendermint.abci.ResponseDeliverTx, request, callback);
                }, "name", { value: "DeliverTx" });
    
                /**
                 * Calls DeliverTx.
                 * @function deliverTx
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestDeliverTx} request RequestDeliverTx message or plain object
                 * @returns {Promise<tendermint.abci.ResponseDeliverTx>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#checkTx}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef CheckTxCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseCheckTx} [response] ResponseCheckTx
                 */
    
                /**
                 * Calls CheckTx.
                 * @function checkTx
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestCheckTx} request RequestCheckTx message or plain object
                 * @param {tendermint.abci.ABCIApplication.CheckTxCallback} callback Node-style callback called with the error, if any, and ResponseCheckTx
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.checkTx = function checkTx(request, callback) {
                    return this.rpcCall(checkTx, $root.tendermint.abci.RequestCheckTx, $root.tendermint.abci.ResponseCheckTx, request, callback);
                }, "name", { value: "CheckTx" });
    
                /**
                 * Calls CheckTx.
                 * @function checkTx
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestCheckTx} request RequestCheckTx message or plain object
                 * @returns {Promise<tendermint.abci.ResponseCheckTx>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#query}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef QueryCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseQuery} [response] ResponseQuery
                 */
    
                /**
                 * Calls Query.
                 * @function query
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestQuery} request RequestQuery message or plain object
                 * @param {tendermint.abci.ABCIApplication.QueryCallback} callback Node-style callback called with the error, if any, and ResponseQuery
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.query = function query(request, callback) {
                    return this.rpcCall(query, $root.tendermint.abci.RequestQuery, $root.tendermint.abci.ResponseQuery, request, callback);
                }, "name", { value: "Query" });
    
                /**
                 * Calls Query.
                 * @function query
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestQuery} request RequestQuery message or plain object
                 * @returns {Promise<tendermint.abci.ResponseQuery>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#commit}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef CommitCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseCommit} [response] ResponseCommit
                 */
    
                /**
                 * Calls Commit.
                 * @function commit
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestCommit} request RequestCommit message or plain object
                 * @param {tendermint.abci.ABCIApplication.CommitCallback} callback Node-style callback called with the error, if any, and ResponseCommit
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.commit = function commit(request, callback) {
                    return this.rpcCall(commit, $root.tendermint.abci.RequestCommit, $root.tendermint.abci.ResponseCommit, request, callback);
                }, "name", { value: "Commit" });
    
                /**
                 * Calls Commit.
                 * @function commit
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestCommit} request RequestCommit message or plain object
                 * @returns {Promise<tendermint.abci.ResponseCommit>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#initChain}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef InitChainCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseInitChain} [response] ResponseInitChain
                 */
    
                /**
                 * Calls InitChain.
                 * @function initChain
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestInitChain} request RequestInitChain message or plain object
                 * @param {tendermint.abci.ABCIApplication.InitChainCallback} callback Node-style callback called with the error, if any, and ResponseInitChain
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.initChain = function initChain(request, callback) {
                    return this.rpcCall(initChain, $root.tendermint.abci.RequestInitChain, $root.tendermint.abci.ResponseInitChain, request, callback);
                }, "name", { value: "InitChain" });
    
                /**
                 * Calls InitChain.
                 * @function initChain
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestInitChain} request RequestInitChain message or plain object
                 * @returns {Promise<tendermint.abci.ResponseInitChain>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#beginBlock}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef BeginBlockCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseBeginBlock} [response] ResponseBeginBlock
                 */
    
                /**
                 * Calls BeginBlock.
                 * @function beginBlock
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestBeginBlock} request RequestBeginBlock message or plain object
                 * @param {tendermint.abci.ABCIApplication.BeginBlockCallback} callback Node-style callback called with the error, if any, and ResponseBeginBlock
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.beginBlock = function beginBlock(request, callback) {
                    return this.rpcCall(beginBlock, $root.tendermint.abci.RequestBeginBlock, $root.tendermint.abci.ResponseBeginBlock, request, callback);
                }, "name", { value: "BeginBlock" });
    
                /**
                 * Calls BeginBlock.
                 * @function beginBlock
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestBeginBlock} request RequestBeginBlock message or plain object
                 * @returns {Promise<tendermint.abci.ResponseBeginBlock>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#endBlock}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef EndBlockCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseEndBlock} [response] ResponseEndBlock
                 */
    
                /**
                 * Calls EndBlock.
                 * @function endBlock
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestEndBlock} request RequestEndBlock message or plain object
                 * @param {tendermint.abci.ABCIApplication.EndBlockCallback} callback Node-style callback called with the error, if any, and ResponseEndBlock
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.endBlock = function endBlock(request, callback) {
                    return this.rpcCall(endBlock, $root.tendermint.abci.RequestEndBlock, $root.tendermint.abci.ResponseEndBlock, request, callback);
                }, "name", { value: "EndBlock" });
    
                /**
                 * Calls EndBlock.
                 * @function endBlock
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestEndBlock} request RequestEndBlock message or plain object
                 * @returns {Promise<tendermint.abci.ResponseEndBlock>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#listSnapshots}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef ListSnapshotsCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseListSnapshots} [response] ResponseListSnapshots
                 */
    
                /**
                 * Calls ListSnapshots.
                 * @function listSnapshots
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestListSnapshots} request RequestListSnapshots message or plain object
                 * @param {tendermint.abci.ABCIApplication.ListSnapshotsCallback} callback Node-style callback called with the error, if any, and ResponseListSnapshots
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.listSnapshots = function listSnapshots(request, callback) {
                    return this.rpcCall(listSnapshots, $root.tendermint.abci.RequestListSnapshots, $root.tendermint.abci.ResponseListSnapshots, request, callback);
                }, "name", { value: "ListSnapshots" });
    
                /**
                 * Calls ListSnapshots.
                 * @function listSnapshots
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestListSnapshots} request RequestListSnapshots message or plain object
                 * @returns {Promise<tendermint.abci.ResponseListSnapshots>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#offerSnapshot}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef OfferSnapshotCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseOfferSnapshot} [response] ResponseOfferSnapshot
                 */
    
                /**
                 * Calls OfferSnapshot.
                 * @function offerSnapshot
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestOfferSnapshot} request RequestOfferSnapshot message or plain object
                 * @param {tendermint.abci.ABCIApplication.OfferSnapshotCallback} callback Node-style callback called with the error, if any, and ResponseOfferSnapshot
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.offerSnapshot = function offerSnapshot(request, callback) {
                    return this.rpcCall(offerSnapshot, $root.tendermint.abci.RequestOfferSnapshot, $root.tendermint.abci.ResponseOfferSnapshot, request, callback);
                }, "name", { value: "OfferSnapshot" });
    
                /**
                 * Calls OfferSnapshot.
                 * @function offerSnapshot
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestOfferSnapshot} request RequestOfferSnapshot message or plain object
                 * @returns {Promise<tendermint.abci.ResponseOfferSnapshot>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#loadSnapshotChunk}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef LoadSnapshotChunkCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseLoadSnapshotChunk} [response] ResponseLoadSnapshotChunk
                 */
    
                /**
                 * Calls LoadSnapshotChunk.
                 * @function loadSnapshotChunk
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestLoadSnapshotChunk} request RequestLoadSnapshotChunk message or plain object
                 * @param {tendermint.abci.ABCIApplication.LoadSnapshotChunkCallback} callback Node-style callback called with the error, if any, and ResponseLoadSnapshotChunk
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.loadSnapshotChunk = function loadSnapshotChunk(request, callback) {
                    return this.rpcCall(loadSnapshotChunk, $root.tendermint.abci.RequestLoadSnapshotChunk, $root.tendermint.abci.ResponseLoadSnapshotChunk, request, callback);
                }, "name", { value: "LoadSnapshotChunk" });
    
                /**
                 * Calls LoadSnapshotChunk.
                 * @function loadSnapshotChunk
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestLoadSnapshotChunk} request RequestLoadSnapshotChunk message or plain object
                 * @returns {Promise<tendermint.abci.ResponseLoadSnapshotChunk>} Promise
                 * @variation 2
                 */
    
                /**
                 * Callback as used by {@link tendermint.abci.ABCIApplication#applySnapshotChunk}.
                 * @memberof tendermint.abci.ABCIApplication
                 * @typedef ApplySnapshotChunkCallback
                 * @type {function}
                 * @param {Error|null} error Error, if any
                 * @param {tendermint.abci.ResponseApplySnapshotChunk} [response] ResponseApplySnapshotChunk
                 */
    
                /**
                 * Calls ApplySnapshotChunk.
                 * @function applySnapshotChunk
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestApplySnapshotChunk} request RequestApplySnapshotChunk message or plain object
                 * @param {tendermint.abci.ABCIApplication.ApplySnapshotChunkCallback} callback Node-style callback called with the error, if any, and ResponseApplySnapshotChunk
                 * @returns {undefined}
                 * @variation 1
                 */
                Object.defineProperty(ABCIApplication.prototype.applySnapshotChunk = function applySnapshotChunk(request, callback) {
                    return this.rpcCall(applySnapshotChunk, $root.tendermint.abci.RequestApplySnapshotChunk, $root.tendermint.abci.ResponseApplySnapshotChunk, request, callback);
                }, "name", { value: "ApplySnapshotChunk" });
    
                /**
                 * Calls ApplySnapshotChunk.
                 * @function applySnapshotChunk
                 * @memberof tendermint.abci.ABCIApplication
                 * @instance
                 * @param {tendermint.abci.IRequestApplySnapshotChunk} request RequestApplySnapshotChunk message or plain object
                 * @returns {Promise<tendermint.abci.ResponseApplySnapshotChunk>} Promise
                 * @variation 2
                 */
    
                return ABCIApplication;
            })();
    
            return abci;
        })();
    
        tendermint.types = (function() {
    
            /**
             * Namespace types.
             * @memberof tendermint
             * @namespace
             */
            var types = {};
    
            /**
             * BlockIDFlag enum.
             * @name tendermint.types.BlockIDFlag
             * @enum {number}
             * @property {number} BLOCK_ID_FLAG_UNKNOWN=0 BLOCK_ID_FLAG_UNKNOWN value
             * @property {number} BLOCK_ID_FLAG_ABSENT=1 BLOCK_ID_FLAG_ABSENT value
             * @property {number} BLOCK_ID_FLAG_COMMIT=2 BLOCK_ID_FLAG_COMMIT value
             * @property {number} BLOCK_ID_FLAG_NIL=3 BLOCK_ID_FLAG_NIL value
             */
            types.BlockIDFlag = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "BLOCK_ID_FLAG_UNKNOWN"] = 0;
                values[valuesById[1] = "BLOCK_ID_FLAG_ABSENT"] = 1;
                values[valuesById[2] = "BLOCK_ID_FLAG_COMMIT"] = 2;
                values[valuesById[3] = "BLOCK_ID_FLAG_NIL"] = 3;
                return values;
            })();
    
            /**
             * SignedMsgType enum.
             * @name tendermint.types.SignedMsgType
             * @enum {number}
             * @property {number} SIGNED_MSG_TYPE_UNKNOWN=0 SIGNED_MSG_TYPE_UNKNOWN value
             * @property {number} SIGNED_MSG_TYPE_PREVOTE=1 SIGNED_MSG_TYPE_PREVOTE value
             * @property {number} SIGNED_MSG_TYPE_PRECOMMIT=2 SIGNED_MSG_TYPE_PRECOMMIT value
             * @property {number} SIGNED_MSG_TYPE_PROPOSAL=32 SIGNED_MSG_TYPE_PROPOSAL value
             */
            types.SignedMsgType = (function() {
                var valuesById = {}, values = Object.create(valuesById);
                values[valuesById[0] = "SIGNED_MSG_TYPE_UNKNOWN"] = 0;
                values[valuesById[1] = "SIGNED_MSG_TYPE_PREVOTE"] = 1;
                values[valuesById[2] = "SIGNED_MSG_TYPE_PRECOMMIT"] = 2;
                values[valuesById[32] = "SIGNED_MSG_TYPE_PROPOSAL"] = 32;
                return values;
            })();
    
            types.PartSetHeader = (function() {
    
                /**
                 * Properties of a PartSetHeader.
                 * @memberof tendermint.types
                 * @interface IPartSetHeader
                 * @property {number|null} [total] PartSetHeader total
                 * @property {Uint8Array|null} [hash] PartSetHeader hash
                 */
    
                /**
                 * Constructs a new PartSetHeader.
                 * @memberof tendermint.types
                 * @classdesc Represents a PartSetHeader.
                 * @implements IPartSetHeader
                 * @constructor
                 * @param {tendermint.types.IPartSetHeader=} [properties] Properties to set
                 */
                function PartSetHeader(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * PartSetHeader total.
                 * @member {number} total
                 * @memberof tendermint.types.PartSetHeader
                 * @instance
                 */
                PartSetHeader.prototype.total = 0;
    
                /**
                 * PartSetHeader hash.
                 * @member {Uint8Array} hash
                 * @memberof tendermint.types.PartSetHeader
                 * @instance
                 */
                PartSetHeader.prototype.hash = $util.newBuffer([]);
    
                /**
                 * Encodes the specified PartSetHeader message. Does not implicitly {@link tendermint.types.PartSetHeader.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.PartSetHeader
                 * @static
                 * @param {tendermint.types.IPartSetHeader} message PartSetHeader message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PartSetHeader.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.total != null && Object.hasOwnProperty.call(message, "total"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.total);
                    if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.hash);
                    return writer;
                };
    
                /**
                 * Encodes the specified PartSetHeader message, length delimited. Does not implicitly {@link tendermint.types.PartSetHeader.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.PartSetHeader
                 * @static
                 * @param {tendermint.types.IPartSetHeader} message PartSetHeader message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                PartSetHeader.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a PartSetHeader message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.PartSetHeader
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.PartSetHeader} PartSetHeader
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PartSetHeader.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.PartSetHeader();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.total = reader.uint32();
                            break;
                        case 2:
                            message.hash = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a PartSetHeader message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.PartSetHeader
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.PartSetHeader} PartSetHeader
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                PartSetHeader.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a PartSetHeader message.
                 * @function verify
                 * @memberof tendermint.types.PartSetHeader
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                PartSetHeader.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.total != null && message.hasOwnProperty("total"))
                        if (!$util.isInteger(message.total))
                            return "total: integer expected";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                            return "hash: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a PartSetHeader message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.PartSetHeader
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.PartSetHeader} PartSetHeader
                 */
                PartSetHeader.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.PartSetHeader)
                        return object;
                    var message = new $root.tendermint.types.PartSetHeader();
                    if (object.total != null)
                        message.total = object.total >>> 0;
                    if (object.hash != null)
                        if (typeof object.hash === "string")
                            $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                        else if (object.hash.length)
                            message.hash = object.hash;
                    return message;
                };
    
                /**
                 * Creates a plain object from a PartSetHeader message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.PartSetHeader
                 * @static
                 * @param {tendermint.types.PartSetHeader} message PartSetHeader
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                PartSetHeader.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.total = 0;
                        if (options.bytes === String)
                            object.hash = "";
                        else {
                            object.hash = [];
                            if (options.bytes !== Array)
                                object.hash = $util.newBuffer(object.hash);
                        }
                    }
                    if (message.total != null && message.hasOwnProperty("total"))
                        object.total = message.total;
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                    return object;
                };
    
                /**
                 * Converts this PartSetHeader to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.PartSetHeader
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                PartSetHeader.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return PartSetHeader;
            })();
    
            types.Part = (function() {
    
                /**
                 * Properties of a Part.
                 * @memberof tendermint.types
                 * @interface IPart
                 * @property {number|null} [index] Part index
                 * @property {Uint8Array|null} [bytes] Part bytes
                 * @property {tendermint.crypto.IProof|null} [proof] Part proof
                 */
    
                /**
                 * Constructs a new Part.
                 * @memberof tendermint.types
                 * @classdesc Represents a Part.
                 * @implements IPart
                 * @constructor
                 * @param {tendermint.types.IPart=} [properties] Properties to set
                 */
                function Part(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Part index.
                 * @member {number} index
                 * @memberof tendermint.types.Part
                 * @instance
                 */
                Part.prototype.index = 0;
    
                /**
                 * Part bytes.
                 * @member {Uint8Array} bytes
                 * @memberof tendermint.types.Part
                 * @instance
                 */
                Part.prototype.bytes = $util.newBuffer([]);
    
                /**
                 * Part proof.
                 * @member {tendermint.crypto.IProof|null|undefined} proof
                 * @memberof tendermint.types.Part
                 * @instance
                 */
                Part.prototype.proof = null;
    
                /**
                 * Encodes the specified Part message. Does not implicitly {@link tendermint.types.Part.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.Part
                 * @static
                 * @param {tendermint.types.IPart} message Part message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Part.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.index != null && Object.hasOwnProperty.call(message, "index"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);
                    if (message.bytes != null && Object.hasOwnProperty.call(message, "bytes"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.bytes);
                    if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                        $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Part message, length delimited. Does not implicitly {@link tendermint.types.Part.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.Part
                 * @static
                 * @param {tendermint.types.IPart} message Part message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Part.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Part message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.Part
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.Part} Part
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Part.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Part();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.index = reader.uint32();
                            break;
                        case 2:
                            message.bytes = reader.bytes();
                            break;
                        case 3:
                            message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Part message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.Part
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.Part} Part
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Part.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Part message.
                 * @function verify
                 * @memberof tendermint.types.Part
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Part.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.index != null && message.hasOwnProperty("index"))
                        if (!$util.isInteger(message.index))
                            return "index: integer expected";
                    if (message.bytes != null && message.hasOwnProperty("bytes"))
                        if (!(message.bytes && typeof message.bytes.length === "number" || $util.isString(message.bytes)))
                            return "bytes: buffer expected";
                    if (message.proof != null && message.hasOwnProperty("proof")) {
                        var error = $root.tendermint.crypto.Proof.verify(message.proof);
                        if (error)
                            return "proof." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a Part message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.Part
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.Part} Part
                 */
                Part.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.Part)
                        return object;
                    var message = new $root.tendermint.types.Part();
                    if (object.index != null)
                        message.index = object.index >>> 0;
                    if (object.bytes != null)
                        if (typeof object.bytes === "string")
                            $util.base64.decode(object.bytes, message.bytes = $util.newBuffer($util.base64.length(object.bytes)), 0);
                        else if (object.bytes.length)
                            message.bytes = object.bytes;
                    if (object.proof != null) {
                        if (typeof object.proof !== "object")
                            throw TypeError(".tendermint.types.Part.proof: object expected");
                        message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Part message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.Part
                 * @static
                 * @param {tendermint.types.Part} message Part
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Part.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.index = 0;
                        if (options.bytes === String)
                            object.bytes = "";
                        else {
                            object.bytes = [];
                            if (options.bytes !== Array)
                                object.bytes = $util.newBuffer(object.bytes);
                        }
                        object.proof = null;
                    }
                    if (message.index != null && message.hasOwnProperty("index"))
                        object.index = message.index;
                    if (message.bytes != null && message.hasOwnProperty("bytes"))
                        object.bytes = options.bytes === String ? $util.base64.encode(message.bytes, 0, message.bytes.length) : options.bytes === Array ? Array.prototype.slice.call(message.bytes) : message.bytes;
                    if (message.proof != null && message.hasOwnProperty("proof"))
                        object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                    return object;
                };
    
                /**
                 * Converts this Part to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.Part
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Part.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Part;
            })();
    
            types.BlockID = (function() {
    
                /**
                 * Properties of a BlockID.
                 * @memberof tendermint.types
                 * @interface IBlockID
                 * @property {Uint8Array|null} [hash] BlockID hash
                 * @property {tendermint.types.IPartSetHeader|null} [part_set_header] BlockID part_set_header
                 */
    
                /**
                 * Constructs a new BlockID.
                 * @memberof tendermint.types
                 * @classdesc Represents a BlockID.
                 * @implements IBlockID
                 * @constructor
                 * @param {tendermint.types.IBlockID=} [properties] Properties to set
                 */
                function BlockID(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BlockID hash.
                 * @member {Uint8Array} hash
                 * @memberof tendermint.types.BlockID
                 * @instance
                 */
                BlockID.prototype.hash = $util.newBuffer([]);
    
                /**
                 * BlockID part_set_header.
                 * @member {tendermint.types.IPartSetHeader|null|undefined} part_set_header
                 * @memberof tendermint.types.BlockID
                 * @instance
                 */
                BlockID.prototype.part_set_header = null;
    
                /**
                 * Encodes the specified BlockID message. Does not implicitly {@link tendermint.types.BlockID.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.BlockID
                 * @static
                 * @param {tendermint.types.IBlockID} message BlockID message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockID.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                    if (message.part_set_header != null && Object.hasOwnProperty.call(message, "part_set_header"))
                        $root.tendermint.types.PartSetHeader.encode(message.part_set_header, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified BlockID message, length delimited. Does not implicitly {@link tendermint.types.BlockID.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.BlockID
                 * @static
                 * @param {tendermint.types.IBlockID} message BlockID message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockID.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BlockID message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.BlockID
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.BlockID} BlockID
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockID.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockID();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.hash = reader.bytes();
                            break;
                        case 2:
                            message.part_set_header = $root.tendermint.types.PartSetHeader.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BlockID message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.BlockID
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.BlockID} BlockID
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockID.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BlockID message.
                 * @function verify
                 * @memberof tendermint.types.BlockID
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BlockID.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                            return "hash: buffer expected";
                    if (message.part_set_header != null && message.hasOwnProperty("part_set_header")) {
                        var error = $root.tendermint.types.PartSetHeader.verify(message.part_set_header);
                        if (error)
                            return "part_set_header." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a BlockID message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.BlockID
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.BlockID} BlockID
                 */
                BlockID.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.BlockID)
                        return object;
                    var message = new $root.tendermint.types.BlockID();
                    if (object.hash != null)
                        if (typeof object.hash === "string")
                            $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                        else if (object.hash.length)
                            message.hash = object.hash;
                    if (object.part_set_header != null) {
                        if (typeof object.part_set_header !== "object")
                            throw TypeError(".tendermint.types.BlockID.part_set_header: object expected");
                        message.part_set_header = $root.tendermint.types.PartSetHeader.fromObject(object.part_set_header);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a BlockID message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.BlockID
                 * @static
                 * @param {tendermint.types.BlockID} message BlockID
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BlockID.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.hash = "";
                        else {
                            object.hash = [];
                            if (options.bytes !== Array)
                                object.hash = $util.newBuffer(object.hash);
                        }
                        object.part_set_header = null;
                    }
                    if (message.hash != null && message.hasOwnProperty("hash"))
                        object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                    if (message.part_set_header != null && message.hasOwnProperty("part_set_header"))
                        object.part_set_header = $root.tendermint.types.PartSetHeader.toObject(message.part_set_header, options);
                    return object;
                };
    
                /**
                 * Converts this BlockID to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.BlockID
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BlockID.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return BlockID;
            })();
    
            types.Header = (function() {
    
                /**
                 * Properties of a Header.
                 * @memberof tendermint.types
                 * @interface IHeader
                 * @property {tendermint.version.IConsensus|null} [version] Header version
                 * @property {string|null} [chain_id] Header chain_id
                 * @property {Long|null} [height] Header height
                 * @property {google.protobuf.ITimestamp|null} [time] Header time
                 * @property {tendermint.types.IBlockID|null} [last_block_id] Header last_block_id
                 * @property {Uint8Array|null} [last_commit_hash] Header last_commit_hash
                 * @property {Uint8Array|null} [data_hash] Header data_hash
                 * @property {Uint8Array|null} [validators_hash] Header validators_hash
                 * @property {Uint8Array|null} [next_validators_hash] Header next_validators_hash
                 * @property {Uint8Array|null} [consensus_hash] Header consensus_hash
                 * @property {Uint8Array|null} [app_hash] Header app_hash
                 * @property {Uint8Array|null} [last_results_hash] Header last_results_hash
                 * @property {Uint8Array|null} [evidence_hash] Header evidence_hash
                 * @property {Uint8Array|null} [proposer_address] Header proposer_address
                 */
    
                /**
                 * Constructs a new Header.
                 * @memberof tendermint.types
                 * @classdesc Represents a Header.
                 * @implements IHeader
                 * @constructor
                 * @param {tendermint.types.IHeader=} [properties] Properties to set
                 */
                function Header(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Header version.
                 * @member {tendermint.version.IConsensus|null|undefined} version
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.version = null;
    
                /**
                 * Header chain_id.
                 * @member {string} chain_id
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.chain_id = "";
    
                /**
                 * Header height.
                 * @member {Long} height
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Header time.
                 * @member {google.protobuf.ITimestamp|null|undefined} time
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.time = null;
    
                /**
                 * Header last_block_id.
                 * @member {tendermint.types.IBlockID|null|undefined} last_block_id
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.last_block_id = null;
    
                /**
                 * Header last_commit_hash.
                 * @member {Uint8Array} last_commit_hash
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.last_commit_hash = $util.newBuffer([]);
    
                /**
                 * Header data_hash.
                 * @member {Uint8Array} data_hash
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.data_hash = $util.newBuffer([]);
    
                /**
                 * Header validators_hash.
                 * @member {Uint8Array} validators_hash
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.validators_hash = $util.newBuffer([]);
    
                /**
                 * Header next_validators_hash.
                 * @member {Uint8Array} next_validators_hash
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.next_validators_hash = $util.newBuffer([]);
    
                /**
                 * Header consensus_hash.
                 * @member {Uint8Array} consensus_hash
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.consensus_hash = $util.newBuffer([]);
    
                /**
                 * Header app_hash.
                 * @member {Uint8Array} app_hash
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.app_hash = $util.newBuffer([]);
    
                /**
                 * Header last_results_hash.
                 * @member {Uint8Array} last_results_hash
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.last_results_hash = $util.newBuffer([]);
    
                /**
                 * Header evidence_hash.
                 * @member {Uint8Array} evidence_hash
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.evidence_hash = $util.newBuffer([]);
    
                /**
                 * Header proposer_address.
                 * @member {Uint8Array} proposer_address
                 * @memberof tendermint.types.Header
                 * @instance
                 */
                Header.prototype.proposer_address = $util.newBuffer([]);
    
                /**
                 * Encodes the specified Header message. Does not implicitly {@link tendermint.types.Header.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.Header
                 * @static
                 * @param {tendermint.types.IHeader} message Header message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Header.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        $root.tendermint.version.Consensus.encode(message.version, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.chain_id != null && Object.hasOwnProperty.call(message, "chain_id"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.chain_id);
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.height);
                    if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                        $root.google.protobuf.Timestamp.encode(message.time, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.last_block_id != null && Object.hasOwnProperty.call(message, "last_block_id"))
                        $root.tendermint.types.BlockID.encode(message.last_block_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.last_commit_hash != null && Object.hasOwnProperty.call(message, "last_commit_hash"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.last_commit_hash);
                    if (message.data_hash != null && Object.hasOwnProperty.call(message, "data_hash"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.data_hash);
                    if (message.validators_hash != null && Object.hasOwnProperty.call(message, "validators_hash"))
                        writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.validators_hash);
                    if (message.next_validators_hash != null && Object.hasOwnProperty.call(message, "next_validators_hash"))
                        writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.next_validators_hash);
                    if (message.consensus_hash != null && Object.hasOwnProperty.call(message, "consensus_hash"))
                        writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.consensus_hash);
                    if (message.app_hash != null && Object.hasOwnProperty.call(message, "app_hash"))
                        writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.app_hash);
                    if (message.last_results_hash != null && Object.hasOwnProperty.call(message, "last_results_hash"))
                        writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.last_results_hash);
                    if (message.evidence_hash != null && Object.hasOwnProperty.call(message, "evidence_hash"))
                        writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.evidence_hash);
                    if (message.proposer_address != null && Object.hasOwnProperty.call(message, "proposer_address"))
                        writer.uint32(/* id 14, wireType 2 =*/114).bytes(message.proposer_address);
                    return writer;
                };
    
                /**
                 * Encodes the specified Header message, length delimited. Does not implicitly {@link tendermint.types.Header.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.Header
                 * @static
                 * @param {tendermint.types.IHeader} message Header message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Header.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Header message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.Header
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.Header} Header
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Header.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Header();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.version = $root.tendermint.version.Consensus.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.chain_id = reader.string();
                            break;
                        case 3:
                            message.height = reader.int64();
                            break;
                        case 4:
                            message.time = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.last_block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.last_commit_hash = reader.bytes();
                            break;
                        case 7:
                            message.data_hash = reader.bytes();
                            break;
                        case 8:
                            message.validators_hash = reader.bytes();
                            break;
                        case 9:
                            message.next_validators_hash = reader.bytes();
                            break;
                        case 10:
                            message.consensus_hash = reader.bytes();
                            break;
                        case 11:
                            message.app_hash = reader.bytes();
                            break;
                        case 12:
                            message.last_results_hash = reader.bytes();
                            break;
                        case 13:
                            message.evidence_hash = reader.bytes();
                            break;
                        case 14:
                            message.proposer_address = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Header message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.Header
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.Header} Header
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Header.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Header message.
                 * @function verify
                 * @memberof tendermint.types.Header
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Header.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.version != null && message.hasOwnProperty("version")) {
                        var error = $root.tendermint.version.Consensus.verify(message.version);
                        if (error)
                            return "version." + error;
                    }
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        if (!$util.isString(message.chain_id))
                            return "chain_id: string expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.time != null && message.hasOwnProperty("time")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.time);
                        if (error)
                            return "time." + error;
                    }
                    if (message.last_block_id != null && message.hasOwnProperty("last_block_id")) {
                        var error = $root.tendermint.types.BlockID.verify(message.last_block_id);
                        if (error)
                            return "last_block_id." + error;
                    }
                    if (message.last_commit_hash != null && message.hasOwnProperty("last_commit_hash"))
                        if (!(message.last_commit_hash && typeof message.last_commit_hash.length === "number" || $util.isString(message.last_commit_hash)))
                            return "last_commit_hash: buffer expected";
                    if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                        if (!(message.data_hash && typeof message.data_hash.length === "number" || $util.isString(message.data_hash)))
                            return "data_hash: buffer expected";
                    if (message.validators_hash != null && message.hasOwnProperty("validators_hash"))
                        if (!(message.validators_hash && typeof message.validators_hash.length === "number" || $util.isString(message.validators_hash)))
                            return "validators_hash: buffer expected";
                    if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                        if (!(message.next_validators_hash && typeof message.next_validators_hash.length === "number" || $util.isString(message.next_validators_hash)))
                            return "next_validators_hash: buffer expected";
                    if (message.consensus_hash != null && message.hasOwnProperty("consensus_hash"))
                        if (!(message.consensus_hash && typeof message.consensus_hash.length === "number" || $util.isString(message.consensus_hash)))
                            return "consensus_hash: buffer expected";
                    if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                        if (!(message.app_hash && typeof message.app_hash.length === "number" || $util.isString(message.app_hash)))
                            return "app_hash: buffer expected";
                    if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                        if (!(message.last_results_hash && typeof message.last_results_hash.length === "number" || $util.isString(message.last_results_hash)))
                            return "last_results_hash: buffer expected";
                    if (message.evidence_hash != null && message.hasOwnProperty("evidence_hash"))
                        if (!(message.evidence_hash && typeof message.evidence_hash.length === "number" || $util.isString(message.evidence_hash)))
                            return "evidence_hash: buffer expected";
                    if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                        if (!(message.proposer_address && typeof message.proposer_address.length === "number" || $util.isString(message.proposer_address)))
                            return "proposer_address: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Header message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.Header
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.Header} Header
                 */
                Header.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.Header)
                        return object;
                    var message = new $root.tendermint.types.Header();
                    if (object.version != null) {
                        if (typeof object.version !== "object")
                            throw TypeError(".tendermint.types.Header.version: object expected");
                        message.version = $root.tendermint.version.Consensus.fromObject(object.version);
                    }
                    if (object.chain_id != null)
                        message.chain_id = String(object.chain_id);
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.time != null) {
                        if (typeof object.time !== "object")
                            throw TypeError(".tendermint.types.Header.time: object expected");
                        message.time = $root.google.protobuf.Timestamp.fromObject(object.time);
                    }
                    if (object.last_block_id != null) {
                        if (typeof object.last_block_id !== "object")
                            throw TypeError(".tendermint.types.Header.last_block_id: object expected");
                        message.last_block_id = $root.tendermint.types.BlockID.fromObject(object.last_block_id);
                    }
                    if (object.last_commit_hash != null)
                        if (typeof object.last_commit_hash === "string")
                            $util.base64.decode(object.last_commit_hash, message.last_commit_hash = $util.newBuffer($util.base64.length(object.last_commit_hash)), 0);
                        else if (object.last_commit_hash.length)
                            message.last_commit_hash = object.last_commit_hash;
                    if (object.data_hash != null)
                        if (typeof object.data_hash === "string")
                            $util.base64.decode(object.data_hash, message.data_hash = $util.newBuffer($util.base64.length(object.data_hash)), 0);
                        else if (object.data_hash.length)
                            message.data_hash = object.data_hash;
                    if (object.validators_hash != null)
                        if (typeof object.validators_hash === "string")
                            $util.base64.decode(object.validators_hash, message.validators_hash = $util.newBuffer($util.base64.length(object.validators_hash)), 0);
                        else if (object.validators_hash.length)
                            message.validators_hash = object.validators_hash;
                    if (object.next_validators_hash != null)
                        if (typeof object.next_validators_hash === "string")
                            $util.base64.decode(object.next_validators_hash, message.next_validators_hash = $util.newBuffer($util.base64.length(object.next_validators_hash)), 0);
                        else if (object.next_validators_hash.length)
                            message.next_validators_hash = object.next_validators_hash;
                    if (object.consensus_hash != null)
                        if (typeof object.consensus_hash === "string")
                            $util.base64.decode(object.consensus_hash, message.consensus_hash = $util.newBuffer($util.base64.length(object.consensus_hash)), 0);
                        else if (object.consensus_hash.length)
                            message.consensus_hash = object.consensus_hash;
                    if (object.app_hash != null)
                        if (typeof object.app_hash === "string")
                            $util.base64.decode(object.app_hash, message.app_hash = $util.newBuffer($util.base64.length(object.app_hash)), 0);
                        else if (object.app_hash.length)
                            message.app_hash = object.app_hash;
                    if (object.last_results_hash != null)
                        if (typeof object.last_results_hash === "string")
                            $util.base64.decode(object.last_results_hash, message.last_results_hash = $util.newBuffer($util.base64.length(object.last_results_hash)), 0);
                        else if (object.last_results_hash.length)
                            message.last_results_hash = object.last_results_hash;
                    if (object.evidence_hash != null)
                        if (typeof object.evidence_hash === "string")
                            $util.base64.decode(object.evidence_hash, message.evidence_hash = $util.newBuffer($util.base64.length(object.evidence_hash)), 0);
                        else if (object.evidence_hash.length)
                            message.evidence_hash = object.evidence_hash;
                    if (object.proposer_address != null)
                        if (typeof object.proposer_address === "string")
                            $util.base64.decode(object.proposer_address, message.proposer_address = $util.newBuffer($util.base64.length(object.proposer_address)), 0);
                        else if (object.proposer_address.length)
                            message.proposer_address = object.proposer_address;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Header message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.Header
                 * @static
                 * @param {tendermint.types.Header} message Header
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Header.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.version = null;
                        object.chain_id = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.time = null;
                        object.last_block_id = null;
                        if (options.bytes === String)
                            object.last_commit_hash = "";
                        else {
                            object.last_commit_hash = [];
                            if (options.bytes !== Array)
                                object.last_commit_hash = $util.newBuffer(object.last_commit_hash);
                        }
                        if (options.bytes === String)
                            object.data_hash = "";
                        else {
                            object.data_hash = [];
                            if (options.bytes !== Array)
                                object.data_hash = $util.newBuffer(object.data_hash);
                        }
                        if (options.bytes === String)
                            object.validators_hash = "";
                        else {
                            object.validators_hash = [];
                            if (options.bytes !== Array)
                                object.validators_hash = $util.newBuffer(object.validators_hash);
                        }
                        if (options.bytes === String)
                            object.next_validators_hash = "";
                        else {
                            object.next_validators_hash = [];
                            if (options.bytes !== Array)
                                object.next_validators_hash = $util.newBuffer(object.next_validators_hash);
                        }
                        if (options.bytes === String)
                            object.consensus_hash = "";
                        else {
                            object.consensus_hash = [];
                            if (options.bytes !== Array)
                                object.consensus_hash = $util.newBuffer(object.consensus_hash);
                        }
                        if (options.bytes === String)
                            object.app_hash = "";
                        else {
                            object.app_hash = [];
                            if (options.bytes !== Array)
                                object.app_hash = $util.newBuffer(object.app_hash);
                        }
                        if (options.bytes === String)
                            object.last_results_hash = "";
                        else {
                            object.last_results_hash = [];
                            if (options.bytes !== Array)
                                object.last_results_hash = $util.newBuffer(object.last_results_hash);
                        }
                        if (options.bytes === String)
                            object.evidence_hash = "";
                        else {
                            object.evidence_hash = [];
                            if (options.bytes !== Array)
                                object.evidence_hash = $util.newBuffer(object.evidence_hash);
                        }
                        if (options.bytes === String)
                            object.proposer_address = "";
                        else {
                            object.proposer_address = [];
                            if (options.bytes !== Array)
                                object.proposer_address = $util.newBuffer(object.proposer_address);
                        }
                    }
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = $root.tendermint.version.Consensus.toObject(message.version, options);
                    if (message.chain_id != null && message.hasOwnProperty("chain_id"))
                        object.chain_id = message.chain_id;
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.time != null && message.hasOwnProperty("time"))
                        object.time = $root.google.protobuf.Timestamp.toObject(message.time, options);
                    if (message.last_block_id != null && message.hasOwnProperty("last_block_id"))
                        object.last_block_id = $root.tendermint.types.BlockID.toObject(message.last_block_id, options);
                    if (message.last_commit_hash != null && message.hasOwnProperty("last_commit_hash"))
                        object.last_commit_hash = options.bytes === String ? $util.base64.encode(message.last_commit_hash, 0, message.last_commit_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_commit_hash) : message.last_commit_hash;
                    if (message.data_hash != null && message.hasOwnProperty("data_hash"))
                        object.data_hash = options.bytes === String ? $util.base64.encode(message.data_hash, 0, message.data_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.data_hash) : message.data_hash;
                    if (message.validators_hash != null && message.hasOwnProperty("validators_hash"))
                        object.validators_hash = options.bytes === String ? $util.base64.encode(message.validators_hash, 0, message.validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.validators_hash) : message.validators_hash;
                    if (message.next_validators_hash != null && message.hasOwnProperty("next_validators_hash"))
                        object.next_validators_hash = options.bytes === String ? $util.base64.encode(message.next_validators_hash, 0, message.next_validators_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.next_validators_hash) : message.next_validators_hash;
                    if (message.consensus_hash != null && message.hasOwnProperty("consensus_hash"))
                        object.consensus_hash = options.bytes === String ? $util.base64.encode(message.consensus_hash, 0, message.consensus_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.consensus_hash) : message.consensus_hash;
                    if (message.app_hash != null && message.hasOwnProperty("app_hash"))
                        object.app_hash = options.bytes === String ? $util.base64.encode(message.app_hash, 0, message.app_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.app_hash) : message.app_hash;
                    if (message.last_results_hash != null && message.hasOwnProperty("last_results_hash"))
                        object.last_results_hash = options.bytes === String ? $util.base64.encode(message.last_results_hash, 0, message.last_results_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.last_results_hash) : message.last_results_hash;
                    if (message.evidence_hash != null && message.hasOwnProperty("evidence_hash"))
                        object.evidence_hash = options.bytes === String ? $util.base64.encode(message.evidence_hash, 0, message.evidence_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.evidence_hash) : message.evidence_hash;
                    if (message.proposer_address != null && message.hasOwnProperty("proposer_address"))
                        object.proposer_address = options.bytes === String ? $util.base64.encode(message.proposer_address, 0, message.proposer_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.proposer_address) : message.proposer_address;
                    return object;
                };
    
                /**
                 * Converts this Header to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.Header
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Header.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Header;
            })();
    
            types.Data = (function() {
    
                /**
                 * Properties of a Data.
                 * @memberof tendermint.types
                 * @interface IData
                 * @property {Array.<Uint8Array>|null} [txs] Data txs
                 */
    
                /**
                 * Constructs a new Data.
                 * @memberof tendermint.types
                 * @classdesc Represents a Data.
                 * @implements IData
                 * @constructor
                 * @param {tendermint.types.IData=} [properties] Properties to set
                 */
                function Data(properties) {
                    this.txs = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Data txs.
                 * @member {Array.<Uint8Array>} txs
                 * @memberof tendermint.types.Data
                 * @instance
                 */
                Data.prototype.txs = $util.emptyArray;
    
                /**
                 * Encodes the specified Data message. Does not implicitly {@link tendermint.types.Data.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.Data
                 * @static
                 * @param {tendermint.types.IData} message Data message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Data.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.txs != null && message.txs.length)
                        for (var i = 0; i < message.txs.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.txs[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified Data message, length delimited. Does not implicitly {@link tendermint.types.Data.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.Data
                 * @static
                 * @param {tendermint.types.IData} message Data message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Data.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Data message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.Data
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.Data} Data
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Data.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Data();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.txs && message.txs.length))
                                message.txs = [];
                            message.txs.push(reader.bytes());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Data message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.Data
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.Data} Data
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Data.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Data message.
                 * @function verify
                 * @memberof tendermint.types.Data
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Data.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.txs != null && message.hasOwnProperty("txs")) {
                        if (!Array.isArray(message.txs))
                            return "txs: array expected";
                        for (var i = 0; i < message.txs.length; ++i)
                            if (!(message.txs[i] && typeof message.txs[i].length === "number" || $util.isString(message.txs[i])))
                                return "txs: buffer[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a Data message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.Data
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.Data} Data
                 */
                Data.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.Data)
                        return object;
                    var message = new $root.tendermint.types.Data();
                    if (object.txs) {
                        if (!Array.isArray(object.txs))
                            throw TypeError(".tendermint.types.Data.txs: array expected");
                        message.txs = [];
                        for (var i = 0; i < object.txs.length; ++i)
                            if (typeof object.txs[i] === "string")
                                $util.base64.decode(object.txs[i], message.txs[i] = $util.newBuffer($util.base64.length(object.txs[i])), 0);
                            else if (object.txs[i].length)
                                message.txs[i] = object.txs[i];
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Data message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.Data
                 * @static
                 * @param {tendermint.types.Data} message Data
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Data.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.txs = [];
                    if (message.txs && message.txs.length) {
                        object.txs = [];
                        for (var j = 0; j < message.txs.length; ++j)
                            object.txs[j] = options.bytes === String ? $util.base64.encode(message.txs[j], 0, message.txs[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.txs[j]) : message.txs[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this Data to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.Data
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Data.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Data;
            })();
    
            types.Vote = (function() {
    
                /**
                 * Properties of a Vote.
                 * @memberof tendermint.types
                 * @interface IVote
                 * @property {tendermint.types.SignedMsgType|null} [type] Vote type
                 * @property {Long|null} [height] Vote height
                 * @property {number|null} [round] Vote round
                 * @property {tendermint.types.IBlockID|null} [block_id] Vote block_id
                 * @property {google.protobuf.ITimestamp|null} [timestamp] Vote timestamp
                 * @property {Uint8Array|null} [validator_address] Vote validator_address
                 * @property {number|null} [validator_index] Vote validator_index
                 * @property {Uint8Array|null} [signature] Vote signature
                 */
    
                /**
                 * Constructs a new Vote.
                 * @memberof tendermint.types
                 * @classdesc Represents a Vote.
                 * @implements IVote
                 * @constructor
                 * @param {tendermint.types.IVote=} [properties] Properties to set
                 */
                function Vote(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Vote type.
                 * @member {tendermint.types.SignedMsgType} type
                 * @memberof tendermint.types.Vote
                 * @instance
                 */
                Vote.prototype.type = 0;
    
                /**
                 * Vote height.
                 * @member {Long} height
                 * @memberof tendermint.types.Vote
                 * @instance
                 */
                Vote.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Vote round.
                 * @member {number} round
                 * @memberof tendermint.types.Vote
                 * @instance
                 */
                Vote.prototype.round = 0;
    
                /**
                 * Vote block_id.
                 * @member {tendermint.types.IBlockID|null|undefined} block_id
                 * @memberof tendermint.types.Vote
                 * @instance
                 */
                Vote.prototype.block_id = null;
    
                /**
                 * Vote timestamp.
                 * @member {google.protobuf.ITimestamp|null|undefined} timestamp
                 * @memberof tendermint.types.Vote
                 * @instance
                 */
                Vote.prototype.timestamp = null;
    
                /**
                 * Vote validator_address.
                 * @member {Uint8Array} validator_address
                 * @memberof tendermint.types.Vote
                 * @instance
                 */
                Vote.prototype.validator_address = $util.newBuffer([]);
    
                /**
                 * Vote validator_index.
                 * @member {number} validator_index
                 * @memberof tendermint.types.Vote
                 * @instance
                 */
                Vote.prototype.validator_index = 0;
    
                /**
                 * Vote signature.
                 * @member {Uint8Array} signature
                 * @memberof tendermint.types.Vote
                 * @instance
                 */
                Vote.prototype.signature = $util.newBuffer([]);
    
                /**
                 * Encodes the specified Vote message. Does not implicitly {@link tendermint.types.Vote.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.Vote
                 * @static
                 * @param {tendermint.types.IVote} message Vote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Vote.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                    if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.round);
                    if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                        $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                        $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                        writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.validator_address);
                    if (message.validator_index != null && Object.hasOwnProperty.call(message, "validator_index"))
                        writer.uint32(/* id 7, wireType 0 =*/56).int32(message.validator_index);
                    if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                        writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.signature);
                    return writer;
                };
    
                /**
                 * Encodes the specified Vote message, length delimited. Does not implicitly {@link tendermint.types.Vote.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.Vote
                 * @static
                 * @param {tendermint.types.IVote} message Vote message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Vote.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Vote message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.Vote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.Vote} Vote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Vote.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Vote();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.int32();
                            break;
                        case 2:
                            message.height = reader.int64();
                            break;
                        case 3:
                            message.round = reader.int32();
                            break;
                        case 4:
                            message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.validator_address = reader.bytes();
                            break;
                        case 7:
                            message.validator_index = reader.int32();
                            break;
                        case 8:
                            message.signature = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Vote message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.Vote
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.Vote} Vote
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Vote.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Vote message.
                 * @function verify
                 * @memberof tendermint.types.Vote
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Vote.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 32:
                            break;
                        }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.round != null && message.hasOwnProperty("round"))
                        if (!$util.isInteger(message.round))
                            return "round: integer expected";
                    if (message.block_id != null && message.hasOwnProperty("block_id")) {
                        var error = $root.tendermint.types.BlockID.verify(message.block_id);
                        if (error)
                            return "block_id." + error;
                    }
                    if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                        if (error)
                            return "timestamp." + error;
                    }
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        if (!(message.validator_address && typeof message.validator_address.length === "number" || $util.isString(message.validator_address)))
                            return "validator_address: buffer expected";
                    if (message.validator_index != null && message.hasOwnProperty("validator_index"))
                        if (!$util.isInteger(message.validator_index))
                            return "validator_index: integer expected";
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                            return "signature: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Vote message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.Vote
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.Vote} Vote
                 */
                Vote.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.Vote)
                        return object;
                    var message = new $root.tendermint.types.Vote();
                    switch (object.type) {
                    case "SIGNED_MSG_TYPE_UNKNOWN":
                    case 0:
                        message.type = 0;
                        break;
                    case "SIGNED_MSG_TYPE_PREVOTE":
                    case 1:
                        message.type = 1;
                        break;
                    case "SIGNED_MSG_TYPE_PRECOMMIT":
                    case 2:
                        message.type = 2;
                        break;
                    case "SIGNED_MSG_TYPE_PROPOSAL":
                    case 32:
                        message.type = 32;
                        break;
                    }
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.round != null)
                        message.round = object.round | 0;
                    if (object.block_id != null) {
                        if (typeof object.block_id !== "object")
                            throw TypeError(".tendermint.types.Vote.block_id: object expected");
                        message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                    }
                    if (object.timestamp != null) {
                        if (typeof object.timestamp !== "object")
                            throw TypeError(".tendermint.types.Vote.timestamp: object expected");
                        message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                    }
                    if (object.validator_address != null)
                        if (typeof object.validator_address === "string")
                            $util.base64.decode(object.validator_address, message.validator_address = $util.newBuffer($util.base64.length(object.validator_address)), 0);
                        else if (object.validator_address.length)
                            message.validator_address = object.validator_address;
                    if (object.validator_index != null)
                        message.validator_index = object.validator_index | 0;
                    if (object.signature != null)
                        if (typeof object.signature === "string")
                            $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                        else if (object.signature.length)
                            message.signature = object.signature;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Vote message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.Vote
                 * @static
                 * @param {tendermint.types.Vote} message Vote
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Vote.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.round = 0;
                        object.block_id = null;
                        object.timestamp = null;
                        if (options.bytes === String)
                            object.validator_address = "";
                        else {
                            object.validator_address = [];
                            if (options.bytes !== Array)
                                object.validator_address = $util.newBuffer(object.validator_address);
                        }
                        object.validator_index = 0;
                        if (options.bytes === String)
                            object.signature = "";
                        else {
                            object.signature = [];
                            if (options.bytes !== Array)
                                object.signature = $util.newBuffer(object.signature);
                        }
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.round != null && message.hasOwnProperty("round"))
                        object.round = message.round;
                    if (message.block_id != null && message.hasOwnProperty("block_id"))
                        object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        object.validator_address = options.bytes === String ? $util.base64.encode(message.validator_address, 0, message.validator_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator_address) : message.validator_address;
                    if (message.validator_index != null && message.hasOwnProperty("validator_index"))
                        object.validator_index = message.validator_index;
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                    return object;
                };
    
                /**
                 * Converts this Vote to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.Vote
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Vote.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Vote;
            })();
    
            types.Commit = (function() {
    
                /**
                 * Properties of a Commit.
                 * @memberof tendermint.types
                 * @interface ICommit
                 * @property {Long|null} [height] Commit height
                 * @property {number|null} [round] Commit round
                 * @property {tendermint.types.IBlockID|null} [block_id] Commit block_id
                 * @property {Array.<tendermint.types.ICommitSig>|null} [signatures] Commit signatures
                 */
    
                /**
                 * Constructs a new Commit.
                 * @memberof tendermint.types
                 * @classdesc Represents a Commit.
                 * @implements ICommit
                 * @constructor
                 * @param {tendermint.types.ICommit=} [properties] Properties to set
                 */
                function Commit(properties) {
                    this.signatures = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Commit height.
                 * @member {Long} height
                 * @memberof tendermint.types.Commit
                 * @instance
                 */
                Commit.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Commit round.
                 * @member {number} round
                 * @memberof tendermint.types.Commit
                 * @instance
                 */
                Commit.prototype.round = 0;
    
                /**
                 * Commit block_id.
                 * @member {tendermint.types.IBlockID|null|undefined} block_id
                 * @memberof tendermint.types.Commit
                 * @instance
                 */
                Commit.prototype.block_id = null;
    
                /**
                 * Commit signatures.
                 * @member {Array.<tendermint.types.ICommitSig>} signatures
                 * @memberof tendermint.types.Commit
                 * @instance
                 */
                Commit.prototype.signatures = $util.emptyArray;
    
                /**
                 * Encodes the specified Commit message. Does not implicitly {@link tendermint.types.Commit.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.Commit
                 * @static
                 * @param {tendermint.types.ICommit} message Commit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Commit.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.height);
                    if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.round);
                    if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                        $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.signatures != null && message.signatures.length)
                        for (var i = 0; i < message.signatures.length; ++i)
                            $root.tendermint.types.CommitSig.encode(message.signatures[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified Commit message, length delimited. Does not implicitly {@link tendermint.types.Commit.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.Commit
                 * @static
                 * @param {tendermint.types.ICommit} message Commit message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Commit.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Commit message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.Commit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.Commit} Commit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Commit.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Commit();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.height = reader.int64();
                            break;
                        case 2:
                            message.round = reader.int32();
                            break;
                        case 3:
                            message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                            break;
                        case 4:
                            if (!(message.signatures && message.signatures.length))
                                message.signatures = [];
                            message.signatures.push($root.tendermint.types.CommitSig.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Commit message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.Commit
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.Commit} Commit
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Commit.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Commit message.
                 * @function verify
                 * @memberof tendermint.types.Commit
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Commit.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.round != null && message.hasOwnProperty("round"))
                        if (!$util.isInteger(message.round))
                            return "round: integer expected";
                    if (message.block_id != null && message.hasOwnProperty("block_id")) {
                        var error = $root.tendermint.types.BlockID.verify(message.block_id);
                        if (error)
                            return "block_id." + error;
                    }
                    if (message.signatures != null && message.hasOwnProperty("signatures")) {
                        if (!Array.isArray(message.signatures))
                            return "signatures: array expected";
                        for (var i = 0; i < message.signatures.length; ++i) {
                            var error = $root.tendermint.types.CommitSig.verify(message.signatures[i]);
                            if (error)
                                return "signatures." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a Commit message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.Commit
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.Commit} Commit
                 */
                Commit.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.Commit)
                        return object;
                    var message = new $root.tendermint.types.Commit();
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.round != null)
                        message.round = object.round | 0;
                    if (object.block_id != null) {
                        if (typeof object.block_id !== "object")
                            throw TypeError(".tendermint.types.Commit.block_id: object expected");
                        message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                    }
                    if (object.signatures) {
                        if (!Array.isArray(object.signatures))
                            throw TypeError(".tendermint.types.Commit.signatures: array expected");
                        message.signatures = [];
                        for (var i = 0; i < object.signatures.length; ++i) {
                            if (typeof object.signatures[i] !== "object")
                                throw TypeError(".tendermint.types.Commit.signatures: object expected");
                            message.signatures[i] = $root.tendermint.types.CommitSig.fromObject(object.signatures[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a Commit message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.Commit
                 * @static
                 * @param {tendermint.types.Commit} message Commit
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Commit.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.signatures = [];
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.round = 0;
                        object.block_id = null;
                    }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.round != null && message.hasOwnProperty("round"))
                        object.round = message.round;
                    if (message.block_id != null && message.hasOwnProperty("block_id"))
                        object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                    if (message.signatures && message.signatures.length) {
                        object.signatures = [];
                        for (var j = 0; j < message.signatures.length; ++j)
                            object.signatures[j] = $root.tendermint.types.CommitSig.toObject(message.signatures[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this Commit to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.Commit
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Commit.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Commit;
            })();
    
            types.CommitSig = (function() {
    
                /**
                 * Properties of a CommitSig.
                 * @memberof tendermint.types
                 * @interface ICommitSig
                 * @property {tendermint.types.BlockIDFlag|null} [block_id_flag] CommitSig block_id_flag
                 * @property {Uint8Array|null} [validator_address] CommitSig validator_address
                 * @property {google.protobuf.ITimestamp|null} [timestamp] CommitSig timestamp
                 * @property {Uint8Array|null} [signature] CommitSig signature
                 */
    
                /**
                 * Constructs a new CommitSig.
                 * @memberof tendermint.types
                 * @classdesc Represents a CommitSig.
                 * @implements ICommitSig
                 * @constructor
                 * @param {tendermint.types.ICommitSig=} [properties] Properties to set
                 */
                function CommitSig(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CommitSig block_id_flag.
                 * @member {tendermint.types.BlockIDFlag} block_id_flag
                 * @memberof tendermint.types.CommitSig
                 * @instance
                 */
                CommitSig.prototype.block_id_flag = 0;
    
                /**
                 * CommitSig validator_address.
                 * @member {Uint8Array} validator_address
                 * @memberof tendermint.types.CommitSig
                 * @instance
                 */
                CommitSig.prototype.validator_address = $util.newBuffer([]);
    
                /**
                 * CommitSig timestamp.
                 * @member {google.protobuf.ITimestamp|null|undefined} timestamp
                 * @memberof tendermint.types.CommitSig
                 * @instance
                 */
                CommitSig.prototype.timestamp = null;
    
                /**
                 * CommitSig signature.
                 * @member {Uint8Array} signature
                 * @memberof tendermint.types.CommitSig
                 * @instance
                 */
                CommitSig.prototype.signature = $util.newBuffer([]);
    
                /**
                 * Encodes the specified CommitSig message. Does not implicitly {@link tendermint.types.CommitSig.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.CommitSig
                 * @static
                 * @param {tendermint.types.ICommitSig} message CommitSig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommitSig.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.block_id_flag != null && Object.hasOwnProperty.call(message, "block_id_flag"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.block_id_flag);
                    if (message.validator_address != null && Object.hasOwnProperty.call(message, "validator_address"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.validator_address);
                    if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                        $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                        writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.signature);
                    return writer;
                };
    
                /**
                 * Encodes the specified CommitSig message, length delimited. Does not implicitly {@link tendermint.types.CommitSig.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.CommitSig
                 * @static
                 * @param {tendermint.types.ICommitSig} message CommitSig message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CommitSig.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CommitSig message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.CommitSig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.CommitSig} CommitSig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommitSig.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.CommitSig();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.block_id_flag = reader.int32();
                            break;
                        case 2:
                            message.validator_address = reader.bytes();
                            break;
                        case 3:
                            message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.signature = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CommitSig message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.CommitSig
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.CommitSig} CommitSig
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CommitSig.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CommitSig message.
                 * @function verify
                 * @memberof tendermint.types.CommitSig
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CommitSig.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.block_id_flag != null && message.hasOwnProperty("block_id_flag"))
                        switch (message.block_id_flag) {
                        default:
                            return "block_id_flag: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        if (!(message.validator_address && typeof message.validator_address.length === "number" || $util.isString(message.validator_address)))
                            return "validator_address: buffer expected";
                    if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                        if (error)
                            return "timestamp." + error;
                    }
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                            return "signature: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a CommitSig message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.CommitSig
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.CommitSig} CommitSig
                 */
                CommitSig.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.CommitSig)
                        return object;
                    var message = new $root.tendermint.types.CommitSig();
                    switch (object.block_id_flag) {
                    case "BLOCK_ID_FLAG_UNKNOWN":
                    case 0:
                        message.block_id_flag = 0;
                        break;
                    case "BLOCK_ID_FLAG_ABSENT":
                    case 1:
                        message.block_id_flag = 1;
                        break;
                    case "BLOCK_ID_FLAG_COMMIT":
                    case 2:
                        message.block_id_flag = 2;
                        break;
                    case "BLOCK_ID_FLAG_NIL":
                    case 3:
                        message.block_id_flag = 3;
                        break;
                    }
                    if (object.validator_address != null)
                        if (typeof object.validator_address === "string")
                            $util.base64.decode(object.validator_address, message.validator_address = $util.newBuffer($util.base64.length(object.validator_address)), 0);
                        else if (object.validator_address.length)
                            message.validator_address = object.validator_address;
                    if (object.timestamp != null) {
                        if (typeof object.timestamp !== "object")
                            throw TypeError(".tendermint.types.CommitSig.timestamp: object expected");
                        message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                    }
                    if (object.signature != null)
                        if (typeof object.signature === "string")
                            $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                        else if (object.signature.length)
                            message.signature = object.signature;
                    return message;
                };
    
                /**
                 * Creates a plain object from a CommitSig message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.CommitSig
                 * @static
                 * @param {tendermint.types.CommitSig} message CommitSig
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CommitSig.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.block_id_flag = options.enums === String ? "BLOCK_ID_FLAG_UNKNOWN" : 0;
                        if (options.bytes === String)
                            object.validator_address = "";
                        else {
                            object.validator_address = [];
                            if (options.bytes !== Array)
                                object.validator_address = $util.newBuffer(object.validator_address);
                        }
                        object.timestamp = null;
                        if (options.bytes === String)
                            object.signature = "";
                        else {
                            object.signature = [];
                            if (options.bytes !== Array)
                                object.signature = $util.newBuffer(object.signature);
                        }
                    }
                    if (message.block_id_flag != null && message.hasOwnProperty("block_id_flag"))
                        object.block_id_flag = options.enums === String ? $root.tendermint.types.BlockIDFlag[message.block_id_flag] : message.block_id_flag;
                    if (message.validator_address != null && message.hasOwnProperty("validator_address"))
                        object.validator_address = options.bytes === String ? $util.base64.encode(message.validator_address, 0, message.validator_address.length) : options.bytes === Array ? Array.prototype.slice.call(message.validator_address) : message.validator_address;
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                    return object;
                };
    
                /**
                 * Converts this CommitSig to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.CommitSig
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CommitSig.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CommitSig;
            })();
    
            types.Proposal = (function() {
    
                /**
                 * Properties of a Proposal.
                 * @memberof tendermint.types
                 * @interface IProposal
                 * @property {tendermint.types.SignedMsgType|null} [type] Proposal type
                 * @property {Long|null} [height] Proposal height
                 * @property {number|null} [round] Proposal round
                 * @property {number|null} [pol_round] Proposal pol_round
                 * @property {tendermint.types.IBlockID|null} [block_id] Proposal block_id
                 * @property {google.protobuf.ITimestamp|null} [timestamp] Proposal timestamp
                 * @property {Uint8Array|null} [signature] Proposal signature
                 */
    
                /**
                 * Constructs a new Proposal.
                 * @memberof tendermint.types
                 * @classdesc Represents a Proposal.
                 * @implements IProposal
                 * @constructor
                 * @param {tendermint.types.IProposal=} [properties] Properties to set
                 */
                function Proposal(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Proposal type.
                 * @member {tendermint.types.SignedMsgType} type
                 * @memberof tendermint.types.Proposal
                 * @instance
                 */
                Proposal.prototype.type = 0;
    
                /**
                 * Proposal height.
                 * @member {Long} height
                 * @memberof tendermint.types.Proposal
                 * @instance
                 */
                Proposal.prototype.height = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Proposal round.
                 * @member {number} round
                 * @memberof tendermint.types.Proposal
                 * @instance
                 */
                Proposal.prototype.round = 0;
    
                /**
                 * Proposal pol_round.
                 * @member {number} pol_round
                 * @memberof tendermint.types.Proposal
                 * @instance
                 */
                Proposal.prototype.pol_round = 0;
    
                /**
                 * Proposal block_id.
                 * @member {tendermint.types.IBlockID|null|undefined} block_id
                 * @memberof tendermint.types.Proposal
                 * @instance
                 */
                Proposal.prototype.block_id = null;
    
                /**
                 * Proposal timestamp.
                 * @member {google.protobuf.ITimestamp|null|undefined} timestamp
                 * @memberof tendermint.types.Proposal
                 * @instance
                 */
                Proposal.prototype.timestamp = null;
    
                /**
                 * Proposal signature.
                 * @member {Uint8Array} signature
                 * @memberof tendermint.types.Proposal
                 * @instance
                 */
                Proposal.prototype.signature = $util.newBuffer([]);
    
                /**
                 * Encodes the specified Proposal message. Does not implicitly {@link tendermint.types.Proposal.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.Proposal
                 * @static
                 * @param {tendermint.types.IProposal} message Proposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Proposal.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.type);
                    if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.height);
                    if (message.round != null && Object.hasOwnProperty.call(message, "round"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.round);
                    if (message.pol_round != null && Object.hasOwnProperty.call(message, "pol_round"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.pol_round);
                    if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                        $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                        $root.google.protobuf.Timestamp.encode(message.timestamp, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.signature != null && Object.hasOwnProperty.call(message, "signature"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.signature);
                    return writer;
                };
    
                /**
                 * Encodes the specified Proposal message, length delimited. Does not implicitly {@link tendermint.types.Proposal.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.Proposal
                 * @static
                 * @param {tendermint.types.IProposal} message Proposal message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Proposal.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Proposal message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.Proposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.Proposal} Proposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Proposal.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Proposal();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type = reader.int32();
                            break;
                        case 2:
                            message.height = reader.int64();
                            break;
                        case 3:
                            message.round = reader.int32();
                            break;
                        case 4:
                            message.pol_round = reader.int32();
                            break;
                        case 5:
                            message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                            break;
                        case 6:
                            message.timestamp = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.signature = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Proposal message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.Proposal
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.Proposal} Proposal
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Proposal.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Proposal message.
                 * @function verify
                 * @memberof tendermint.types.Proposal
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Proposal.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 32:
                            break;
                        }
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                            return "height: integer|Long expected";
                    if (message.round != null && message.hasOwnProperty("round"))
                        if (!$util.isInteger(message.round))
                            return "round: integer expected";
                    if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                        if (!$util.isInteger(message.pol_round))
                            return "pol_round: integer expected";
                    if (message.block_id != null && message.hasOwnProperty("block_id")) {
                        var error = $root.tendermint.types.BlockID.verify(message.block_id);
                        if (error)
                            return "block_id." + error;
                    }
                    if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                        var error = $root.google.protobuf.Timestamp.verify(message.timestamp);
                        if (error)
                            return "timestamp." + error;
                    }
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        if (!(message.signature && typeof message.signature.length === "number" || $util.isString(message.signature)))
                            return "signature: buffer expected";
                    return null;
                };
    
                /**
                 * Creates a Proposal message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.Proposal
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.Proposal} Proposal
                 */
                Proposal.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.Proposal)
                        return object;
                    var message = new $root.tendermint.types.Proposal();
                    switch (object.type) {
                    case "SIGNED_MSG_TYPE_UNKNOWN":
                    case 0:
                        message.type = 0;
                        break;
                    case "SIGNED_MSG_TYPE_PREVOTE":
                    case 1:
                        message.type = 1;
                        break;
                    case "SIGNED_MSG_TYPE_PRECOMMIT":
                    case 2:
                        message.type = 2;
                        break;
                    case "SIGNED_MSG_TYPE_PROPOSAL":
                    case 32:
                        message.type = 32;
                        break;
                    }
                    if (object.height != null)
                        if ($util.Long)
                            (message.height = $util.Long.fromValue(object.height)).unsigned = false;
                        else if (typeof object.height === "string")
                            message.height = parseInt(object.height, 10);
                        else if (typeof object.height === "number")
                            message.height = object.height;
                        else if (typeof object.height === "object")
                            message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber();
                    if (object.round != null)
                        message.round = object.round | 0;
                    if (object.pol_round != null)
                        message.pol_round = object.pol_round | 0;
                    if (object.block_id != null) {
                        if (typeof object.block_id !== "object")
                            throw TypeError(".tendermint.types.Proposal.block_id: object expected");
                        message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                    }
                    if (object.timestamp != null) {
                        if (typeof object.timestamp !== "object")
                            throw TypeError(".tendermint.types.Proposal.timestamp: object expected");
                        message.timestamp = $root.google.protobuf.Timestamp.fromObject(object.timestamp);
                    }
                    if (object.signature != null)
                        if (typeof object.signature === "string")
                            $util.base64.decode(object.signature, message.signature = $util.newBuffer($util.base64.length(object.signature)), 0);
                        else if (object.signature.length)
                            message.signature = object.signature;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Proposal message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.Proposal
                 * @static
                 * @param {tendermint.types.Proposal} message Proposal
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Proposal.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type = options.enums === String ? "SIGNED_MSG_TYPE_UNKNOWN" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.height = options.longs === String ? "0" : 0;
                        object.round = 0;
                        object.pol_round = 0;
                        object.block_id = null;
                        object.timestamp = null;
                        if (options.bytes === String)
                            object.signature = "";
                        else {
                            object.signature = [];
                            if (options.bytes !== Array)
                                object.signature = $util.newBuffer(object.signature);
                        }
                    }
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.tendermint.types.SignedMsgType[message.type] : message.type;
                    if (message.height != null && message.hasOwnProperty("height"))
                        if (typeof message.height === "number")
                            object.height = options.longs === String ? String(message.height) : message.height;
                        else
                            object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber() : message.height;
                    if (message.round != null && message.hasOwnProperty("round"))
                        object.round = message.round;
                    if (message.pol_round != null && message.hasOwnProperty("pol_round"))
                        object.pol_round = message.pol_round;
                    if (message.block_id != null && message.hasOwnProperty("block_id"))
                        object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                    if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                        object.timestamp = $root.google.protobuf.Timestamp.toObject(message.timestamp, options);
                    if (message.signature != null && message.hasOwnProperty("signature"))
                        object.signature = options.bytes === String ? $util.base64.encode(message.signature, 0, message.signature.length) : options.bytes === Array ? Array.prototype.slice.call(message.signature) : message.signature;
                    return object;
                };
    
                /**
                 * Converts this Proposal to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.Proposal
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Proposal.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Proposal;
            })();
    
            types.SignedHeader = (function() {
    
                /**
                 * Properties of a SignedHeader.
                 * @memberof tendermint.types
                 * @interface ISignedHeader
                 * @property {tendermint.types.IHeader|null} [header] SignedHeader header
                 * @property {tendermint.types.ICommit|null} [commit] SignedHeader commit
                 */
    
                /**
                 * Constructs a new SignedHeader.
                 * @memberof tendermint.types
                 * @classdesc Represents a SignedHeader.
                 * @implements ISignedHeader
                 * @constructor
                 * @param {tendermint.types.ISignedHeader=} [properties] Properties to set
                 */
                function SignedHeader(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SignedHeader header.
                 * @member {tendermint.types.IHeader|null|undefined} header
                 * @memberof tendermint.types.SignedHeader
                 * @instance
                 */
                SignedHeader.prototype.header = null;
    
                /**
                 * SignedHeader commit.
                 * @member {tendermint.types.ICommit|null|undefined} commit
                 * @memberof tendermint.types.SignedHeader
                 * @instance
                 */
                SignedHeader.prototype.commit = null;
    
                /**
                 * Encodes the specified SignedHeader message. Does not implicitly {@link tendermint.types.SignedHeader.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.SignedHeader
                 * @static
                 * @param {tendermint.types.ISignedHeader} message SignedHeader message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SignedHeader.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                        $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.commit != null && Object.hasOwnProperty.call(message, "commit"))
                        $root.tendermint.types.Commit.encode(message.commit, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SignedHeader message, length delimited. Does not implicitly {@link tendermint.types.SignedHeader.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.SignedHeader
                 * @static
                 * @param {tendermint.types.ISignedHeader} message SignedHeader message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SignedHeader.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SignedHeader message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.SignedHeader
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.SignedHeader} SignedHeader
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SignedHeader.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.SignedHeader();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.commit = $root.tendermint.types.Commit.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SignedHeader message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.SignedHeader
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.SignedHeader} SignedHeader
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SignedHeader.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SignedHeader message.
                 * @function verify
                 * @memberof tendermint.types.SignedHeader
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SignedHeader.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.header != null && message.hasOwnProperty("header")) {
                        var error = $root.tendermint.types.Header.verify(message.header);
                        if (error)
                            return "header." + error;
                    }
                    if (message.commit != null && message.hasOwnProperty("commit")) {
                        var error = $root.tendermint.types.Commit.verify(message.commit);
                        if (error)
                            return "commit." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a SignedHeader message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.SignedHeader
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.SignedHeader} SignedHeader
                 */
                SignedHeader.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.SignedHeader)
                        return object;
                    var message = new $root.tendermint.types.SignedHeader();
                    if (object.header != null) {
                        if (typeof object.header !== "object")
                            throw TypeError(".tendermint.types.SignedHeader.header: object expected");
                        message.header = $root.tendermint.types.Header.fromObject(object.header);
                    }
                    if (object.commit != null) {
                        if (typeof object.commit !== "object")
                            throw TypeError(".tendermint.types.SignedHeader.commit: object expected");
                        message.commit = $root.tendermint.types.Commit.fromObject(object.commit);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SignedHeader message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.SignedHeader
                 * @static
                 * @param {tendermint.types.SignedHeader} message SignedHeader
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SignedHeader.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.header = null;
                        object.commit = null;
                    }
                    if (message.header != null && message.hasOwnProperty("header"))
                        object.header = $root.tendermint.types.Header.toObject(message.header, options);
                    if (message.commit != null && message.hasOwnProperty("commit"))
                        object.commit = $root.tendermint.types.Commit.toObject(message.commit, options);
                    return object;
                };
    
                /**
                 * Converts this SignedHeader to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.SignedHeader
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SignedHeader.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SignedHeader;
            })();
    
            types.LightBlock = (function() {
    
                /**
                 * Properties of a LightBlock.
                 * @memberof tendermint.types
                 * @interface ILightBlock
                 * @property {tendermint.types.ISignedHeader|null} [signed_header] LightBlock signed_header
                 * @property {tendermint.types.IValidatorSet|null} [validator_set] LightBlock validator_set
                 */
    
                /**
                 * Constructs a new LightBlock.
                 * @memberof tendermint.types
                 * @classdesc Represents a LightBlock.
                 * @implements ILightBlock
                 * @constructor
                 * @param {tendermint.types.ILightBlock=} [properties] Properties to set
                 */
                function LightBlock(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * LightBlock signed_header.
                 * @member {tendermint.types.ISignedHeader|null|undefined} signed_header
                 * @memberof tendermint.types.LightBlock
                 * @instance
                 */
                LightBlock.prototype.signed_header = null;
    
                /**
                 * LightBlock validator_set.
                 * @member {tendermint.types.IValidatorSet|null|undefined} validator_set
                 * @memberof tendermint.types.LightBlock
                 * @instance
                 */
                LightBlock.prototype.validator_set = null;
    
                /**
                 * Encodes the specified LightBlock message. Does not implicitly {@link tendermint.types.LightBlock.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.LightBlock
                 * @static
                 * @param {tendermint.types.ILightBlock} message LightBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LightBlock.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.signed_header != null && Object.hasOwnProperty.call(message, "signed_header"))
                        $root.tendermint.types.SignedHeader.encode(message.signed_header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.validator_set != null && Object.hasOwnProperty.call(message, "validator_set"))
                        $root.tendermint.types.ValidatorSet.encode(message.validator_set, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified LightBlock message, length delimited. Does not implicitly {@link tendermint.types.LightBlock.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.LightBlock
                 * @static
                 * @param {tendermint.types.ILightBlock} message LightBlock message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                LightBlock.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a LightBlock message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.LightBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.LightBlock} LightBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LightBlock.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.LightBlock();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.signed_header = $root.tendermint.types.SignedHeader.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.validator_set = $root.tendermint.types.ValidatorSet.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a LightBlock message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.LightBlock
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.LightBlock} LightBlock
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                LightBlock.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a LightBlock message.
                 * @function verify
                 * @memberof tendermint.types.LightBlock
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                LightBlock.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.signed_header != null && message.hasOwnProperty("signed_header")) {
                        var error = $root.tendermint.types.SignedHeader.verify(message.signed_header);
                        if (error)
                            return "signed_header." + error;
                    }
                    if (message.validator_set != null && message.hasOwnProperty("validator_set")) {
                        var error = $root.tendermint.types.ValidatorSet.verify(message.validator_set);
                        if (error)
                            return "validator_set." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a LightBlock message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.LightBlock
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.LightBlock} LightBlock
                 */
                LightBlock.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.LightBlock)
                        return object;
                    var message = new $root.tendermint.types.LightBlock();
                    if (object.signed_header != null) {
                        if (typeof object.signed_header !== "object")
                            throw TypeError(".tendermint.types.LightBlock.signed_header: object expected");
                        message.signed_header = $root.tendermint.types.SignedHeader.fromObject(object.signed_header);
                    }
                    if (object.validator_set != null) {
                        if (typeof object.validator_set !== "object")
                            throw TypeError(".tendermint.types.LightBlock.validator_set: object expected");
                        message.validator_set = $root.tendermint.types.ValidatorSet.fromObject(object.validator_set);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a LightBlock message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.LightBlock
                 * @static
                 * @param {tendermint.types.LightBlock} message LightBlock
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                LightBlock.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.signed_header = null;
                        object.validator_set = null;
                    }
                    if (message.signed_header != null && message.hasOwnProperty("signed_header"))
                        object.signed_header = $root.tendermint.types.SignedHeader.toObject(message.signed_header, options);
                    if (message.validator_set != null && message.hasOwnProperty("validator_set"))
                        object.validator_set = $root.tendermint.types.ValidatorSet.toObject(message.validator_set, options);
                    return object;
                };
    
                /**
                 * Converts this LightBlock to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.LightBlock
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                LightBlock.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return LightBlock;
            })();
    
            types.BlockMeta = (function() {
    
                /**
                 * Properties of a BlockMeta.
                 * @memberof tendermint.types
                 * @interface IBlockMeta
                 * @property {tendermint.types.IBlockID|null} [block_id] BlockMeta block_id
                 * @property {Long|null} [block_size] BlockMeta block_size
                 * @property {tendermint.types.IHeader|null} [header] BlockMeta header
                 * @property {Long|null} [num_txs] BlockMeta num_txs
                 */
    
                /**
                 * Constructs a new BlockMeta.
                 * @memberof tendermint.types
                 * @classdesc Represents a BlockMeta.
                 * @implements IBlockMeta
                 * @constructor
                 * @param {tendermint.types.IBlockMeta=} [properties] Properties to set
                 */
                function BlockMeta(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BlockMeta block_id.
                 * @member {tendermint.types.IBlockID|null|undefined} block_id
                 * @memberof tendermint.types.BlockMeta
                 * @instance
                 */
                BlockMeta.prototype.block_id = null;
    
                /**
                 * BlockMeta block_size.
                 * @member {Long} block_size
                 * @memberof tendermint.types.BlockMeta
                 * @instance
                 */
                BlockMeta.prototype.block_size = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * BlockMeta header.
                 * @member {tendermint.types.IHeader|null|undefined} header
                 * @memberof tendermint.types.BlockMeta
                 * @instance
                 */
                BlockMeta.prototype.header = null;
    
                /**
                 * BlockMeta num_txs.
                 * @member {Long} num_txs
                 * @memberof tendermint.types.BlockMeta
                 * @instance
                 */
                BlockMeta.prototype.num_txs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified BlockMeta message. Does not implicitly {@link tendermint.types.BlockMeta.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.BlockMeta
                 * @static
                 * @param {tendermint.types.IBlockMeta} message BlockMeta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockMeta.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.block_id != null && Object.hasOwnProperty.call(message, "block_id"))
                        $root.tendermint.types.BlockID.encode(message.block_id, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.block_size != null && Object.hasOwnProperty.call(message, "block_size"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.block_size);
                    if (message.header != null && Object.hasOwnProperty.call(message, "header"))
                        $root.tendermint.types.Header.encode(message.header, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.num_txs != null && Object.hasOwnProperty.call(message, "num_txs"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.num_txs);
                    return writer;
                };
    
                /**
                 * Encodes the specified BlockMeta message, length delimited. Does not implicitly {@link tendermint.types.BlockMeta.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.BlockMeta
                 * @static
                 * @param {tendermint.types.IBlockMeta} message BlockMeta message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockMeta.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BlockMeta message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.BlockMeta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.BlockMeta} BlockMeta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockMeta.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockMeta();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.block_id = $root.tendermint.types.BlockID.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.block_size = reader.int64();
                            break;
                        case 3:
                            message.header = $root.tendermint.types.Header.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.num_txs = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BlockMeta message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.BlockMeta
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.BlockMeta} BlockMeta
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockMeta.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BlockMeta message.
                 * @function verify
                 * @memberof tendermint.types.BlockMeta
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BlockMeta.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.block_id != null && message.hasOwnProperty("block_id")) {
                        var error = $root.tendermint.types.BlockID.verify(message.block_id);
                        if (error)
                            return "block_id." + error;
                    }
                    if (message.block_size != null && message.hasOwnProperty("block_size"))
                        if (!$util.isInteger(message.block_size) && !(message.block_size && $util.isInteger(message.block_size.low) && $util.isInteger(message.block_size.high)))
                            return "block_size: integer|Long expected";
                    if (message.header != null && message.hasOwnProperty("header")) {
                        var error = $root.tendermint.types.Header.verify(message.header);
                        if (error)
                            return "header." + error;
                    }
                    if (message.num_txs != null && message.hasOwnProperty("num_txs"))
                        if (!$util.isInteger(message.num_txs) && !(message.num_txs && $util.isInteger(message.num_txs.low) && $util.isInteger(message.num_txs.high)))
                            return "num_txs: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a BlockMeta message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.BlockMeta
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.BlockMeta} BlockMeta
                 */
                BlockMeta.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.BlockMeta)
                        return object;
                    var message = new $root.tendermint.types.BlockMeta();
                    if (object.block_id != null) {
                        if (typeof object.block_id !== "object")
                            throw TypeError(".tendermint.types.BlockMeta.block_id: object expected");
                        message.block_id = $root.tendermint.types.BlockID.fromObject(object.block_id);
                    }
                    if (object.block_size != null)
                        if ($util.Long)
                            (message.block_size = $util.Long.fromValue(object.block_size)).unsigned = false;
                        else if (typeof object.block_size === "string")
                            message.block_size = parseInt(object.block_size, 10);
                        else if (typeof object.block_size === "number")
                            message.block_size = object.block_size;
                        else if (typeof object.block_size === "object")
                            message.block_size = new $util.LongBits(object.block_size.low >>> 0, object.block_size.high >>> 0).toNumber();
                    if (object.header != null) {
                        if (typeof object.header !== "object")
                            throw TypeError(".tendermint.types.BlockMeta.header: object expected");
                        message.header = $root.tendermint.types.Header.fromObject(object.header);
                    }
                    if (object.num_txs != null)
                        if ($util.Long)
                            (message.num_txs = $util.Long.fromValue(object.num_txs)).unsigned = false;
                        else if (typeof object.num_txs === "string")
                            message.num_txs = parseInt(object.num_txs, 10);
                        else if (typeof object.num_txs === "number")
                            message.num_txs = object.num_txs;
                        else if (typeof object.num_txs === "object")
                            message.num_txs = new $util.LongBits(object.num_txs.low >>> 0, object.num_txs.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a BlockMeta message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.BlockMeta
                 * @static
                 * @param {tendermint.types.BlockMeta} message BlockMeta
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BlockMeta.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.block_id = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.block_size = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block_size = options.longs === String ? "0" : 0;
                        object.header = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.num_txs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.num_txs = options.longs === String ? "0" : 0;
                    }
                    if (message.block_id != null && message.hasOwnProperty("block_id"))
                        object.block_id = $root.tendermint.types.BlockID.toObject(message.block_id, options);
                    if (message.block_size != null && message.hasOwnProperty("block_size"))
                        if (typeof message.block_size === "number")
                            object.block_size = options.longs === String ? String(message.block_size) : message.block_size;
                        else
                            object.block_size = options.longs === String ? $util.Long.prototype.toString.call(message.block_size) : options.longs === Number ? new $util.LongBits(message.block_size.low >>> 0, message.block_size.high >>> 0).toNumber() : message.block_size;
                    if (message.header != null && message.hasOwnProperty("header"))
                        object.header = $root.tendermint.types.Header.toObject(message.header, options);
                    if (message.num_txs != null && message.hasOwnProperty("num_txs"))
                        if (typeof message.num_txs === "number")
                            object.num_txs = options.longs === String ? String(message.num_txs) : message.num_txs;
                        else
                            object.num_txs = options.longs === String ? $util.Long.prototype.toString.call(message.num_txs) : options.longs === Number ? new $util.LongBits(message.num_txs.low >>> 0, message.num_txs.high >>> 0).toNumber() : message.num_txs;
                    return object;
                };
    
                /**
                 * Converts this BlockMeta to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.BlockMeta
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BlockMeta.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return BlockMeta;
            })();
    
            types.TxProof = (function() {
    
                /**
                 * Properties of a TxProof.
                 * @memberof tendermint.types
                 * @interface ITxProof
                 * @property {Uint8Array|null} [root_hash] TxProof root_hash
                 * @property {Uint8Array|null} [data] TxProof data
                 * @property {tendermint.crypto.IProof|null} [proof] TxProof proof
                 */
    
                /**
                 * Constructs a new TxProof.
                 * @memberof tendermint.types
                 * @classdesc Represents a TxProof.
                 * @implements ITxProof
                 * @constructor
                 * @param {tendermint.types.ITxProof=} [properties] Properties to set
                 */
                function TxProof(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * TxProof root_hash.
                 * @member {Uint8Array} root_hash
                 * @memberof tendermint.types.TxProof
                 * @instance
                 */
                TxProof.prototype.root_hash = $util.newBuffer([]);
    
                /**
                 * TxProof data.
                 * @member {Uint8Array} data
                 * @memberof tendermint.types.TxProof
                 * @instance
                 */
                TxProof.prototype.data = $util.newBuffer([]);
    
                /**
                 * TxProof proof.
                 * @member {tendermint.crypto.IProof|null|undefined} proof
                 * @memberof tendermint.types.TxProof
                 * @instance
                 */
                TxProof.prototype.proof = null;
    
                /**
                 * Encodes the specified TxProof message. Does not implicitly {@link tendermint.types.TxProof.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.TxProof
                 * @static
                 * @param {tendermint.types.ITxProof} message TxProof message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxProof.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.root_hash != null && Object.hasOwnProperty.call(message, "root_hash"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.root_hash);
                    if (message.data != null && Object.hasOwnProperty.call(message, "data"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.data);
                    if (message.proof != null && Object.hasOwnProperty.call(message, "proof"))
                        $root.tendermint.crypto.Proof.encode(message.proof, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified TxProof message, length delimited. Does not implicitly {@link tendermint.types.TxProof.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.TxProof
                 * @static
                 * @param {tendermint.types.ITxProof} message TxProof message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                TxProof.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a TxProof message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.TxProof
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.TxProof} TxProof
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxProof.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.TxProof();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.root_hash = reader.bytes();
                            break;
                        case 2:
                            message.data = reader.bytes();
                            break;
                        case 3:
                            message.proof = $root.tendermint.crypto.Proof.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a TxProof message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.TxProof
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.TxProof} TxProof
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                TxProof.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a TxProof message.
                 * @function verify
                 * @memberof tendermint.types.TxProof
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                TxProof.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.root_hash != null && message.hasOwnProperty("root_hash"))
                        if (!(message.root_hash && typeof message.root_hash.length === "number" || $util.isString(message.root_hash)))
                            return "root_hash: buffer expected";
                    if (message.data != null && message.hasOwnProperty("data"))
                        if (!(message.data && typeof message.data.length === "number" || $util.isString(message.data)))
                            return "data: buffer expected";
                    if (message.proof != null && message.hasOwnProperty("proof")) {
                        var error = $root.tendermint.crypto.Proof.verify(message.proof);
                        if (error)
                            return "proof." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a TxProof message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.TxProof
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.TxProof} TxProof
                 */
                TxProof.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.TxProof)
                        return object;
                    var message = new $root.tendermint.types.TxProof();
                    if (object.root_hash != null)
                        if (typeof object.root_hash === "string")
                            $util.base64.decode(object.root_hash, message.root_hash = $util.newBuffer($util.base64.length(object.root_hash)), 0);
                        else if (object.root_hash.length)
                            message.root_hash = object.root_hash;
                    if (object.data != null)
                        if (typeof object.data === "string")
                            $util.base64.decode(object.data, message.data = $util.newBuffer($util.base64.length(object.data)), 0);
                        else if (object.data.length)
                            message.data = object.data;
                    if (object.proof != null) {
                        if (typeof object.proof !== "object")
                            throw TypeError(".tendermint.types.TxProof.proof: object expected");
                        message.proof = $root.tendermint.crypto.Proof.fromObject(object.proof);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a TxProof message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.TxProof
                 * @static
                 * @param {tendermint.types.TxProof} message TxProof
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                TxProof.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.root_hash = "";
                        else {
                            object.root_hash = [];
                            if (options.bytes !== Array)
                                object.root_hash = $util.newBuffer(object.root_hash);
                        }
                        if (options.bytes === String)
                            object.data = "";
                        else {
                            object.data = [];
                            if (options.bytes !== Array)
                                object.data = $util.newBuffer(object.data);
                        }
                        object.proof = null;
                    }
                    if (message.root_hash != null && message.hasOwnProperty("root_hash"))
                        object.root_hash = options.bytes === String ? $util.base64.encode(message.root_hash, 0, message.root_hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.root_hash) : message.root_hash;
                    if (message.data != null && message.hasOwnProperty("data"))
                        object.data = options.bytes === String ? $util.base64.encode(message.data, 0, message.data.length) : options.bytes === Array ? Array.prototype.slice.call(message.data) : message.data;
                    if (message.proof != null && message.hasOwnProperty("proof"))
                        object.proof = $root.tendermint.crypto.Proof.toObject(message.proof, options);
                    return object;
                };
    
                /**
                 * Converts this TxProof to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.TxProof
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                TxProof.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return TxProof;
            })();
    
            types.ValidatorSet = (function() {
    
                /**
                 * Properties of a ValidatorSet.
                 * @memberof tendermint.types
                 * @interface IValidatorSet
                 * @property {Array.<tendermint.types.IValidator>|null} [validators] ValidatorSet validators
                 * @property {tendermint.types.IValidator|null} [proposer] ValidatorSet proposer
                 * @property {Long|null} [total_voting_power] ValidatorSet total_voting_power
                 */
    
                /**
                 * Constructs a new ValidatorSet.
                 * @memberof tendermint.types
                 * @classdesc Represents a ValidatorSet.
                 * @implements IValidatorSet
                 * @constructor
                 * @param {tendermint.types.IValidatorSet=} [properties] Properties to set
                 */
                function ValidatorSet(properties) {
                    this.validators = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ValidatorSet validators.
                 * @member {Array.<tendermint.types.IValidator>} validators
                 * @memberof tendermint.types.ValidatorSet
                 * @instance
                 */
                ValidatorSet.prototype.validators = $util.emptyArray;
    
                /**
                 * ValidatorSet proposer.
                 * @member {tendermint.types.IValidator|null|undefined} proposer
                 * @memberof tendermint.types.ValidatorSet
                 * @instance
                 */
                ValidatorSet.prototype.proposer = null;
    
                /**
                 * ValidatorSet total_voting_power.
                 * @member {Long} total_voting_power
                 * @memberof tendermint.types.ValidatorSet
                 * @instance
                 */
                ValidatorSet.prototype.total_voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified ValidatorSet message. Does not implicitly {@link tendermint.types.ValidatorSet.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.ValidatorSet
                 * @static
                 * @param {tendermint.types.IValidatorSet} message ValidatorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.validators != null && message.validators.length)
                        for (var i = 0; i < message.validators.length; ++i)
                            $root.tendermint.types.Validator.encode(message.validators[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.proposer != null && Object.hasOwnProperty.call(message, "proposer"))
                        $root.tendermint.types.Validator.encode(message.proposer, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.total_voting_power != null && Object.hasOwnProperty.call(message, "total_voting_power"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.total_voting_power);
                    return writer;
                };
    
                /**
                 * Encodes the specified ValidatorSet message, length delimited. Does not implicitly {@link tendermint.types.ValidatorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.ValidatorSet
                 * @static
                 * @param {tendermint.types.IValidatorSet} message ValidatorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ValidatorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.ValidatorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.ValidatorSet} ValidatorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ValidatorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.validators && message.validators.length))
                                message.validators = [];
                            message.validators.push($root.tendermint.types.Validator.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.proposer = $root.tendermint.types.Validator.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.total_voting_power = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ValidatorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.ValidatorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.ValidatorSet} ValidatorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ValidatorSet message.
                 * @function verify
                 * @memberof tendermint.types.ValidatorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValidatorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.validators != null && message.hasOwnProperty("validators")) {
                        if (!Array.isArray(message.validators))
                            return "validators: array expected";
                        for (var i = 0; i < message.validators.length; ++i) {
                            var error = $root.tendermint.types.Validator.verify(message.validators[i]);
                            if (error)
                                return "validators." + error;
                        }
                    }
                    if (message.proposer != null && message.hasOwnProperty("proposer")) {
                        var error = $root.tendermint.types.Validator.verify(message.proposer);
                        if (error)
                            return "proposer." + error;
                    }
                    if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                        if (!$util.isInteger(message.total_voting_power) && !(message.total_voting_power && $util.isInteger(message.total_voting_power.low) && $util.isInteger(message.total_voting_power.high)))
                            return "total_voting_power: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a ValidatorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.ValidatorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.ValidatorSet} ValidatorSet
                 */
                ValidatorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.ValidatorSet)
                        return object;
                    var message = new $root.tendermint.types.ValidatorSet();
                    if (object.validators) {
                        if (!Array.isArray(object.validators))
                            throw TypeError(".tendermint.types.ValidatorSet.validators: array expected");
                        message.validators = [];
                        for (var i = 0; i < object.validators.length; ++i) {
                            if (typeof object.validators[i] !== "object")
                                throw TypeError(".tendermint.types.ValidatorSet.validators: object expected");
                            message.validators[i] = $root.tendermint.types.Validator.fromObject(object.validators[i]);
                        }
                    }
                    if (object.proposer != null) {
                        if (typeof object.proposer !== "object")
                            throw TypeError(".tendermint.types.ValidatorSet.proposer: object expected");
                        message.proposer = $root.tendermint.types.Validator.fromObject(object.proposer);
                    }
                    if (object.total_voting_power != null)
                        if ($util.Long)
                            (message.total_voting_power = $util.Long.fromValue(object.total_voting_power)).unsigned = false;
                        else if (typeof object.total_voting_power === "string")
                            message.total_voting_power = parseInt(object.total_voting_power, 10);
                        else if (typeof object.total_voting_power === "number")
                            message.total_voting_power = object.total_voting_power;
                        else if (typeof object.total_voting_power === "object")
                            message.total_voting_power = new $util.LongBits(object.total_voting_power.low >>> 0, object.total_voting_power.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a ValidatorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.ValidatorSet
                 * @static
                 * @param {tendermint.types.ValidatorSet} message ValidatorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValidatorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.validators = [];
                    if (options.defaults) {
                        object.proposer = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.total_voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.total_voting_power = options.longs === String ? "0" : 0;
                    }
                    if (message.validators && message.validators.length) {
                        object.validators = [];
                        for (var j = 0; j < message.validators.length; ++j)
                            object.validators[j] = $root.tendermint.types.Validator.toObject(message.validators[j], options);
                    }
                    if (message.proposer != null && message.hasOwnProperty("proposer"))
                        object.proposer = $root.tendermint.types.Validator.toObject(message.proposer, options);
                    if (message.total_voting_power != null && message.hasOwnProperty("total_voting_power"))
                        if (typeof message.total_voting_power === "number")
                            object.total_voting_power = options.longs === String ? String(message.total_voting_power) : message.total_voting_power;
                        else
                            object.total_voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.total_voting_power) : options.longs === Number ? new $util.LongBits(message.total_voting_power.low >>> 0, message.total_voting_power.high >>> 0).toNumber() : message.total_voting_power;
                    return object;
                };
    
                /**
                 * Converts this ValidatorSet to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.ValidatorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValidatorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ValidatorSet;
            })();
    
            types.Validator = (function() {
    
                /**
                 * Properties of a Validator.
                 * @memberof tendermint.types
                 * @interface IValidator
                 * @property {Uint8Array|null} [address] Validator address
                 * @property {tendermint.crypto.IPublicKey|null} [pub_key] Validator pub_key
                 * @property {Long|null} [voting_power] Validator voting_power
                 * @property {Long|null} [proposer_priority] Validator proposer_priority
                 */
    
                /**
                 * Constructs a new Validator.
                 * @memberof tendermint.types
                 * @classdesc Represents a Validator.
                 * @implements IValidator
                 * @constructor
                 * @param {tendermint.types.IValidator=} [properties] Properties to set
                 */
                function Validator(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Validator address.
                 * @member {Uint8Array} address
                 * @memberof tendermint.types.Validator
                 * @instance
                 */
                Validator.prototype.address = $util.newBuffer([]);
    
                /**
                 * Validator pub_key.
                 * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
                 * @memberof tendermint.types.Validator
                 * @instance
                 */
                Validator.prototype.pub_key = null;
    
                /**
                 * Validator voting_power.
                 * @member {Long} voting_power
                 * @memberof tendermint.types.Validator
                 * @instance
                 */
                Validator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Validator proposer_priority.
                 * @member {Long} proposer_priority
                 * @memberof tendermint.types.Validator
                 * @instance
                 */
                Validator.prototype.proposer_priority = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified Validator message. Does not implicitly {@link tendermint.types.Validator.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.Validator
                 * @static
                 * @param {tendermint.types.IValidator} message Validator message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Validator.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.address != null && Object.hasOwnProperty.call(message, "address"))
                        writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.address);
                    if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                        $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.voting_power != null && Object.hasOwnProperty.call(message, "voting_power"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.voting_power);
                    if (message.proposer_priority != null && Object.hasOwnProperty.call(message, "proposer_priority"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int64(message.proposer_priority);
                    return writer;
                };
    
                /**
                 * Encodes the specified Validator message, length delimited. Does not implicitly {@link tendermint.types.Validator.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.Validator
                 * @static
                 * @param {tendermint.types.IValidator} message Validator message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Validator.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Validator message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.Validator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.Validator} Validator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Validator.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.Validator();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.address = reader.bytes();
                            break;
                        case 2:
                            message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.voting_power = reader.int64();
                            break;
                        case 4:
                            message.proposer_priority = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Validator message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.Validator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.Validator} Validator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Validator.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Validator message.
                 * @function verify
                 * @memberof tendermint.types.Validator
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Validator.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.address != null && message.hasOwnProperty("address"))
                        if (!(message.address && typeof message.address.length === "number" || $util.isString(message.address)))
                            return "address: buffer expected";
                    if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                        var error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                        if (error)
                            return "pub_key." + error;
                    }
                    if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                        if (!$util.isInteger(message.voting_power) && !(message.voting_power && $util.isInteger(message.voting_power.low) && $util.isInteger(message.voting_power.high)))
                            return "voting_power: integer|Long expected";
                    if (message.proposer_priority != null && message.hasOwnProperty("proposer_priority"))
                        if (!$util.isInteger(message.proposer_priority) && !(message.proposer_priority && $util.isInteger(message.proposer_priority.low) && $util.isInteger(message.proposer_priority.high)))
                            return "proposer_priority: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a Validator message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.Validator
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.Validator} Validator
                 */
                Validator.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.Validator)
                        return object;
                    var message = new $root.tendermint.types.Validator();
                    if (object.address != null)
                        if (typeof object.address === "string")
                            $util.base64.decode(object.address, message.address = $util.newBuffer($util.base64.length(object.address)), 0);
                        else if (object.address.length)
                            message.address = object.address;
                    if (object.pub_key != null) {
                        if (typeof object.pub_key !== "object")
                            throw TypeError(".tendermint.types.Validator.pub_key: object expected");
                        message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                    }
                    if (object.voting_power != null)
                        if ($util.Long)
                            (message.voting_power = $util.Long.fromValue(object.voting_power)).unsigned = false;
                        else if (typeof object.voting_power === "string")
                            message.voting_power = parseInt(object.voting_power, 10);
                        else if (typeof object.voting_power === "number")
                            message.voting_power = object.voting_power;
                        else if (typeof object.voting_power === "object")
                            message.voting_power = new $util.LongBits(object.voting_power.low >>> 0, object.voting_power.high >>> 0).toNumber();
                    if (object.proposer_priority != null)
                        if ($util.Long)
                            (message.proposer_priority = $util.Long.fromValue(object.proposer_priority)).unsigned = false;
                        else if (typeof object.proposer_priority === "string")
                            message.proposer_priority = parseInt(object.proposer_priority, 10);
                        else if (typeof object.proposer_priority === "number")
                            message.proposer_priority = object.proposer_priority;
                        else if (typeof object.proposer_priority === "object")
                            message.proposer_priority = new $util.LongBits(object.proposer_priority.low >>> 0, object.proposer_priority.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a Validator message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.Validator
                 * @static
                 * @param {tendermint.types.Validator} message Validator
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Validator.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if (options.bytes === String)
                            object.address = "";
                        else {
                            object.address = [];
                            if (options.bytes !== Array)
                                object.address = $util.newBuffer(object.address);
                        }
                        object.pub_key = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.voting_power = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.proposer_priority = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.proposer_priority = options.longs === String ? "0" : 0;
                    }
                    if (message.address != null && message.hasOwnProperty("address"))
                        object.address = options.bytes === String ? $util.base64.encode(message.address, 0, message.address.length) : options.bytes === Array ? Array.prototype.slice.call(message.address) : message.address;
                    if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                        object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                    if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                        if (typeof message.voting_power === "number")
                            object.voting_power = options.longs === String ? String(message.voting_power) : message.voting_power;
                        else
                            object.voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.voting_power) : options.longs === Number ? new $util.LongBits(message.voting_power.low >>> 0, message.voting_power.high >>> 0).toNumber() : message.voting_power;
                    if (message.proposer_priority != null && message.hasOwnProperty("proposer_priority"))
                        if (typeof message.proposer_priority === "number")
                            object.proposer_priority = options.longs === String ? String(message.proposer_priority) : message.proposer_priority;
                        else
                            object.proposer_priority = options.longs === String ? $util.Long.prototype.toString.call(message.proposer_priority) : options.longs === Number ? new $util.LongBits(message.proposer_priority.low >>> 0, message.proposer_priority.high >>> 0).toNumber() : message.proposer_priority;
                    return object;
                };
    
                /**
                 * Converts this Validator to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.Validator
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Validator.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Validator;
            })();
    
            types.SimpleValidator = (function() {
    
                /**
                 * Properties of a SimpleValidator.
                 * @memberof tendermint.types
                 * @interface ISimpleValidator
                 * @property {tendermint.crypto.IPublicKey|null} [pub_key] SimpleValidator pub_key
                 * @property {Long|null} [voting_power] SimpleValidator voting_power
                 */
    
                /**
                 * Constructs a new SimpleValidator.
                 * @memberof tendermint.types
                 * @classdesc Represents a SimpleValidator.
                 * @implements ISimpleValidator
                 * @constructor
                 * @param {tendermint.types.ISimpleValidator=} [properties] Properties to set
                 */
                function SimpleValidator(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SimpleValidator pub_key.
                 * @member {tendermint.crypto.IPublicKey|null|undefined} pub_key
                 * @memberof tendermint.types.SimpleValidator
                 * @instance
                 */
                SimpleValidator.prototype.pub_key = null;
    
                /**
                 * SimpleValidator voting_power.
                 * @member {Long} voting_power
                 * @memberof tendermint.types.SimpleValidator
                 * @instance
                 */
                SimpleValidator.prototype.voting_power = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified SimpleValidator message. Does not implicitly {@link tendermint.types.SimpleValidator.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.SimpleValidator
                 * @static
                 * @param {tendermint.types.ISimpleValidator} message SimpleValidator message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SimpleValidator.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pub_key != null && Object.hasOwnProperty.call(message, "pub_key"))
                        $root.tendermint.crypto.PublicKey.encode(message.pub_key, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.voting_power != null && Object.hasOwnProperty.call(message, "voting_power"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.voting_power);
                    return writer;
                };
    
                /**
                 * Encodes the specified SimpleValidator message, length delimited. Does not implicitly {@link tendermint.types.SimpleValidator.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.SimpleValidator
                 * @static
                 * @param {tendermint.types.ISimpleValidator} message SimpleValidator message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SimpleValidator.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SimpleValidator message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.SimpleValidator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.SimpleValidator} SimpleValidator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SimpleValidator.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.SimpleValidator();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.pub_key = $root.tendermint.crypto.PublicKey.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.voting_power = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SimpleValidator message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.SimpleValidator
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.SimpleValidator} SimpleValidator
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SimpleValidator.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SimpleValidator message.
                 * @function verify
                 * @memberof tendermint.types.SimpleValidator
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SimpleValidator.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pub_key != null && message.hasOwnProperty("pub_key")) {
                        var error = $root.tendermint.crypto.PublicKey.verify(message.pub_key);
                        if (error)
                            return "pub_key." + error;
                    }
                    if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                        if (!$util.isInteger(message.voting_power) && !(message.voting_power && $util.isInteger(message.voting_power.low) && $util.isInteger(message.voting_power.high)))
                            return "voting_power: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a SimpleValidator message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.SimpleValidator
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.SimpleValidator} SimpleValidator
                 */
                SimpleValidator.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.SimpleValidator)
                        return object;
                    var message = new $root.tendermint.types.SimpleValidator();
                    if (object.pub_key != null) {
                        if (typeof object.pub_key !== "object")
                            throw TypeError(".tendermint.types.SimpleValidator.pub_key: object expected");
                        message.pub_key = $root.tendermint.crypto.PublicKey.fromObject(object.pub_key);
                    }
                    if (object.voting_power != null)
                        if ($util.Long)
                            (message.voting_power = $util.Long.fromValue(object.voting_power)).unsigned = false;
                        else if (typeof object.voting_power === "string")
                            message.voting_power = parseInt(object.voting_power, 10);
                        else if (typeof object.voting_power === "number")
                            message.voting_power = object.voting_power;
                        else if (typeof object.voting_power === "object")
                            message.voting_power = new $util.LongBits(object.voting_power.low >>> 0, object.voting_power.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a SimpleValidator message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.SimpleValidator
                 * @static
                 * @param {tendermint.types.SimpleValidator} message SimpleValidator
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SimpleValidator.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.pub_key = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.voting_power = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.voting_power = options.longs === String ? "0" : 0;
                    }
                    if (message.pub_key != null && message.hasOwnProperty("pub_key"))
                        object.pub_key = $root.tendermint.crypto.PublicKey.toObject(message.pub_key, options);
                    if (message.voting_power != null && message.hasOwnProperty("voting_power"))
                        if (typeof message.voting_power === "number")
                            object.voting_power = options.longs === String ? String(message.voting_power) : message.voting_power;
                        else
                            object.voting_power = options.longs === String ? $util.Long.prototype.toString.call(message.voting_power) : options.longs === Number ? new $util.LongBits(message.voting_power.low >>> 0, message.voting_power.high >>> 0).toNumber() : message.voting_power;
                    return object;
                };
    
                /**
                 * Converts this SimpleValidator to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.SimpleValidator
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SimpleValidator.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return SimpleValidator;
            })();
    
            types.ConsensusParams = (function() {
    
                /**
                 * Properties of a ConsensusParams.
                 * @memberof tendermint.types
                 * @interface IConsensusParams
                 * @property {tendermint.types.IBlockParams|null} [block] ConsensusParams block
                 * @property {tendermint.types.IEvidenceParams|null} [evidence] ConsensusParams evidence
                 * @property {tendermint.types.IValidatorParams|null} [validator] ConsensusParams validator
                 * @property {tendermint.types.IVersionParams|null} [version] ConsensusParams version
                 */
    
                /**
                 * Constructs a new ConsensusParams.
                 * @memberof tendermint.types
                 * @classdesc Represents a ConsensusParams.
                 * @implements IConsensusParams
                 * @constructor
                 * @param {tendermint.types.IConsensusParams=} [properties] Properties to set
                 */
                function ConsensusParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ConsensusParams block.
                 * @member {tendermint.types.IBlockParams|null|undefined} block
                 * @memberof tendermint.types.ConsensusParams
                 * @instance
                 */
                ConsensusParams.prototype.block = null;
    
                /**
                 * ConsensusParams evidence.
                 * @member {tendermint.types.IEvidenceParams|null|undefined} evidence
                 * @memberof tendermint.types.ConsensusParams
                 * @instance
                 */
                ConsensusParams.prototype.evidence = null;
    
                /**
                 * ConsensusParams validator.
                 * @member {tendermint.types.IValidatorParams|null|undefined} validator
                 * @memberof tendermint.types.ConsensusParams
                 * @instance
                 */
                ConsensusParams.prototype.validator = null;
    
                /**
                 * ConsensusParams version.
                 * @member {tendermint.types.IVersionParams|null|undefined} version
                 * @memberof tendermint.types.ConsensusParams
                 * @instance
                 */
                ConsensusParams.prototype.version = null;
    
                /**
                 * Encodes the specified ConsensusParams message. Does not implicitly {@link tendermint.types.ConsensusParams.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.ConsensusParams
                 * @static
                 * @param {tendermint.types.IConsensusParams} message ConsensusParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ConsensusParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                        $root.tendermint.types.BlockParams.encode(message.block, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.evidence != null && Object.hasOwnProperty.call(message, "evidence"))
                        $root.tendermint.types.EvidenceParams.encode(message.evidence, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.validator != null && Object.hasOwnProperty.call(message, "validator"))
                        $root.tendermint.types.ValidatorParams.encode(message.validator, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                        $root.tendermint.types.VersionParams.encode(message.version, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ConsensusParams message, length delimited. Does not implicitly {@link tendermint.types.ConsensusParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.ConsensusParams
                 * @static
                 * @param {tendermint.types.IConsensusParams} message ConsensusParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ConsensusParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ConsensusParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.ConsensusParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.ConsensusParams} ConsensusParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ConsensusParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ConsensusParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.block = $root.tendermint.types.BlockParams.decode(reader, reader.uint32());
                            break;
                        case 2:
                            message.evidence = $root.tendermint.types.EvidenceParams.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.validator = $root.tendermint.types.ValidatorParams.decode(reader, reader.uint32());
                            break;
                        case 4:
                            message.version = $root.tendermint.types.VersionParams.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ConsensusParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.ConsensusParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.ConsensusParams} ConsensusParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ConsensusParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ConsensusParams message.
                 * @function verify
                 * @memberof tendermint.types.ConsensusParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ConsensusParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.block != null && message.hasOwnProperty("block")) {
                        var error = $root.tendermint.types.BlockParams.verify(message.block);
                        if (error)
                            return "block." + error;
                    }
                    if (message.evidence != null && message.hasOwnProperty("evidence")) {
                        var error = $root.tendermint.types.EvidenceParams.verify(message.evidence);
                        if (error)
                            return "evidence." + error;
                    }
                    if (message.validator != null && message.hasOwnProperty("validator")) {
                        var error = $root.tendermint.types.ValidatorParams.verify(message.validator);
                        if (error)
                            return "validator." + error;
                    }
                    if (message.version != null && message.hasOwnProperty("version")) {
                        var error = $root.tendermint.types.VersionParams.verify(message.version);
                        if (error)
                            return "version." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ConsensusParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.ConsensusParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.ConsensusParams} ConsensusParams
                 */
                ConsensusParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.ConsensusParams)
                        return object;
                    var message = new $root.tendermint.types.ConsensusParams();
                    if (object.block != null) {
                        if (typeof object.block !== "object")
                            throw TypeError(".tendermint.types.ConsensusParams.block: object expected");
                        message.block = $root.tendermint.types.BlockParams.fromObject(object.block);
                    }
                    if (object.evidence != null) {
                        if (typeof object.evidence !== "object")
                            throw TypeError(".tendermint.types.ConsensusParams.evidence: object expected");
                        message.evidence = $root.tendermint.types.EvidenceParams.fromObject(object.evidence);
                    }
                    if (object.validator != null) {
                        if (typeof object.validator !== "object")
                            throw TypeError(".tendermint.types.ConsensusParams.validator: object expected");
                        message.validator = $root.tendermint.types.ValidatorParams.fromObject(object.validator);
                    }
                    if (object.version != null) {
                        if (typeof object.version !== "object")
                            throw TypeError(".tendermint.types.ConsensusParams.version: object expected");
                        message.version = $root.tendermint.types.VersionParams.fromObject(object.version);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ConsensusParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.ConsensusParams
                 * @static
                 * @param {tendermint.types.ConsensusParams} message ConsensusParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ConsensusParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.block = null;
                        object.evidence = null;
                        object.validator = null;
                        object.version = null;
                    }
                    if (message.block != null && message.hasOwnProperty("block"))
                        object.block = $root.tendermint.types.BlockParams.toObject(message.block, options);
                    if (message.evidence != null && message.hasOwnProperty("evidence"))
                        object.evidence = $root.tendermint.types.EvidenceParams.toObject(message.evidence, options);
                    if (message.validator != null && message.hasOwnProperty("validator"))
                        object.validator = $root.tendermint.types.ValidatorParams.toObject(message.validator, options);
                    if (message.version != null && message.hasOwnProperty("version"))
                        object.version = $root.tendermint.types.VersionParams.toObject(message.version, options);
                    return object;
                };
    
                /**
                 * Converts this ConsensusParams to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.ConsensusParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ConsensusParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ConsensusParams;
            })();
    
            types.BlockParams = (function() {
    
                /**
                 * Properties of a BlockParams.
                 * @memberof tendermint.types
                 * @interface IBlockParams
                 * @property {Long|null} [max_bytes] BlockParams max_bytes
                 * @property {Long|null} [max_gas] BlockParams max_gas
                 * @property {Long|null} [time_iota_ms] BlockParams time_iota_ms
                 */
    
                /**
                 * Constructs a new BlockParams.
                 * @memberof tendermint.types
                 * @classdesc Represents a BlockParams.
                 * @implements IBlockParams
                 * @constructor
                 * @param {tendermint.types.IBlockParams=} [properties] Properties to set
                 */
                function BlockParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * BlockParams max_bytes.
                 * @member {Long} max_bytes
                 * @memberof tendermint.types.BlockParams
                 * @instance
                 */
                BlockParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * BlockParams max_gas.
                 * @member {Long} max_gas
                 * @memberof tendermint.types.BlockParams
                 * @instance
                 */
                BlockParams.prototype.max_gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * BlockParams time_iota_ms.
                 * @member {Long} time_iota_ms
                 * @memberof tendermint.types.BlockParams
                 * @instance
                 */
                BlockParams.prototype.time_iota_ms = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified BlockParams message. Does not implicitly {@link tendermint.types.BlockParams.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.BlockParams
                 * @static
                 * @param {tendermint.types.IBlockParams} message BlockParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.max_bytes != null && Object.hasOwnProperty.call(message, "max_bytes"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.max_bytes);
                    if (message.max_gas != null && Object.hasOwnProperty.call(message, "max_gas"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.max_gas);
                    if (message.time_iota_ms != null && Object.hasOwnProperty.call(message, "time_iota_ms"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.time_iota_ms);
                    return writer;
                };
    
                /**
                 * Encodes the specified BlockParams message, length delimited. Does not implicitly {@link tendermint.types.BlockParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.BlockParams
                 * @static
                 * @param {tendermint.types.IBlockParams} message BlockParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                BlockParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a BlockParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.BlockParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.BlockParams} BlockParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.BlockParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.max_bytes = reader.int64();
                            break;
                        case 2:
                            message.max_gas = reader.int64();
                            break;
                        case 3:
                            message.time_iota_ms = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a BlockParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.BlockParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.BlockParams} BlockParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                BlockParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a BlockParams message.
                 * @function verify
                 * @memberof tendermint.types.BlockParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                BlockParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                        if (!$util.isInteger(message.max_bytes) && !(message.max_bytes && $util.isInteger(message.max_bytes.low) && $util.isInteger(message.max_bytes.high)))
                            return "max_bytes: integer|Long expected";
                    if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                        if (!$util.isInteger(message.max_gas) && !(message.max_gas && $util.isInteger(message.max_gas.low) && $util.isInteger(message.max_gas.high)))
                            return "max_gas: integer|Long expected";
                    if (message.time_iota_ms != null && message.hasOwnProperty("time_iota_ms"))
                        if (!$util.isInteger(message.time_iota_ms) && !(message.time_iota_ms && $util.isInteger(message.time_iota_ms.low) && $util.isInteger(message.time_iota_ms.high)))
                            return "time_iota_ms: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a BlockParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.BlockParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.BlockParams} BlockParams
                 */
                BlockParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.BlockParams)
                        return object;
                    var message = new $root.tendermint.types.BlockParams();
                    if (object.max_bytes != null)
                        if ($util.Long)
                            (message.max_bytes = $util.Long.fromValue(object.max_bytes)).unsigned = false;
                        else if (typeof object.max_bytes === "string")
                            message.max_bytes = parseInt(object.max_bytes, 10);
                        else if (typeof object.max_bytes === "number")
                            message.max_bytes = object.max_bytes;
                        else if (typeof object.max_bytes === "object")
                            message.max_bytes = new $util.LongBits(object.max_bytes.low >>> 0, object.max_bytes.high >>> 0).toNumber();
                    if (object.max_gas != null)
                        if ($util.Long)
                            (message.max_gas = $util.Long.fromValue(object.max_gas)).unsigned = false;
                        else if (typeof object.max_gas === "string")
                            message.max_gas = parseInt(object.max_gas, 10);
                        else if (typeof object.max_gas === "number")
                            message.max_gas = object.max_gas;
                        else if (typeof object.max_gas === "object")
                            message.max_gas = new $util.LongBits(object.max_gas.low >>> 0, object.max_gas.high >>> 0).toNumber();
                    if (object.time_iota_ms != null)
                        if ($util.Long)
                            (message.time_iota_ms = $util.Long.fromValue(object.time_iota_ms)).unsigned = false;
                        else if (typeof object.time_iota_ms === "string")
                            message.time_iota_ms = parseInt(object.time_iota_ms, 10);
                        else if (typeof object.time_iota_ms === "number")
                            message.time_iota_ms = object.time_iota_ms;
                        else if (typeof object.time_iota_ms === "object")
                            message.time_iota_ms = new $util.LongBits(object.time_iota_ms.low >>> 0, object.time_iota_ms.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a BlockParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.BlockParams
                 * @static
                 * @param {tendermint.types.BlockParams} message BlockParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                BlockParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_bytes = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.max_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_gas = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.time_iota_ms = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.time_iota_ms = options.longs === String ? "0" : 0;
                    }
                    if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                        if (typeof message.max_bytes === "number")
                            object.max_bytes = options.longs === String ? String(message.max_bytes) : message.max_bytes;
                        else
                            object.max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.max_bytes) : options.longs === Number ? new $util.LongBits(message.max_bytes.low >>> 0, message.max_bytes.high >>> 0).toNumber() : message.max_bytes;
                    if (message.max_gas != null && message.hasOwnProperty("max_gas"))
                        if (typeof message.max_gas === "number")
                            object.max_gas = options.longs === String ? String(message.max_gas) : message.max_gas;
                        else
                            object.max_gas = options.longs === String ? $util.Long.prototype.toString.call(message.max_gas) : options.longs === Number ? new $util.LongBits(message.max_gas.low >>> 0, message.max_gas.high >>> 0).toNumber() : message.max_gas;
                    if (message.time_iota_ms != null && message.hasOwnProperty("time_iota_ms"))
                        if (typeof message.time_iota_ms === "number")
                            object.time_iota_ms = options.longs === String ? String(message.time_iota_ms) : message.time_iota_ms;
                        else
                            object.time_iota_ms = options.longs === String ? $util.Long.prototype.toString.call(message.time_iota_ms) : options.longs === Number ? new $util.LongBits(message.time_iota_ms.low >>> 0, message.time_iota_ms.high >>> 0).toNumber() : message.time_iota_ms;
                    return object;
                };
    
                /**
                 * Converts this BlockParams to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.BlockParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                BlockParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return BlockParams;
            })();
    
            types.EvidenceParams = (function() {
    
                /**
                 * Properties of an EvidenceParams.
                 * @memberof tendermint.types
                 * @interface IEvidenceParams
                 * @property {Long|null} [max_age_num_blocks] EvidenceParams max_age_num_blocks
                 * @property {google.protobuf.IDuration|null} [max_age_duration] EvidenceParams max_age_duration
                 * @property {Long|null} [max_bytes] EvidenceParams max_bytes
                 */
    
                /**
                 * Constructs a new EvidenceParams.
                 * @memberof tendermint.types
                 * @classdesc Represents an EvidenceParams.
                 * @implements IEvidenceParams
                 * @constructor
                 * @param {tendermint.types.IEvidenceParams=} [properties] Properties to set
                 */
                function EvidenceParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EvidenceParams max_age_num_blocks.
                 * @member {Long} max_age_num_blocks
                 * @memberof tendermint.types.EvidenceParams
                 * @instance
                 */
                EvidenceParams.prototype.max_age_num_blocks = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * EvidenceParams max_age_duration.
                 * @member {google.protobuf.IDuration|null|undefined} max_age_duration
                 * @memberof tendermint.types.EvidenceParams
                 * @instance
                 */
                EvidenceParams.prototype.max_age_duration = null;
    
                /**
                 * EvidenceParams max_bytes.
                 * @member {Long} max_bytes
                 * @memberof tendermint.types.EvidenceParams
                 * @instance
                 */
                EvidenceParams.prototype.max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified EvidenceParams message. Does not implicitly {@link tendermint.types.EvidenceParams.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.EvidenceParams
                 * @static
                 * @param {tendermint.types.IEvidenceParams} message EvidenceParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EvidenceParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.max_age_num_blocks != null && Object.hasOwnProperty.call(message, "max_age_num_blocks"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.max_age_num_blocks);
                    if (message.max_age_duration != null && Object.hasOwnProperty.call(message, "max_age_duration"))
                        $root.google.protobuf.Duration.encode(message.max_age_duration, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.max_bytes != null && Object.hasOwnProperty.call(message, "max_bytes"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int64(message.max_bytes);
                    return writer;
                };
    
                /**
                 * Encodes the specified EvidenceParams message, length delimited. Does not implicitly {@link tendermint.types.EvidenceParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.EvidenceParams
                 * @static
                 * @param {tendermint.types.IEvidenceParams} message EvidenceParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EvidenceParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EvidenceParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.EvidenceParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.EvidenceParams} EvidenceParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EvidenceParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.EvidenceParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.max_age_num_blocks = reader.int64();
                            break;
                        case 2:
                            message.max_age_duration = $root.google.protobuf.Duration.decode(reader, reader.uint32());
                            break;
                        case 3:
                            message.max_bytes = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EvidenceParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.EvidenceParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.EvidenceParams} EvidenceParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EvidenceParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EvidenceParams message.
                 * @function verify
                 * @memberof tendermint.types.EvidenceParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EvidenceParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.max_age_num_blocks != null && message.hasOwnProperty("max_age_num_blocks"))
                        if (!$util.isInteger(message.max_age_num_blocks) && !(message.max_age_num_blocks && $util.isInteger(message.max_age_num_blocks.low) && $util.isInteger(message.max_age_num_blocks.high)))
                            return "max_age_num_blocks: integer|Long expected";
                    if (message.max_age_duration != null && message.hasOwnProperty("max_age_duration")) {
                        var error = $root.google.protobuf.Duration.verify(message.max_age_duration);
                        if (error)
                            return "max_age_duration." + error;
                    }
                    if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                        if (!$util.isInteger(message.max_bytes) && !(message.max_bytes && $util.isInteger(message.max_bytes.low) && $util.isInteger(message.max_bytes.high)))
                            return "max_bytes: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates an EvidenceParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.EvidenceParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.EvidenceParams} EvidenceParams
                 */
                EvidenceParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.EvidenceParams)
                        return object;
                    var message = new $root.tendermint.types.EvidenceParams();
                    if (object.max_age_num_blocks != null)
                        if ($util.Long)
                            (message.max_age_num_blocks = $util.Long.fromValue(object.max_age_num_blocks)).unsigned = false;
                        else if (typeof object.max_age_num_blocks === "string")
                            message.max_age_num_blocks = parseInt(object.max_age_num_blocks, 10);
                        else if (typeof object.max_age_num_blocks === "number")
                            message.max_age_num_blocks = object.max_age_num_blocks;
                        else if (typeof object.max_age_num_blocks === "object")
                            message.max_age_num_blocks = new $util.LongBits(object.max_age_num_blocks.low >>> 0, object.max_age_num_blocks.high >>> 0).toNumber();
                    if (object.max_age_duration != null) {
                        if (typeof object.max_age_duration !== "object")
                            throw TypeError(".tendermint.types.EvidenceParams.max_age_duration: object expected");
                        message.max_age_duration = $root.google.protobuf.Duration.fromObject(object.max_age_duration);
                    }
                    if (object.max_bytes != null)
                        if ($util.Long)
                            (message.max_bytes = $util.Long.fromValue(object.max_bytes)).unsigned = false;
                        else if (typeof object.max_bytes === "string")
                            message.max_bytes = parseInt(object.max_bytes, 10);
                        else if (typeof object.max_bytes === "number")
                            message.max_bytes = object.max_bytes;
                        else if (typeof object.max_bytes === "object")
                            message.max_bytes = new $util.LongBits(object.max_bytes.low >>> 0, object.max_bytes.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from an EvidenceParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.EvidenceParams
                 * @static
                 * @param {tendermint.types.EvidenceParams} message EvidenceParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EvidenceParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.max_age_num_blocks = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_age_num_blocks = options.longs === String ? "0" : 0;
                        object.max_age_duration = null;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.max_bytes = options.longs === String ? "0" : 0;
                    }
                    if (message.max_age_num_blocks != null && message.hasOwnProperty("max_age_num_blocks"))
                        if (typeof message.max_age_num_blocks === "number")
                            object.max_age_num_blocks = options.longs === String ? String(message.max_age_num_blocks) : message.max_age_num_blocks;
                        else
                            object.max_age_num_blocks = options.longs === String ? $util.Long.prototype.toString.call(message.max_age_num_blocks) : options.longs === Number ? new $util.LongBits(message.max_age_num_blocks.low >>> 0, message.max_age_num_blocks.high >>> 0).toNumber() : message.max_age_num_blocks;
                    if (message.max_age_duration != null && message.hasOwnProperty("max_age_duration"))
                        object.max_age_duration = $root.google.protobuf.Duration.toObject(message.max_age_duration, options);
                    if (message.max_bytes != null && message.hasOwnProperty("max_bytes"))
                        if (typeof message.max_bytes === "number")
                            object.max_bytes = options.longs === String ? String(message.max_bytes) : message.max_bytes;
                        else
                            object.max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.max_bytes) : options.longs === Number ? new $util.LongBits(message.max_bytes.low >>> 0, message.max_bytes.high >>> 0).toNumber() : message.max_bytes;
                    return object;
                };
    
                /**
                 * Converts this EvidenceParams to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.EvidenceParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EvidenceParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EvidenceParams;
            })();
    
            types.ValidatorParams = (function() {
    
                /**
                 * Properties of a ValidatorParams.
                 * @memberof tendermint.types
                 * @interface IValidatorParams
                 * @property {Array.<string>|null} [pub_key_types] ValidatorParams pub_key_types
                 */
    
                /**
                 * Constructs a new ValidatorParams.
                 * @memberof tendermint.types
                 * @classdesc Represents a ValidatorParams.
                 * @implements IValidatorParams
                 * @constructor
                 * @param {tendermint.types.IValidatorParams=} [properties] Properties to set
                 */
                function ValidatorParams(properties) {
                    this.pub_key_types = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ValidatorParams pub_key_types.
                 * @member {Array.<string>} pub_key_types
                 * @memberof tendermint.types.ValidatorParams
                 * @instance
                 */
                ValidatorParams.prototype.pub_key_types = $util.emptyArray;
    
                /**
                 * Encodes the specified ValidatorParams message. Does not implicitly {@link tendermint.types.ValidatorParams.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.ValidatorParams
                 * @static
                 * @param {tendermint.types.IValidatorParams} message ValidatorParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.pub_key_types != null && message.pub_key_types.length)
                        for (var i = 0; i < message.pub_key_types.length; ++i)
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.pub_key_types[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified ValidatorParams message, length delimited. Does not implicitly {@link tendermint.types.ValidatorParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.ValidatorParams
                 * @static
                 * @param {tendermint.types.IValidatorParams} message ValidatorParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ValidatorParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ValidatorParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.ValidatorParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.ValidatorParams} ValidatorParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.ValidatorParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.pub_key_types && message.pub_key_types.length))
                                message.pub_key_types = [];
                            message.pub_key_types.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ValidatorParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.ValidatorParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.ValidatorParams} ValidatorParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ValidatorParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ValidatorParams message.
                 * @function verify
                 * @memberof tendermint.types.ValidatorParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ValidatorParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.pub_key_types != null && message.hasOwnProperty("pub_key_types")) {
                        if (!Array.isArray(message.pub_key_types))
                            return "pub_key_types: array expected";
                        for (var i = 0; i < message.pub_key_types.length; ++i)
                            if (!$util.isString(message.pub_key_types[i]))
                                return "pub_key_types: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a ValidatorParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.ValidatorParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.ValidatorParams} ValidatorParams
                 */
                ValidatorParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.ValidatorParams)
                        return object;
                    var message = new $root.tendermint.types.ValidatorParams();
                    if (object.pub_key_types) {
                        if (!Array.isArray(object.pub_key_types))
                            throw TypeError(".tendermint.types.ValidatorParams.pub_key_types: array expected");
                        message.pub_key_types = [];
                        for (var i = 0; i < object.pub_key_types.length; ++i)
                            message.pub_key_types[i] = String(object.pub_key_types[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ValidatorParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.ValidatorParams
                 * @static
                 * @param {tendermint.types.ValidatorParams} message ValidatorParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ValidatorParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.pub_key_types = [];
                    if (message.pub_key_types && message.pub_key_types.length) {
                        object.pub_key_types = [];
                        for (var j = 0; j < message.pub_key_types.length; ++j)
                            object.pub_key_types[j] = message.pub_key_types[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this ValidatorParams to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.ValidatorParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ValidatorParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ValidatorParams;
            })();
    
            types.VersionParams = (function() {
    
                /**
                 * Properties of a VersionParams.
                 * @memberof tendermint.types
                 * @interface IVersionParams
                 * @property {Long|null} [app_version] VersionParams app_version
                 */
    
                /**
                 * Constructs a new VersionParams.
                 * @memberof tendermint.types
                 * @classdesc Represents a VersionParams.
                 * @implements IVersionParams
                 * @constructor
                 * @param {tendermint.types.IVersionParams=} [properties] Properties to set
                 */
                function VersionParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * VersionParams app_version.
                 * @member {Long} app_version
                 * @memberof tendermint.types.VersionParams
                 * @instance
                 */
                VersionParams.prototype.app_version = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified VersionParams message. Does not implicitly {@link tendermint.types.VersionParams.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.VersionParams
                 * @static
                 * @param {tendermint.types.IVersionParams} message VersionParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VersionParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.app_version != null && Object.hasOwnProperty.call(message, "app_version"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.app_version);
                    return writer;
                };
    
                /**
                 * Encodes the specified VersionParams message, length delimited. Does not implicitly {@link tendermint.types.VersionParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.VersionParams
                 * @static
                 * @param {tendermint.types.IVersionParams} message VersionParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                VersionParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a VersionParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.VersionParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.VersionParams} VersionParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VersionParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.VersionParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.app_version = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a VersionParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.VersionParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.VersionParams} VersionParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                VersionParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a VersionParams message.
                 * @function verify
                 * @memberof tendermint.types.VersionParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                VersionParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.app_version != null && message.hasOwnProperty("app_version"))
                        if (!$util.isInteger(message.app_version) && !(message.app_version && $util.isInteger(message.app_version.low) && $util.isInteger(message.app_version.high)))
                            return "app_version: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a VersionParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.VersionParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.VersionParams} VersionParams
                 */
                VersionParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.VersionParams)
                        return object;
                    var message = new $root.tendermint.types.VersionParams();
                    if (object.app_version != null)
                        if ($util.Long)
                            (message.app_version = $util.Long.fromValue(object.app_version)).unsigned = true;
                        else if (typeof object.app_version === "string")
                            message.app_version = parseInt(object.app_version, 10);
                        else if (typeof object.app_version === "number")
                            message.app_version = object.app_version;
                        else if (typeof object.app_version === "object")
                            message.app_version = new $util.LongBits(object.app_version.low >>> 0, object.app_version.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a VersionParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.VersionParams
                 * @static
                 * @param {tendermint.types.VersionParams} message VersionParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                VersionParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults)
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.app_version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.app_version = options.longs === String ? "0" : 0;
                    if (message.app_version != null && message.hasOwnProperty("app_version"))
                        if (typeof message.app_version === "number")
                            object.app_version = options.longs === String ? String(message.app_version) : message.app_version;
                        else
                            object.app_version = options.longs === String ? $util.Long.prototype.toString.call(message.app_version) : options.longs === Number ? new $util.LongBits(message.app_version.low >>> 0, message.app_version.high >>> 0).toNumber(true) : message.app_version;
                    return object;
                };
    
                /**
                 * Converts this VersionParams to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.VersionParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                VersionParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return VersionParams;
            })();
    
            types.HashedParams = (function() {
    
                /**
                 * Properties of a HashedParams.
                 * @memberof tendermint.types
                 * @interface IHashedParams
                 * @property {Long|null} [block_max_bytes] HashedParams block_max_bytes
                 * @property {Long|null} [block_max_gas] HashedParams block_max_gas
                 */
    
                /**
                 * Constructs a new HashedParams.
                 * @memberof tendermint.types
                 * @classdesc Represents a HashedParams.
                 * @implements IHashedParams
                 * @constructor
                 * @param {tendermint.types.IHashedParams=} [properties] Properties to set
                 */
                function HashedParams(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HashedParams block_max_bytes.
                 * @member {Long} block_max_bytes
                 * @memberof tendermint.types.HashedParams
                 * @instance
                 */
                HashedParams.prototype.block_max_bytes = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * HashedParams block_max_gas.
                 * @member {Long} block_max_gas
                 * @memberof tendermint.types.HashedParams
                 * @instance
                 */
                HashedParams.prototype.block_max_gas = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Encodes the specified HashedParams message. Does not implicitly {@link tendermint.types.HashedParams.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.types.HashedParams
                 * @static
                 * @param {tendermint.types.IHashedParams} message HashedParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HashedParams.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.block_max_bytes != null && Object.hasOwnProperty.call(message, "block_max_bytes"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.block_max_bytes);
                    if (message.block_max_gas != null && Object.hasOwnProperty.call(message, "block_max_gas"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int64(message.block_max_gas);
                    return writer;
                };
    
                /**
                 * Encodes the specified HashedParams message, length delimited. Does not implicitly {@link tendermint.types.HashedParams.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.types.HashedParams
                 * @static
                 * @param {tendermint.types.IHashedParams} message HashedParams message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HashedParams.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HashedParams message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.types.HashedParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.types.HashedParams} HashedParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HashedParams.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.types.HashedParams();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.block_max_bytes = reader.int64();
                            break;
                        case 2:
                            message.block_max_gas = reader.int64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HashedParams message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.types.HashedParams
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.types.HashedParams} HashedParams
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HashedParams.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HashedParams message.
                 * @function verify
                 * @memberof tendermint.types.HashedParams
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HashedParams.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.block_max_bytes != null && message.hasOwnProperty("block_max_bytes"))
                        if (!$util.isInteger(message.block_max_bytes) && !(message.block_max_bytes && $util.isInteger(message.block_max_bytes.low) && $util.isInteger(message.block_max_bytes.high)))
                            return "block_max_bytes: integer|Long expected";
                    if (message.block_max_gas != null && message.hasOwnProperty("block_max_gas"))
                        if (!$util.isInteger(message.block_max_gas) && !(message.block_max_gas && $util.isInteger(message.block_max_gas.low) && $util.isInteger(message.block_max_gas.high)))
                            return "block_max_gas: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a HashedParams message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.types.HashedParams
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.types.HashedParams} HashedParams
                 */
                HashedParams.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.types.HashedParams)
                        return object;
                    var message = new $root.tendermint.types.HashedParams();
                    if (object.block_max_bytes != null)
                        if ($util.Long)
                            (message.block_max_bytes = $util.Long.fromValue(object.block_max_bytes)).unsigned = false;
                        else if (typeof object.block_max_bytes === "string")
                            message.block_max_bytes = parseInt(object.block_max_bytes, 10);
                        else if (typeof object.block_max_bytes === "number")
                            message.block_max_bytes = object.block_max_bytes;
                        else if (typeof object.block_max_bytes === "object")
                            message.block_max_bytes = new $util.LongBits(object.block_max_bytes.low >>> 0, object.block_max_bytes.high >>> 0).toNumber();
                    if (object.block_max_gas != null)
                        if ($util.Long)
                            (message.block_max_gas = $util.Long.fromValue(object.block_max_gas)).unsigned = false;
                        else if (typeof object.block_max_gas === "string")
                            message.block_max_gas = parseInt(object.block_max_gas, 10);
                        else if (typeof object.block_max_gas === "number")
                            message.block_max_gas = object.block_max_gas;
                        else if (typeof object.block_max_gas === "object")
                            message.block_max_gas = new $util.LongBits(object.block_max_gas.low >>> 0, object.block_max_gas.high >>> 0).toNumber();
                    return message;
                };
    
                /**
                 * Creates a plain object from a HashedParams message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.types.HashedParams
                 * @static
                 * @param {tendermint.types.HashedParams} message HashedParams
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HashedParams.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.block_max_bytes = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block_max_bytes = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.block_max_gas = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block_max_gas = options.longs === String ? "0" : 0;
                    }
                    if (message.block_max_bytes != null && message.hasOwnProperty("block_max_bytes"))
                        if (typeof message.block_max_bytes === "number")
                            object.block_max_bytes = options.longs === String ? String(message.block_max_bytes) : message.block_max_bytes;
                        else
                            object.block_max_bytes = options.longs === String ? $util.Long.prototype.toString.call(message.block_max_bytes) : options.longs === Number ? new $util.LongBits(message.block_max_bytes.low >>> 0, message.block_max_bytes.high >>> 0).toNumber() : message.block_max_bytes;
                    if (message.block_max_gas != null && message.hasOwnProperty("block_max_gas"))
                        if (typeof message.block_max_gas === "number")
                            object.block_max_gas = options.longs === String ? String(message.block_max_gas) : message.block_max_gas;
                        else
                            object.block_max_gas = options.longs === String ? $util.Long.prototype.toString.call(message.block_max_gas) : options.longs === Number ? new $util.LongBits(message.block_max_gas.low >>> 0, message.block_max_gas.high >>> 0).toNumber() : message.block_max_gas;
                    return object;
                };
    
                /**
                 * Converts this HashedParams to JSON.
                 * @function toJSON
                 * @memberof tendermint.types.HashedParams
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HashedParams.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return HashedParams;
            })();
    
            return types;
        })();
    
        tendermint.version = (function() {
    
            /**
             * Namespace version.
             * @memberof tendermint
             * @namespace
             */
            var version = {};
    
            version.App = (function() {
    
                /**
                 * Properties of an App.
                 * @memberof tendermint.version
                 * @interface IApp
                 * @property {Long|null} [protocol] App protocol
                 * @property {string|null} [software] App software
                 */
    
                /**
                 * Constructs a new App.
                 * @memberof tendermint.version
                 * @classdesc Represents an App.
                 * @implements IApp
                 * @constructor
                 * @param {tendermint.version.IApp=} [properties] Properties to set
                 */
                function App(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * App protocol.
                 * @member {Long} protocol
                 * @memberof tendermint.version.App
                 * @instance
                 */
                App.prototype.protocol = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * App software.
                 * @member {string} software
                 * @memberof tendermint.version.App
                 * @instance
                 */
                App.prototype.software = "";
    
                /**
                 * Encodes the specified App message. Does not implicitly {@link tendermint.version.App.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.version.App
                 * @static
                 * @param {tendermint.version.IApp} message App message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                App.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.protocol != null && Object.hasOwnProperty.call(message, "protocol"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.protocol);
                    if (message.software != null && Object.hasOwnProperty.call(message, "software"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.software);
                    return writer;
                };
    
                /**
                 * Encodes the specified App message, length delimited. Does not implicitly {@link tendermint.version.App.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.version.App
                 * @static
                 * @param {tendermint.version.IApp} message App message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                App.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an App message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.version.App
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.version.App} App
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                App.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.version.App();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.protocol = reader.uint64();
                            break;
                        case 2:
                            message.software = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an App message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.version.App
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.version.App} App
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                App.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an App message.
                 * @function verify
                 * @memberof tendermint.version.App
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                App.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.protocol != null && message.hasOwnProperty("protocol"))
                        if (!$util.isInteger(message.protocol) && !(message.protocol && $util.isInteger(message.protocol.low) && $util.isInteger(message.protocol.high)))
                            return "protocol: integer|Long expected";
                    if (message.software != null && message.hasOwnProperty("software"))
                        if (!$util.isString(message.software))
                            return "software: string expected";
                    return null;
                };
    
                /**
                 * Creates an App message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.version.App
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.version.App} App
                 */
                App.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.version.App)
                        return object;
                    var message = new $root.tendermint.version.App();
                    if (object.protocol != null)
                        if ($util.Long)
                            (message.protocol = $util.Long.fromValue(object.protocol)).unsigned = true;
                        else if (typeof object.protocol === "string")
                            message.protocol = parseInt(object.protocol, 10);
                        else if (typeof object.protocol === "number")
                            message.protocol = object.protocol;
                        else if (typeof object.protocol === "object")
                            message.protocol = new $util.LongBits(object.protocol.low >>> 0, object.protocol.high >>> 0).toNumber(true);
                    if (object.software != null)
                        message.software = String(object.software);
                    return message;
                };
    
                /**
                 * Creates a plain object from an App message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.version.App
                 * @static
                 * @param {tendermint.version.App} message App
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                App.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.protocol = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.protocol = options.longs === String ? "0" : 0;
                        object.software = "";
                    }
                    if (message.protocol != null && message.hasOwnProperty("protocol"))
                        if (typeof message.protocol === "number")
                            object.protocol = options.longs === String ? String(message.protocol) : message.protocol;
                        else
                            object.protocol = options.longs === String ? $util.Long.prototype.toString.call(message.protocol) : options.longs === Number ? new $util.LongBits(message.protocol.low >>> 0, message.protocol.high >>> 0).toNumber(true) : message.protocol;
                    if (message.software != null && message.hasOwnProperty("software"))
                        object.software = message.software;
                    return object;
                };
    
                /**
                 * Converts this App to JSON.
                 * @function toJSON
                 * @memberof tendermint.version.App
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                App.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return App;
            })();
    
            version.Consensus = (function() {
    
                /**
                 * Properties of a Consensus.
                 * @memberof tendermint.version
                 * @interface IConsensus
                 * @property {Long|null} [block] Consensus block
                 * @property {Long|null} [app] Consensus app
                 */
    
                /**
                 * Constructs a new Consensus.
                 * @memberof tendermint.version
                 * @classdesc Represents a Consensus.
                 * @implements IConsensus
                 * @constructor
                 * @param {tendermint.version.IConsensus=} [properties] Properties to set
                 */
                function Consensus(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Consensus block.
                 * @member {Long} block
                 * @memberof tendermint.version.Consensus
                 * @instance
                 */
                Consensus.prototype.block = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Consensus app.
                 * @member {Long} app
                 * @memberof tendermint.version.Consensus
                 * @instance
                 */
                Consensus.prototype.app = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * Encodes the specified Consensus message. Does not implicitly {@link tendermint.version.Consensus.verify|verify} messages.
                 * @function encode
                 * @memberof tendermint.version.Consensus
                 * @static
                 * @param {tendermint.version.IConsensus} message Consensus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Consensus.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                        writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.block);
                    if (message.app != null && Object.hasOwnProperty.call(message, "app"))
                        writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.app);
                    return writer;
                };
    
                /**
                 * Encodes the specified Consensus message, length delimited. Does not implicitly {@link tendermint.version.Consensus.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof tendermint.version.Consensus
                 * @static
                 * @param {tendermint.version.IConsensus} message Consensus message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Consensus.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Consensus message from the specified reader or buffer.
                 * @function decode
                 * @memberof tendermint.version.Consensus
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {tendermint.version.Consensus} Consensus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Consensus.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.tendermint.version.Consensus();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.block = reader.uint64();
                            break;
                        case 2:
                            message.app = reader.uint64();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Consensus message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof tendermint.version.Consensus
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {tendermint.version.Consensus} Consensus
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Consensus.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Consensus message.
                 * @function verify
                 * @memberof tendermint.version.Consensus
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Consensus.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.block != null && message.hasOwnProperty("block"))
                        if (!$util.isInteger(message.block) && !(message.block && $util.isInteger(message.block.low) && $util.isInteger(message.block.high)))
                            return "block: integer|Long expected";
                    if (message.app != null && message.hasOwnProperty("app"))
                        if (!$util.isInteger(message.app) && !(message.app && $util.isInteger(message.app.low) && $util.isInteger(message.app.high)))
                            return "app: integer|Long expected";
                    return null;
                };
    
                /**
                 * Creates a Consensus message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof tendermint.version.Consensus
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {tendermint.version.Consensus} Consensus
                 */
                Consensus.fromObject = function fromObject(object) {
                    if (object instanceof $root.tendermint.version.Consensus)
                        return object;
                    var message = new $root.tendermint.version.Consensus();
                    if (object.block != null)
                        if ($util.Long)
                            (message.block = $util.Long.fromValue(object.block)).unsigned = true;
                        else if (typeof object.block === "string")
                            message.block = parseInt(object.block, 10);
                        else if (typeof object.block === "number")
                            message.block = object.block;
                        else if (typeof object.block === "object")
                            message.block = new $util.LongBits(object.block.low >>> 0, object.block.high >>> 0).toNumber(true);
                    if (object.app != null)
                        if ($util.Long)
                            (message.app = $util.Long.fromValue(object.app)).unsigned = true;
                        else if (typeof object.app === "string")
                            message.app = parseInt(object.app, 10);
                        else if (typeof object.app === "number")
                            message.app = object.app;
                        else if (typeof object.app === "object")
                            message.app = new $util.LongBits(object.app.low >>> 0, object.app.high >>> 0).toNumber(true);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Consensus message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof tendermint.version.Consensus
                 * @static
                 * @param {tendermint.version.Consensus} message Consensus
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Consensus.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.block = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.block = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.app = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.app = options.longs === String ? "0" : 0;
                    }
                    if (message.block != null && message.hasOwnProperty("block"))
                        if (typeof message.block === "number")
                            object.block = options.longs === String ? String(message.block) : message.block;
                        else
                            object.block = options.longs === String ? $util.Long.prototype.toString.call(message.block) : options.longs === Number ? new $util.LongBits(message.block.low >>> 0, message.block.high >>> 0).toNumber(true) : message.block;
                    if (message.app != null && message.hasOwnProperty("app"))
                        if (typeof message.app === "number")
                            object.app = options.longs === String ? String(message.app) : message.app;
                        else
                            object.app = options.longs === String ? $util.Long.prototype.toString.call(message.app) : options.longs === Number ? new $util.LongBits(message.app.low >>> 0, message.app.high >>> 0).toNumber(true) : message.app;
                    return object;
                };
    
                /**
                 * Converts this Consensus to JSON.
                 * @function toJSON
                 * @memberof tendermint.version.Consensus
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Consensus.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Consensus;
            })();
    
            return version;
        })();
    
        return tendermint;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.file && message.file.length))
                                message.file = [];
                            message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [public_dependency] FileDescriptorProto public_dependency
                 * @property {Array.<number>|null} [weak_dependency] FileDescriptorProto weak_dependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [message_type] FileDescriptorProto message_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] FileDescriptorProto enum_type
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [source_code_info] FileDescriptorProto source_code_info
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.public_dependency = [];
                    this.weak_dependency = [];
                    this.message_type = [];
                    this.enum_type = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto public_dependency.
                 * @member {Array.<number>} public_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.public_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weak_dependency.
                 * @member {Array.<number>} weak_dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weak_dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto message_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} message_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.message_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto source_code_info.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} source_code_info
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.source_code_info = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.message_type != null && message.message_type.length)
                        for (var i = 0; i < message.message_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.message_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.source_code_info != null && Object.hasOwnProperty.call(message, "source_code_info"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.source_code_info, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.public_dependency != null && message.public_dependency.length)
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.public_dependency[i]);
                    if (message.weak_dependency != null && message.weak_dependency.length)
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weak_dependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message["package"] = reader.string();
                            break;
                        case 3:
                            if (!(message.dependency && message.dependency.length))
                                message.dependency = [];
                            message.dependency.push(reader.string());
                            break;
                        case 10:
                            if (!(message.public_dependency && message.public_dependency.length))
                                message.public_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.public_dependency.push(reader.int32());
                            } else
                                message.public_dependency.push(reader.int32());
                            break;
                        case 11:
                            if (!(message.weak_dependency && message.weak_dependency.length))
                                message.weak_dependency = [];
                            if ((tag & 7) === 2) {
                                var end2 = reader.uint32() + reader.pos;
                                while (reader.pos < end2)
                                    message.weak_dependency.push(reader.int32());
                            } else
                                message.weak_dependency.push(reader.int32());
                            break;
                        case 4:
                            if (!(message.message_type && message.message_type.length))
                                message.message_type = [];
                            message.message_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.service && message.service.length))
                                message.service = [];
                            message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            message.source_code_info = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                            break;
                        case 12:
                            message.syntax = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.public_dependency != null && message.hasOwnProperty("public_dependency")) {
                        if (!Array.isArray(message.public_dependency))
                            return "public_dependency: array expected";
                        for (var i = 0; i < message.public_dependency.length; ++i)
                            if (!$util.isInteger(message.public_dependency[i]))
                                return "public_dependency: integer[] expected";
                    }
                    if (message.weak_dependency != null && message.hasOwnProperty("weak_dependency")) {
                        if (!Array.isArray(message.weak_dependency))
                            return "weak_dependency: array expected";
                        for (var i = 0; i < message.weak_dependency.length; ++i)
                            if (!$util.isInteger(message.weak_dependency[i]))
                                return "weak_dependency: integer[] expected";
                    }
                    if (message.message_type != null && message.hasOwnProperty("message_type")) {
                        if (!Array.isArray(message.message_type))
                            return "message_type: array expected";
                        for (var i = 0; i < message.message_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.message_type[i]);
                            if (error)
                                return "message_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.source_code_info);
                        if (error)
                            return "source_code_info." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.public_dependency) {
                        if (!Array.isArray(object.public_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.public_dependency: array expected");
                        message.public_dependency = [];
                        for (var i = 0; i < object.public_dependency.length; ++i)
                            message.public_dependency[i] = object.public_dependency[i] | 0;
                    }
                    if (object.weak_dependency) {
                        if (!Array.isArray(object.weak_dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weak_dependency: array expected");
                        message.weak_dependency = [];
                        for (var i = 0; i < object.weak_dependency.length; ++i)
                            message.weak_dependency[i] = object.weak_dependency[i] | 0;
                    }
                    if (object.message_type) {
                        if (!Array.isArray(object.message_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.message_type: array expected");
                        message.message_type = [];
                        for (var i = 0; i < object.message_type.length; ++i) {
                            if (typeof object.message_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.message_type: object expected");
                            message.message_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.message_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.source_code_info != null) {
                        if (typeof object.source_code_info !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.source_code_info: object expected");
                        message.source_code_info = $root.google.protobuf.SourceCodeInfo.fromObject(object.source_code_info);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.message_type = [];
                        object.enum_type = [];
                        object.service = [];
                        object.extension = [];
                        object.public_dependency = [];
                        object.weak_dependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.source_code_info = null;
                        object.syntax = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.message_type && message.message_type.length) {
                        object.message_type = [];
                        for (var j = 0; j < message.message_type.length; ++j)
                            object.message_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.message_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.source_code_info != null && message.hasOwnProperty("source_code_info"))
                        object.source_code_info = $root.google.protobuf.SourceCodeInfo.toObject(message.source_code_info, options);
                    if (message.public_dependency && message.public_dependency.length) {
                        object.public_dependency = [];
                        for (var j = 0; j < message.public_dependency.length; ++j)
                            object.public_dependency[j] = message.public_dependency[j];
                    }
                    if (message.weak_dependency && message.weak_dependency.length) {
                        object.weak_dependency = [];
                        for (var j = 0; j < message.weak_dependency.length; ++j)
                            object.weak_dependency[j] = message.weak_dependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nested_type] DescriptorProto nested_type
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enum_type] DescriptorProto enum_type
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extension_range] DescriptorProto extension_range
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneof_decl] DescriptorProto oneof_decl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reserved_range] DescriptorProto reserved_range
                 * @property {Array.<string>|null} [reserved_name] DescriptorProto reserved_name
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nested_type = [];
                    this.enum_type = [];
                    this.extension_range = [];
                    this.oneof_decl = [];
                    this.reserved_range = [];
                    this.reserved_name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nested_type.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nested_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nested_type = $util.emptyArray;
    
                /**
                 * DescriptorProto enum_type.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enum_type
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enum_type = $util.emptyArray;
    
                /**
                 * DescriptorProto extension_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extension_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension_range = $util.emptyArray;
    
                /**
                 * DescriptorProto oneof_decl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneof_decl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneof_decl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reserved_range.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reserved_range
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_range = $util.emptyArray;
    
                /**
                 * DescriptorProto reserved_name.
                 * @member {Array.<string>} reserved_name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reserved_name = $util.emptyArray;
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nested_type != null && message.nested_type.length)
                        for (var i = 0; i < message.nested_type.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nested_type[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enum_type != null && message.enum_type.length)
                        for (var i = 0; i < message.enum_type.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enum_type[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extension_range != null && message.extension_range.length)
                        for (var i = 0; i < message.extension_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extension_range[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneof_decl != null && message.oneof_decl.length)
                        for (var i = 0; i < message.oneof_decl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneof_decl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reserved_range != null && message.reserved_range.length)
                        for (var i = 0; i < message.reserved_range.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reserved_range[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reserved_name != null && message.reserved_name.length)
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reserved_name[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.field && message.field.length))
                                message.field = [];
                            message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 6:
                            if (!(message.extension && message.extension.length))
                                message.extension = [];
                            message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            if (!(message.nested_type && message.nested_type.length))
                                message.nested_type = [];
                            message.nested_type.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 4:
                            if (!(message.enum_type && message.enum_type.length))
                                message.enum_type = [];
                            message.enum_type.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 5:
                            if (!(message.extension_range && message.extension_range.length))
                                message.extension_range = [];
                            message.extension_range.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                            break;
                        case 8:
                            if (!(message.oneof_decl && message.oneof_decl.length))
                                message.oneof_decl = [];
                            message.oneof_decl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 7:
                            message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                            break;
                        case 9:
                            if (!(message.reserved_range && message.reserved_range.length))
                                message.reserved_range = [];
                            message.reserved_range.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                            break;
                        case 10:
                            if (!(message.reserved_name && message.reserved_name.length))
                                message.reserved_name = [];
                            message.reserved_name.push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nested_type != null && message.hasOwnProperty("nested_type")) {
                        if (!Array.isArray(message.nested_type))
                            return "nested_type: array expected";
                        for (var i = 0; i < message.nested_type.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nested_type[i]);
                            if (error)
                                return "nested_type." + error;
                        }
                    }
                    if (message.enum_type != null && message.hasOwnProperty("enum_type")) {
                        if (!Array.isArray(message.enum_type))
                            return "enum_type: array expected";
                        for (var i = 0; i < message.enum_type.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enum_type[i]);
                            if (error)
                                return "enum_type." + error;
                        }
                    }
                    if (message.extension_range != null && message.hasOwnProperty("extension_range")) {
                        if (!Array.isArray(message.extension_range))
                            return "extension_range: array expected";
                        for (var i = 0; i < message.extension_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extension_range[i]);
                            if (error)
                                return "extension_range." + error;
                        }
                    }
                    if (message.oneof_decl != null && message.hasOwnProperty("oneof_decl")) {
                        if (!Array.isArray(message.oneof_decl))
                            return "oneof_decl: array expected";
                        for (var i = 0; i < message.oneof_decl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneof_decl[i]);
                            if (error)
                                return "oneof_decl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reserved_range != null && message.hasOwnProperty("reserved_range")) {
                        if (!Array.isArray(message.reserved_range))
                            return "reserved_range: array expected";
                        for (var i = 0; i < message.reserved_range.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reserved_range[i]);
                            if (error)
                                return "reserved_range." + error;
                        }
                    }
                    if (message.reserved_name != null && message.hasOwnProperty("reserved_name")) {
                        if (!Array.isArray(message.reserved_name))
                            return "reserved_name: array expected";
                        for (var i = 0; i < message.reserved_name.length; ++i)
                            if (!$util.isString(message.reserved_name[i]))
                                return "reserved_name: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nested_type) {
                        if (!Array.isArray(object.nested_type))
                            throw TypeError(".google.protobuf.DescriptorProto.nested_type: array expected");
                        message.nested_type = [];
                        for (var i = 0; i < object.nested_type.length; ++i) {
                            if (typeof object.nested_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nested_type: object expected");
                            message.nested_type[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nested_type[i]);
                        }
                    }
                    if (object.enum_type) {
                        if (!Array.isArray(object.enum_type))
                            throw TypeError(".google.protobuf.DescriptorProto.enum_type: array expected");
                        message.enum_type = [];
                        for (var i = 0; i < object.enum_type.length; ++i) {
                            if (typeof object.enum_type[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enum_type: object expected");
                            message.enum_type[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enum_type[i]);
                        }
                    }
                    if (object.extension_range) {
                        if (!Array.isArray(object.extension_range))
                            throw TypeError(".google.protobuf.DescriptorProto.extension_range: array expected");
                        message.extension_range = [];
                        for (var i = 0; i < object.extension_range.length; ++i) {
                            if (typeof object.extension_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension_range: object expected");
                            message.extension_range[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extension_range[i]);
                        }
                    }
                    if (object.oneof_decl) {
                        if (!Array.isArray(object.oneof_decl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: array expected");
                        message.oneof_decl = [];
                        for (var i = 0; i < object.oneof_decl.length; ++i) {
                            if (typeof object.oneof_decl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneof_decl: object expected");
                            message.oneof_decl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneof_decl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reserved_range) {
                        if (!Array.isArray(object.reserved_range))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_range: array expected");
                        message.reserved_range = [];
                        for (var i = 0; i < object.reserved_range.length; ++i) {
                            if (typeof object.reserved_range[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reserved_range: object expected");
                            message.reserved_range[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reserved_range[i]);
                        }
                    }
                    if (object.reserved_name) {
                        if (!Array.isArray(object.reserved_name))
                            throw TypeError(".google.protobuf.DescriptorProto.reserved_name: array expected");
                        message.reserved_name = [];
                        for (var i = 0; i < object.reserved_name.length; ++i)
                            message.reserved_name[i] = String(object.reserved_name[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nested_type = [];
                        object.enum_type = [];
                        object.extension_range = [];
                        object.extension = [];
                        object.oneof_decl = [];
                        object.reserved_range = [];
                        object.reserved_name = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nested_type && message.nested_type.length) {
                        object.nested_type = [];
                        for (var j = 0; j < message.nested_type.length; ++j)
                            object.nested_type[j] = $root.google.protobuf.DescriptorProto.toObject(message.nested_type[j], options);
                    }
                    if (message.enum_type && message.enum_type.length) {
                        object.enum_type = [];
                        for (var j = 0; j < message.enum_type.length; ++j)
                            object.enum_type[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enum_type[j], options);
                    }
                    if (message.extension_range && message.extension_range.length) {
                        object.extension_range = [];
                        for (var j = 0; j < message.extension_range.length; ++j)
                            object.extension_range[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extension_range[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneof_decl && message.oneof_decl.length) {
                        object.oneof_decl = [];
                        for (var j = 0; j < message.oneof_decl.length; ++j)
                            object.oneof_decl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneof_decl[j], options);
                    }
                    if (message.reserved_range && message.reserved_range.length) {
                        object.reserved_range = [];
                        for (var j = 0; j < message.reserved_range.length; ++j)
                            object.reserved_range[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reserved_range[j], options);
                    }
                    if (message.reserved_name && message.reserved_name.length) {
                        object.reserved_name = [];
                        for (var j = 0; j < message.reserved_name.length; ++j)
                            object.reserved_name[j] = message.reserved_name[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.start = reader.int32();
                                break;
                            case 2:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [type_name] FieldDescriptorProto type_name
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [default_value] FieldDescriptorProto default_value
                 * @property {number|null} [oneof_index] FieldDescriptorProto oneof_index
                 * @property {string|null} [json_name] FieldDescriptorProto json_name
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto type_name.
                 * @member {string} type_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type_name = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto default_value.
                 * @member {string} default_value
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.default_value = "";
    
                /**
                 * FieldDescriptorProto oneof_index.
                 * @member {number} oneof_index
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneof_index = 0;
    
                /**
                 * FieldDescriptorProto json_name.
                 * @member {string} json_name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.json_name = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.type_name != null && Object.hasOwnProperty.call(message, "type_name"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.type_name);
                    if (message.default_value != null && Object.hasOwnProperty.call(message, "default_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.default_value);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneof_index != null && Object.hasOwnProperty.call(message, "oneof_index"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneof_index);
                    if (message.json_name != null && Object.hasOwnProperty.call(message, "json_name"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.json_name);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 3:
                            message.number = reader.int32();
                            break;
                        case 4:
                            message.label = reader.int32();
                            break;
                        case 5:
                            message.type = reader.int32();
                            break;
                        case 6:
                            message.type_name = reader.string();
                            break;
                        case 2:
                            message.extendee = reader.string();
                            break;
                        case 7:
                            message.default_value = reader.string();
                            break;
                        case 9:
                            message.oneof_index = reader.int32();
                            break;
                        case 10:
                            message.json_name = reader.string();
                            break;
                        case 8:
                            message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        if (!$util.isString(message.type_name))
                            return "type_name: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        if (!$util.isString(message.default_value))
                            return "default_value: string expected";
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        if (!$util.isInteger(message.oneof_index))
                            return "oneof_index: integer expected";
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        if (!$util.isString(message.json_name))
                            return "json_name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.type_name != null)
                        message.type_name = String(object.type_name);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.default_value != null)
                        message.default_value = String(object.default_value);
                    if (object.oneof_index != null)
                        message.oneof_index = object.oneof_index | 0;
                    if (object.json_name != null)
                        message.json_name = String(object.json_name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.type_name = "";
                        object.default_value = "";
                        object.options = null;
                        object.oneof_index = 0;
                        object.json_name = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.type_name != null && message.hasOwnProperty("type_name"))
                        object.type_name = message.type_name;
                    if (message.default_value != null && message.hasOwnProperty("default_value"))
                        object.default_value = message.default_value;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneof_index != null && message.hasOwnProperty("oneof_index"))
                        object.oneof_index = message.oneof_index;
                    if (message.json_name != null && message.hasOwnProperty("json_name"))
                        object.json_name = message.json_name;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.value && message.value.length))
                                message.value = [];
                            message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.value = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.number = reader.int32();
                            break;
                        case 3:
                            message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            if (!(message.method && message.method.length))
                                message.method = [];
                            message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [input_type] MethodDescriptorProto input_type
                 * @property {string|null} [output_type] MethodDescriptorProto output_type
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [client_streaming] MethodDescriptorProto client_streaming
                 * @property {boolean|null} [server_streaming] MethodDescriptorProto server_streaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto input_type.
                 * @member {string} input_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.input_type = "";
    
                /**
                 * MethodDescriptorProto output_type.
                 * @member {string} output_type
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.output_type = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto client_streaming.
                 * @member {boolean} client_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.client_streaming = false;
    
                /**
                 * MethodDescriptorProto server_streaming.
                 * @member {boolean} server_streaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.server_streaming = false;
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.input_type != null && Object.hasOwnProperty.call(message, "input_type"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.input_type);
                    if (message.output_type != null && Object.hasOwnProperty.call(message, "output_type"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.output_type);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.client_streaming != null && Object.hasOwnProperty.call(message, "client_streaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.client_streaming);
                    if (message.server_streaming != null && Object.hasOwnProperty.call(message, "server_streaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.server_streaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.name = reader.string();
                            break;
                        case 2:
                            message.input_type = reader.string();
                            break;
                        case 3:
                            message.output_type = reader.string();
                            break;
                        case 4:
                            message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                            break;
                        case 5:
                            message.client_streaming = reader.bool();
                            break;
                        case 6:
                            message.server_streaming = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        if (!$util.isString(message.input_type))
                            return "input_type: string expected";
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        if (!$util.isString(message.output_type))
                            return "output_type: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        if (typeof message.client_streaming !== "boolean")
                            return "client_streaming: boolean expected";
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        if (typeof message.server_streaming !== "boolean")
                            return "server_streaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.input_type != null)
                        message.input_type = String(object.input_type);
                    if (object.output_type != null)
                        message.output_type = String(object.output_type);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.client_streaming != null)
                        message.client_streaming = Boolean(object.client_streaming);
                    if (object.server_streaming != null)
                        message.server_streaming = Boolean(object.server_streaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.input_type = "";
                        object.output_type = "";
                        object.options = null;
                        object.client_streaming = false;
                        object.server_streaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.input_type != null && message.hasOwnProperty("input_type"))
                        object.input_type = message.input_type;
                    if (message.output_type != null && message.hasOwnProperty("output_type"))
                        object.output_type = message.output_type;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.client_streaming != null && message.hasOwnProperty("client_streaming"))
                        object.client_streaming = message.client_streaming;
                    if (message.server_streaming != null && message.hasOwnProperty("server_streaming"))
                        object.server_streaming = message.server_streaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [java_package] FileOptions java_package
                 * @property {string|null} [java_outer_classname] FileOptions java_outer_classname
                 * @property {boolean|null} [java_multiple_files] FileOptions java_multiple_files
                 * @property {boolean|null} [java_generate_equals_and_hash] FileOptions java_generate_equals_and_hash
                 * @property {boolean|null} [java_string_check_utf8] FileOptions java_string_check_utf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimize_for] FileOptions optimize_for
                 * @property {string|null} [go_package] FileOptions go_package
                 * @property {boolean|null} [cc_generic_services] FileOptions cc_generic_services
                 * @property {boolean|null} [java_generic_services] FileOptions java_generic_services
                 * @property {boolean|null} [py_generic_services] FileOptions py_generic_services
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [cc_enable_arenas] FileOptions cc_enable_arenas
                 * @property {string|null} [objc_class_prefix] FileOptions objc_class_prefix
                 * @property {string|null} [csharp_namespace] FileOptions csharp_namespace
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FileOptions uninterpreted_option
                 * @property {boolean|null} [".gogoproto.goproto_getters_all"] FileOptions .gogoproto.goproto_getters_all
                 * @property {boolean|null} [".gogoproto.goproto_enum_prefix_all"] FileOptions .gogoproto.goproto_enum_prefix_all
                 * @property {boolean|null} [".gogoproto.goproto_stringer_all"] FileOptions .gogoproto.goproto_stringer_all
                 * @property {boolean|null} [".gogoproto.verbose_equal_all"] FileOptions .gogoproto.verbose_equal_all
                 * @property {boolean|null} [".gogoproto.face_all"] FileOptions .gogoproto.face_all
                 * @property {boolean|null} [".gogoproto.gostring_all"] FileOptions .gogoproto.gostring_all
                 * @property {boolean|null} [".gogoproto.populate_all"] FileOptions .gogoproto.populate_all
                 * @property {boolean|null} [".gogoproto.stringer_all"] FileOptions .gogoproto.stringer_all
                 * @property {boolean|null} [".gogoproto.onlyone_all"] FileOptions .gogoproto.onlyone_all
                 * @property {boolean|null} [".gogoproto.equal_all"] FileOptions .gogoproto.equal_all
                 * @property {boolean|null} [".gogoproto.description_all"] FileOptions .gogoproto.description_all
                 * @property {boolean|null} [".gogoproto.testgen_all"] FileOptions .gogoproto.testgen_all
                 * @property {boolean|null} [".gogoproto.benchgen_all"] FileOptions .gogoproto.benchgen_all
                 * @property {boolean|null} [".gogoproto.marshaler_all"] FileOptions .gogoproto.marshaler_all
                 * @property {boolean|null} [".gogoproto.unmarshaler_all"] FileOptions .gogoproto.unmarshaler_all
                 * @property {boolean|null} [".gogoproto.stable_marshaler_all"] FileOptions .gogoproto.stable_marshaler_all
                 * @property {boolean|null} [".gogoproto.sizer_all"] FileOptions .gogoproto.sizer_all
                 * @property {boolean|null} [".gogoproto.goproto_enum_stringer_all"] FileOptions .gogoproto.goproto_enum_stringer_all
                 * @property {boolean|null} [".gogoproto.enum_stringer_all"] FileOptions .gogoproto.enum_stringer_all
                 * @property {boolean|null} [".gogoproto.unsafe_marshaler_all"] FileOptions .gogoproto.unsafe_marshaler_all
                 * @property {boolean|null} [".gogoproto.unsafe_unmarshaler_all"] FileOptions .gogoproto.unsafe_unmarshaler_all
                 * @property {boolean|null} [".gogoproto.goproto_extensions_map_all"] FileOptions .gogoproto.goproto_extensions_map_all
                 * @property {boolean|null} [".gogoproto.goproto_unrecognized_all"] FileOptions .gogoproto.goproto_unrecognized_all
                 * @property {boolean|null} [".gogoproto.gogoproto_import"] FileOptions .gogoproto.gogoproto_import
                 * @property {boolean|null} [".gogoproto.protosizer_all"] FileOptions .gogoproto.protosizer_all
                 * @property {boolean|null} [".gogoproto.compare_all"] FileOptions .gogoproto.compare_all
                 * @property {boolean|null} [".gogoproto.typedecl_all"] FileOptions .gogoproto.typedecl_all
                 * @property {boolean|null} [".gogoproto.enumdecl_all"] FileOptions .gogoproto.enumdecl_all
                 * @property {boolean|null} [".gogoproto.goproto_registration"] FileOptions .gogoproto.goproto_registration
                 * @property {boolean|null} [".gogoproto.messagename_all"] FileOptions .gogoproto.messagename_all
                 * @property {boolean|null} [".gogoproto.goproto_sizecache_all"] FileOptions .gogoproto.goproto_sizecache_all
                 * @property {boolean|null} [".gogoproto.goproto_unkeyed_all"] FileOptions .gogoproto.goproto_unkeyed_all
                 * @property {Array.<cosmos_proto.IInterfaceDescriptor>|null} [".cosmos_proto.declare_interface"] FileOptions .cosmos_proto.declare_interface
                 * @property {Array.<cosmos_proto.IScalarDescriptor>|null} [".cosmos_proto.declare_scalar"] FileOptions .cosmos_proto.declare_scalar
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpreted_option = [];
                    this[".cosmos_proto.declare_interface"] = [];
                    this[".cosmos_proto.declare_scalar"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions java_package.
                 * @member {string} java_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_package = "";
    
                /**
                 * FileOptions java_outer_classname.
                 * @member {string} java_outer_classname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_outer_classname = "";
    
                /**
                 * FileOptions java_multiple_files.
                 * @member {boolean} java_multiple_files
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_multiple_files = false;
    
                /**
                 * FileOptions java_generate_equals_and_hash.
                 * @member {boolean} java_generate_equals_and_hash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generate_equals_and_hash = false;
    
                /**
                 * FileOptions java_string_check_utf8.
                 * @member {boolean} java_string_check_utf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_string_check_utf8 = false;
    
                /**
                 * FileOptions optimize_for.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimize_for
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimize_for = 1;
    
                /**
                 * FileOptions go_package.
                 * @member {string} go_package
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.go_package = "";
    
                /**
                 * FileOptions cc_generic_services.
                 * @member {boolean} cc_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_generic_services = false;
    
                /**
                 * FileOptions java_generic_services.
                 * @member {boolean} java_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.java_generic_services = false;
    
                /**
                 * FileOptions py_generic_services.
                 * @member {boolean} py_generic_services
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.py_generic_services = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions cc_enable_arenas.
                 * @member {boolean} cc_enable_arenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.cc_enable_arenas = false;
    
                /**
                 * FileOptions objc_class_prefix.
                 * @member {string} objc_class_prefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objc_class_prefix = "";
    
                /**
                 * FileOptions csharp_namespace.
                 * @member {string} csharp_namespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharp_namespace = "";
    
                /**
                 * FileOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FileOptions .gogoproto.goproto_getters_all.
                 * @member {boolean} .gogoproto.goproto_getters_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_getters_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_enum_prefix_all.
                 * @member {boolean} .gogoproto.goproto_enum_prefix_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_enum_prefix_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_stringer_all.
                 * @member {boolean} .gogoproto.goproto_stringer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_stringer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.verbose_equal_all.
                 * @member {boolean} .gogoproto.verbose_equal_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.verbose_equal_all"] = false;
    
                /**
                 * FileOptions .gogoproto.face_all.
                 * @member {boolean} .gogoproto.face_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.face_all"] = false;
    
                /**
                 * FileOptions .gogoproto.gostring_all.
                 * @member {boolean} .gogoproto.gostring_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.gostring_all"] = false;
    
                /**
                 * FileOptions .gogoproto.populate_all.
                 * @member {boolean} .gogoproto.populate_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.populate_all"] = false;
    
                /**
                 * FileOptions .gogoproto.stringer_all.
                 * @member {boolean} .gogoproto.stringer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.stringer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.onlyone_all.
                 * @member {boolean} .gogoproto.onlyone_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.onlyone_all"] = false;
    
                /**
                 * FileOptions .gogoproto.equal_all.
                 * @member {boolean} .gogoproto.equal_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.equal_all"] = false;
    
                /**
                 * FileOptions .gogoproto.description_all.
                 * @member {boolean} .gogoproto.description_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.description_all"] = false;
    
                /**
                 * FileOptions .gogoproto.testgen_all.
                 * @member {boolean} .gogoproto.testgen_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.testgen_all"] = false;
    
                /**
                 * FileOptions .gogoproto.benchgen_all.
                 * @member {boolean} .gogoproto.benchgen_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.benchgen_all"] = false;
    
                /**
                 * FileOptions .gogoproto.marshaler_all.
                 * @member {boolean} .gogoproto.marshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.marshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.unmarshaler_all.
                 * @member {boolean} .gogoproto.unmarshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.unmarshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.stable_marshaler_all.
                 * @member {boolean} .gogoproto.stable_marshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.stable_marshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.sizer_all.
                 * @member {boolean} .gogoproto.sizer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.sizer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_enum_stringer_all.
                 * @member {boolean} .gogoproto.goproto_enum_stringer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_enum_stringer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.enum_stringer_all.
                 * @member {boolean} .gogoproto.enum_stringer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.enum_stringer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.unsafe_marshaler_all.
                 * @member {boolean} .gogoproto.unsafe_marshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.unsafe_marshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.unsafe_unmarshaler_all.
                 * @member {boolean} .gogoproto.unsafe_unmarshaler_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.unsafe_unmarshaler_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_extensions_map_all.
                 * @member {boolean} .gogoproto.goproto_extensions_map_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_extensions_map_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_unrecognized_all.
                 * @member {boolean} .gogoproto.goproto_unrecognized_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_unrecognized_all"] = false;
    
                /**
                 * FileOptions .gogoproto.gogoproto_import.
                 * @member {boolean} .gogoproto.gogoproto_import
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.gogoproto_import"] = false;
    
                /**
                 * FileOptions .gogoproto.protosizer_all.
                 * @member {boolean} .gogoproto.protosizer_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.protosizer_all"] = false;
    
                /**
                 * FileOptions .gogoproto.compare_all.
                 * @member {boolean} .gogoproto.compare_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.compare_all"] = false;
    
                /**
                 * FileOptions .gogoproto.typedecl_all.
                 * @member {boolean} .gogoproto.typedecl_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.typedecl_all"] = false;
    
                /**
                 * FileOptions .gogoproto.enumdecl_all.
                 * @member {boolean} .gogoproto.enumdecl_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.enumdecl_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_registration.
                 * @member {boolean} .gogoproto.goproto_registration
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_registration"] = false;
    
                /**
                 * FileOptions .gogoproto.messagename_all.
                 * @member {boolean} .gogoproto.messagename_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.messagename_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_sizecache_all.
                 * @member {boolean} .gogoproto.goproto_sizecache_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_sizecache_all"] = false;
    
                /**
                 * FileOptions .gogoproto.goproto_unkeyed_all.
                 * @member {boolean} .gogoproto.goproto_unkeyed_all
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".gogoproto.goproto_unkeyed_all"] = false;
    
                /**
                 * FileOptions .cosmos_proto.declare_interface.
                 * @member {Array.<cosmos_proto.IInterfaceDescriptor>} .cosmos_proto.declare_interface
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".cosmos_proto.declare_interface"] = $util.emptyArray;
    
                /**
                 * FileOptions .cosmos_proto.declare_scalar.
                 * @member {Array.<cosmos_proto.IScalarDescriptor>} .cosmos_proto.declare_scalar
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype[".cosmos_proto.declare_scalar"] = $util.emptyArray;
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.java_package != null && Object.hasOwnProperty.call(message, "java_package"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.java_package);
                    if (message.java_outer_classname != null && Object.hasOwnProperty.call(message, "java_outer_classname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.java_outer_classname);
                    if (message.optimize_for != null && Object.hasOwnProperty.call(message, "optimize_for"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimize_for);
                    if (message.java_multiple_files != null && Object.hasOwnProperty.call(message, "java_multiple_files"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.java_multiple_files);
                    if (message.go_package != null && Object.hasOwnProperty.call(message, "go_package"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.go_package);
                    if (message.cc_generic_services != null && Object.hasOwnProperty.call(message, "cc_generic_services"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.cc_generic_services);
                    if (message.java_generic_services != null && Object.hasOwnProperty.call(message, "java_generic_services"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.java_generic_services);
                    if (message.py_generic_services != null && Object.hasOwnProperty.call(message, "py_generic_services"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.py_generic_services);
                    if (message.java_generate_equals_and_hash != null && Object.hasOwnProperty.call(message, "java_generate_equals_and_hash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.java_generate_equals_and_hash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.java_string_check_utf8 != null && Object.hasOwnProperty.call(message, "java_string_check_utf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.java_string_check_utf8);
                    if (message.cc_enable_arenas != null && Object.hasOwnProperty.call(message, "cc_enable_arenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.cc_enable_arenas);
                    if (message.objc_class_prefix != null && Object.hasOwnProperty.call(message, "objc_class_prefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objc_class_prefix);
                    if (message.csharp_namespace != null && Object.hasOwnProperty.call(message, "csharp_namespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharp_namespace);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.goproto_getters_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters_all"))
                        writer.uint32(/* id 63001, wireType 0 =*/504008).bool(message[".gogoproto.goproto_getters_all"]);
                    if (message[".gogoproto.goproto_enum_prefix_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix_all"))
                        writer.uint32(/* id 63002, wireType 0 =*/504016).bool(message[".gogoproto.goproto_enum_prefix_all"]);
                    if (message[".gogoproto.goproto_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer_all"))
                        writer.uint32(/* id 63003, wireType 0 =*/504024).bool(message[".gogoproto.goproto_stringer_all"]);
                    if (message[".gogoproto.verbose_equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal_all"))
                        writer.uint32(/* id 63004, wireType 0 =*/504032).bool(message[".gogoproto.verbose_equal_all"]);
                    if (message[".gogoproto.face_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face_all"))
                        writer.uint32(/* id 63005, wireType 0 =*/504040).bool(message[".gogoproto.face_all"]);
                    if (message[".gogoproto.gostring_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring_all"))
                        writer.uint32(/* id 63006, wireType 0 =*/504048).bool(message[".gogoproto.gostring_all"]);
                    if (message[".gogoproto.populate_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate_all"))
                        writer.uint32(/* id 63007, wireType 0 =*/504056).bool(message[".gogoproto.populate_all"]);
                    if (message[".gogoproto.stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer_all"))
                        writer.uint32(/* id 63008, wireType 0 =*/504064).bool(message[".gogoproto.stringer_all"]);
                    if (message[".gogoproto.onlyone_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone_all"))
                        writer.uint32(/* id 63009, wireType 0 =*/504072).bool(message[".gogoproto.onlyone_all"]);
                    if (message[".gogoproto.equal_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal_all"))
                        writer.uint32(/* id 63013, wireType 0 =*/504104).bool(message[".gogoproto.equal_all"]);
                    if (message[".gogoproto.description_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description_all"))
                        writer.uint32(/* id 63014, wireType 0 =*/504112).bool(message[".gogoproto.description_all"]);
                    if (message[".gogoproto.testgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen_all"))
                        writer.uint32(/* id 63015, wireType 0 =*/504120).bool(message[".gogoproto.testgen_all"]);
                    if (message[".gogoproto.benchgen_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen_all"))
                        writer.uint32(/* id 63016, wireType 0 =*/504128).bool(message[".gogoproto.benchgen_all"]);
                    if (message[".gogoproto.marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler_all"))
                        writer.uint32(/* id 63017, wireType 0 =*/504136).bool(message[".gogoproto.marshaler_all"]);
                    if (message[".gogoproto.unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler_all"))
                        writer.uint32(/* id 63018, wireType 0 =*/504144).bool(message[".gogoproto.unmarshaler_all"]);
                    if (message[".gogoproto.stable_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler_all"))
                        writer.uint32(/* id 63019, wireType 0 =*/504152).bool(message[".gogoproto.stable_marshaler_all"]);
                    if (message[".gogoproto.sizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer_all"))
                        writer.uint32(/* id 63020, wireType 0 =*/504160).bool(message[".gogoproto.sizer_all"]);
                    if (message[".gogoproto.goproto_enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer_all"))
                        writer.uint32(/* id 63021, wireType 0 =*/504168).bool(message[".gogoproto.goproto_enum_stringer_all"]);
                    if (message[".gogoproto.enum_stringer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer_all"))
                        writer.uint32(/* id 63022, wireType 0 =*/504176).bool(message[".gogoproto.enum_stringer_all"]);
                    if (message[".gogoproto.unsafe_marshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler_all"))
                        writer.uint32(/* id 63023, wireType 0 =*/504184).bool(message[".gogoproto.unsafe_marshaler_all"]);
                    if (message[".gogoproto.unsafe_unmarshaler_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler_all"))
                        writer.uint32(/* id 63024, wireType 0 =*/504192).bool(message[".gogoproto.unsafe_unmarshaler_all"]);
                    if (message[".gogoproto.goproto_extensions_map_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map_all"))
                        writer.uint32(/* id 63025, wireType 0 =*/504200).bool(message[".gogoproto.goproto_extensions_map_all"]);
                    if (message[".gogoproto.goproto_unrecognized_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized_all"))
                        writer.uint32(/* id 63026, wireType 0 =*/504208).bool(message[".gogoproto.goproto_unrecognized_all"]);
                    if (message[".gogoproto.gogoproto_import"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gogoproto_import"))
                        writer.uint32(/* id 63027, wireType 0 =*/504216).bool(message[".gogoproto.gogoproto_import"]);
                    if (message[".gogoproto.protosizer_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer_all"))
                        writer.uint32(/* id 63028, wireType 0 =*/504224).bool(message[".gogoproto.protosizer_all"]);
                    if (message[".gogoproto.compare_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare_all"))
                        writer.uint32(/* id 63029, wireType 0 =*/504232).bool(message[".gogoproto.compare_all"]);
                    if (message[".gogoproto.typedecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl_all"))
                        writer.uint32(/* id 63030, wireType 0 =*/504240).bool(message[".gogoproto.typedecl_all"]);
                    if (message[".gogoproto.enumdecl_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl_all"))
                        writer.uint32(/* id 63031, wireType 0 =*/504248).bool(message[".gogoproto.enumdecl_all"]);
                    if (message[".gogoproto.goproto_registration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_registration"))
                        writer.uint32(/* id 63032, wireType 0 =*/504256).bool(message[".gogoproto.goproto_registration"]);
                    if (message[".gogoproto.messagename_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename_all"))
                        writer.uint32(/* id 63033, wireType 0 =*/504264).bool(message[".gogoproto.messagename_all"]);
                    if (message[".gogoproto.goproto_sizecache_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache_all"))
                        writer.uint32(/* id 63034, wireType 0 =*/504272).bool(message[".gogoproto.goproto_sizecache_all"]);
                    if (message[".gogoproto.goproto_unkeyed_all"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed_all"))
                        writer.uint32(/* id 63035, wireType 0 =*/504280).bool(message[".gogoproto.goproto_unkeyed_all"]);
                    if (message[".cosmos_proto.declare_interface"] != null && message[".cosmos_proto.declare_interface"].length)
                        for (var i = 0; i < message[".cosmos_proto.declare_interface"].length; ++i)
                            $root.cosmos_proto.InterfaceDescriptor.encode(message[".cosmos_proto.declare_interface"][i], writer.uint32(/* id 793021, wireType 2 =*/6344170).fork()).ldelim();
                    if (message[".cosmos_proto.declare_scalar"] != null && message[".cosmos_proto.declare_scalar"].length)
                        for (var i = 0; i < message[".cosmos_proto.declare_scalar"].length; ++i)
                            $root.cosmos_proto.ScalarDescriptor.encode(message[".cosmos_proto.declare_scalar"][i], writer.uint32(/* id 793022, wireType 2 =*/6344178).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.java_package = reader.string();
                            break;
                        case 8:
                            message.java_outer_classname = reader.string();
                            break;
                        case 10:
                            message.java_multiple_files = reader.bool();
                            break;
                        case 20:
                            message.java_generate_equals_and_hash = reader.bool();
                            break;
                        case 27:
                            message.java_string_check_utf8 = reader.bool();
                            break;
                        case 9:
                            message.optimize_for = reader.int32();
                            break;
                        case 11:
                            message.go_package = reader.string();
                            break;
                        case 16:
                            message.cc_generic_services = reader.bool();
                            break;
                        case 17:
                            message.java_generic_services = reader.bool();
                            break;
                        case 18:
                            message.py_generic_services = reader.bool();
                            break;
                        case 23:
                            message.deprecated = reader.bool();
                            break;
                        case 31:
                            message.cc_enable_arenas = reader.bool();
                            break;
                        case 36:
                            message.objc_class_prefix = reader.string();
                            break;
                        case 37:
                            message.csharp_namespace = reader.string();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 63001:
                            message[".gogoproto.goproto_getters_all"] = reader.bool();
                            break;
                        case 63002:
                            message[".gogoproto.goproto_enum_prefix_all"] = reader.bool();
                            break;
                        case 63003:
                            message[".gogoproto.goproto_stringer_all"] = reader.bool();
                            break;
                        case 63004:
                            message[".gogoproto.verbose_equal_all"] = reader.bool();
                            break;
                        case 63005:
                            message[".gogoproto.face_all"] = reader.bool();
                            break;
                        case 63006:
                            message[".gogoproto.gostring_all"] = reader.bool();
                            break;
                        case 63007:
                            message[".gogoproto.populate_all"] = reader.bool();
                            break;
                        case 63008:
                            message[".gogoproto.stringer_all"] = reader.bool();
                            break;
                        case 63009:
                            message[".gogoproto.onlyone_all"] = reader.bool();
                            break;
                        case 63013:
                            message[".gogoproto.equal_all"] = reader.bool();
                            break;
                        case 63014:
                            message[".gogoproto.description_all"] = reader.bool();
                            break;
                        case 63015:
                            message[".gogoproto.testgen_all"] = reader.bool();
                            break;
                        case 63016:
                            message[".gogoproto.benchgen_all"] = reader.bool();
                            break;
                        case 63017:
                            message[".gogoproto.marshaler_all"] = reader.bool();
                            break;
                        case 63018:
                            message[".gogoproto.unmarshaler_all"] = reader.bool();
                            break;
                        case 63019:
                            message[".gogoproto.stable_marshaler_all"] = reader.bool();
                            break;
                        case 63020:
                            message[".gogoproto.sizer_all"] = reader.bool();
                            break;
                        case 63021:
                            message[".gogoproto.goproto_enum_stringer_all"] = reader.bool();
                            break;
                        case 63022:
                            message[".gogoproto.enum_stringer_all"] = reader.bool();
                            break;
                        case 63023:
                            message[".gogoproto.unsafe_marshaler_all"] = reader.bool();
                            break;
                        case 63024:
                            message[".gogoproto.unsafe_unmarshaler_all"] = reader.bool();
                            break;
                        case 63025:
                            message[".gogoproto.goproto_extensions_map_all"] = reader.bool();
                            break;
                        case 63026:
                            message[".gogoproto.goproto_unrecognized_all"] = reader.bool();
                            break;
                        case 63027:
                            message[".gogoproto.gogoproto_import"] = reader.bool();
                            break;
                        case 63028:
                            message[".gogoproto.protosizer_all"] = reader.bool();
                            break;
                        case 63029:
                            message[".gogoproto.compare_all"] = reader.bool();
                            break;
                        case 63030:
                            message[".gogoproto.typedecl_all"] = reader.bool();
                            break;
                        case 63031:
                            message[".gogoproto.enumdecl_all"] = reader.bool();
                            break;
                        case 63032:
                            message[".gogoproto.goproto_registration"] = reader.bool();
                            break;
                        case 63033:
                            message[".gogoproto.messagename_all"] = reader.bool();
                            break;
                        case 63034:
                            message[".gogoproto.goproto_sizecache_all"] = reader.bool();
                            break;
                        case 63035:
                            message[".gogoproto.goproto_unkeyed_all"] = reader.bool();
                            break;
                        case 793021:
                            if (!(message[".cosmos_proto.declare_interface"] && message[".cosmos_proto.declare_interface"].length))
                                message[".cosmos_proto.declare_interface"] = [];
                            message[".cosmos_proto.declare_interface"].push($root.cosmos_proto.InterfaceDescriptor.decode(reader, reader.uint32()));
                            break;
                        case 793022:
                            if (!(message[".cosmos_proto.declare_scalar"] && message[".cosmos_proto.declare_scalar"].length))
                                message[".cosmos_proto.declare_scalar"] = [];
                            message[".cosmos_proto.declare_scalar"].push($root.cosmos_proto.ScalarDescriptor.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        if (!$util.isString(message.java_package))
                            return "java_package: string expected";
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        if (!$util.isString(message.java_outer_classname))
                            return "java_outer_classname: string expected";
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        if (typeof message.java_multiple_files !== "boolean")
                            return "java_multiple_files: boolean expected";
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        if (typeof message.java_generate_equals_and_hash !== "boolean")
                            return "java_generate_equals_and_hash: boolean expected";
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        if (typeof message.java_string_check_utf8 !== "boolean")
                            return "java_string_check_utf8: boolean expected";
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        switch (message.optimize_for) {
                        default:
                            return "optimize_for: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        if (!$util.isString(message.go_package))
                            return "go_package: string expected";
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        if (typeof message.cc_generic_services !== "boolean")
                            return "cc_generic_services: boolean expected";
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        if (typeof message.java_generic_services !== "boolean")
                            return "java_generic_services: boolean expected";
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        if (typeof message.py_generic_services !== "boolean")
                            return "py_generic_services: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        if (typeof message.cc_enable_arenas !== "boolean")
                            return "cc_enable_arenas: boolean expected";
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        if (!$util.isString(message.objc_class_prefix))
                            return "objc_class_prefix: string expected";
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        if (!$util.isString(message.csharp_namespace))
                            return "csharp_namespace: string expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                        if (typeof message[".gogoproto.goproto_getters_all"] !== "boolean")
                            return ".gogoproto.goproto_getters_all: boolean expected";
                    if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                        if (typeof message[".gogoproto.goproto_enum_prefix_all"] !== "boolean")
                            return ".gogoproto.goproto_enum_prefix_all: boolean expected";
                    if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                        if (typeof message[".gogoproto.goproto_stringer_all"] !== "boolean")
                            return ".gogoproto.goproto_stringer_all: boolean expected";
                    if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                        if (typeof message[".gogoproto.verbose_equal_all"] !== "boolean")
                            return ".gogoproto.verbose_equal_all: boolean expected";
                    if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                        if (typeof message[".gogoproto.face_all"] !== "boolean")
                            return ".gogoproto.face_all: boolean expected";
                    if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                        if (typeof message[".gogoproto.gostring_all"] !== "boolean")
                            return ".gogoproto.gostring_all: boolean expected";
                    if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                        if (typeof message[".gogoproto.populate_all"] !== "boolean")
                            return ".gogoproto.populate_all: boolean expected";
                    if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                        if (typeof message[".gogoproto.stringer_all"] !== "boolean")
                            return ".gogoproto.stringer_all: boolean expected";
                    if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                        if (typeof message[".gogoproto.onlyone_all"] !== "boolean")
                            return ".gogoproto.onlyone_all: boolean expected";
                    if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                        if (typeof message[".gogoproto.equal_all"] !== "boolean")
                            return ".gogoproto.equal_all: boolean expected";
                    if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                        if (typeof message[".gogoproto.description_all"] !== "boolean")
                            return ".gogoproto.description_all: boolean expected";
                    if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                        if (typeof message[".gogoproto.testgen_all"] !== "boolean")
                            return ".gogoproto.testgen_all: boolean expected";
                    if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                        if (typeof message[".gogoproto.benchgen_all"] !== "boolean")
                            return ".gogoproto.benchgen_all: boolean expected";
                    if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                        if (typeof message[".gogoproto.marshaler_all"] !== "boolean")
                            return ".gogoproto.marshaler_all: boolean expected";
                    if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                        if (typeof message[".gogoproto.unmarshaler_all"] !== "boolean")
                            return ".gogoproto.unmarshaler_all: boolean expected";
                    if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                        if (typeof message[".gogoproto.stable_marshaler_all"] !== "boolean")
                            return ".gogoproto.stable_marshaler_all: boolean expected";
                    if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                        if (typeof message[".gogoproto.sizer_all"] !== "boolean")
                            return ".gogoproto.sizer_all: boolean expected";
                    if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                        if (typeof message[".gogoproto.goproto_enum_stringer_all"] !== "boolean")
                            return ".gogoproto.goproto_enum_stringer_all: boolean expected";
                    if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                        if (typeof message[".gogoproto.enum_stringer_all"] !== "boolean")
                            return ".gogoproto.enum_stringer_all: boolean expected";
                    if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                        if (typeof message[".gogoproto.unsafe_marshaler_all"] !== "boolean")
                            return ".gogoproto.unsafe_marshaler_all: boolean expected";
                    if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                        if (typeof message[".gogoproto.unsafe_unmarshaler_all"] !== "boolean")
                            return ".gogoproto.unsafe_unmarshaler_all: boolean expected";
                    if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                        if (typeof message[".gogoproto.goproto_extensions_map_all"] !== "boolean")
                            return ".gogoproto.goproto_extensions_map_all: boolean expected";
                    if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                        if (typeof message[".gogoproto.goproto_unrecognized_all"] !== "boolean")
                            return ".gogoproto.goproto_unrecognized_all: boolean expected";
                    if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                        if (typeof message[".gogoproto.gogoproto_import"] !== "boolean")
                            return ".gogoproto.gogoproto_import: boolean expected";
                    if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                        if (typeof message[".gogoproto.protosizer_all"] !== "boolean")
                            return ".gogoproto.protosizer_all: boolean expected";
                    if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                        if (typeof message[".gogoproto.compare_all"] !== "boolean")
                            return ".gogoproto.compare_all: boolean expected";
                    if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                        if (typeof message[".gogoproto.typedecl_all"] !== "boolean")
                            return ".gogoproto.typedecl_all: boolean expected";
                    if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                        if (typeof message[".gogoproto.enumdecl_all"] !== "boolean")
                            return ".gogoproto.enumdecl_all: boolean expected";
                    if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                        if (typeof message[".gogoproto.goproto_registration"] !== "boolean")
                            return ".gogoproto.goproto_registration: boolean expected";
                    if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                        if (typeof message[".gogoproto.messagename_all"] !== "boolean")
                            return ".gogoproto.messagename_all: boolean expected";
                    if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                        if (typeof message[".gogoproto.goproto_sizecache_all"] !== "boolean")
                            return ".gogoproto.goproto_sizecache_all: boolean expected";
                    if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                        if (typeof message[".gogoproto.goproto_unkeyed_all"] !== "boolean")
                            return ".gogoproto.goproto_unkeyed_all: boolean expected";
                    if (message[".cosmos_proto.declare_interface"] != null && message.hasOwnProperty(".cosmos_proto.declare_interface")) {
                        if (!Array.isArray(message[".cosmos_proto.declare_interface"]))
                            return ".cosmos_proto.declare_interface: array expected";
                        for (var i = 0; i < message[".cosmos_proto.declare_interface"].length; ++i) {
                            var error = $root.cosmos_proto.InterfaceDescriptor.verify(message[".cosmos_proto.declare_interface"][i]);
                            if (error)
                                return ".cosmos_proto.declare_interface." + error;
                        }
                    }
                    if (message[".cosmos_proto.declare_scalar"] != null && message.hasOwnProperty(".cosmos_proto.declare_scalar")) {
                        if (!Array.isArray(message[".cosmos_proto.declare_scalar"]))
                            return ".cosmos_proto.declare_scalar: array expected";
                        for (var i = 0; i < message[".cosmos_proto.declare_scalar"].length; ++i) {
                            var error = $root.cosmos_proto.ScalarDescriptor.verify(message[".cosmos_proto.declare_scalar"][i]);
                            if (error)
                                return ".cosmos_proto.declare_scalar." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.java_package != null)
                        message.java_package = String(object.java_package);
                    if (object.java_outer_classname != null)
                        message.java_outer_classname = String(object.java_outer_classname);
                    if (object.java_multiple_files != null)
                        message.java_multiple_files = Boolean(object.java_multiple_files);
                    if (object.java_generate_equals_and_hash != null)
                        message.java_generate_equals_and_hash = Boolean(object.java_generate_equals_and_hash);
                    if (object.java_string_check_utf8 != null)
                        message.java_string_check_utf8 = Boolean(object.java_string_check_utf8);
                    switch (object.optimize_for) {
                    case "SPEED":
                    case 1:
                        message.optimize_for = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimize_for = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimize_for = 3;
                        break;
                    }
                    if (object.go_package != null)
                        message.go_package = String(object.go_package);
                    if (object.cc_generic_services != null)
                        message.cc_generic_services = Boolean(object.cc_generic_services);
                    if (object.java_generic_services != null)
                        message.java_generic_services = Boolean(object.java_generic_services);
                    if (object.py_generic_services != null)
                        message.py_generic_services = Boolean(object.py_generic_services);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.cc_enable_arenas != null)
                        message.cc_enable_arenas = Boolean(object.cc_enable_arenas);
                    if (object.objc_class_prefix != null)
                        message.objc_class_prefix = String(object.objc_class_prefix);
                    if (object.csharp_namespace != null)
                        message.csharp_namespace = String(object.csharp_namespace);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.goproto_getters_all"] != null)
                        message[".gogoproto.goproto_getters_all"] = Boolean(object[".gogoproto.goproto_getters_all"]);
                    if (object[".gogoproto.goproto_enum_prefix_all"] != null)
                        message[".gogoproto.goproto_enum_prefix_all"] = Boolean(object[".gogoproto.goproto_enum_prefix_all"]);
                    if (object[".gogoproto.goproto_stringer_all"] != null)
                        message[".gogoproto.goproto_stringer_all"] = Boolean(object[".gogoproto.goproto_stringer_all"]);
                    if (object[".gogoproto.verbose_equal_all"] != null)
                        message[".gogoproto.verbose_equal_all"] = Boolean(object[".gogoproto.verbose_equal_all"]);
                    if (object[".gogoproto.face_all"] != null)
                        message[".gogoproto.face_all"] = Boolean(object[".gogoproto.face_all"]);
                    if (object[".gogoproto.gostring_all"] != null)
                        message[".gogoproto.gostring_all"] = Boolean(object[".gogoproto.gostring_all"]);
                    if (object[".gogoproto.populate_all"] != null)
                        message[".gogoproto.populate_all"] = Boolean(object[".gogoproto.populate_all"]);
                    if (object[".gogoproto.stringer_all"] != null)
                        message[".gogoproto.stringer_all"] = Boolean(object[".gogoproto.stringer_all"]);
                    if (object[".gogoproto.onlyone_all"] != null)
                        message[".gogoproto.onlyone_all"] = Boolean(object[".gogoproto.onlyone_all"]);
                    if (object[".gogoproto.equal_all"] != null)
                        message[".gogoproto.equal_all"] = Boolean(object[".gogoproto.equal_all"]);
                    if (object[".gogoproto.description_all"] != null)
                        message[".gogoproto.description_all"] = Boolean(object[".gogoproto.description_all"]);
                    if (object[".gogoproto.testgen_all"] != null)
                        message[".gogoproto.testgen_all"] = Boolean(object[".gogoproto.testgen_all"]);
                    if (object[".gogoproto.benchgen_all"] != null)
                        message[".gogoproto.benchgen_all"] = Boolean(object[".gogoproto.benchgen_all"]);
                    if (object[".gogoproto.marshaler_all"] != null)
                        message[".gogoproto.marshaler_all"] = Boolean(object[".gogoproto.marshaler_all"]);
                    if (object[".gogoproto.unmarshaler_all"] != null)
                        message[".gogoproto.unmarshaler_all"] = Boolean(object[".gogoproto.unmarshaler_all"]);
                    if (object[".gogoproto.stable_marshaler_all"] != null)
                        message[".gogoproto.stable_marshaler_all"] = Boolean(object[".gogoproto.stable_marshaler_all"]);
                    if (object[".gogoproto.sizer_all"] != null)
                        message[".gogoproto.sizer_all"] = Boolean(object[".gogoproto.sizer_all"]);
                    if (object[".gogoproto.goproto_enum_stringer_all"] != null)
                        message[".gogoproto.goproto_enum_stringer_all"] = Boolean(object[".gogoproto.goproto_enum_stringer_all"]);
                    if (object[".gogoproto.enum_stringer_all"] != null)
                        message[".gogoproto.enum_stringer_all"] = Boolean(object[".gogoproto.enum_stringer_all"]);
                    if (object[".gogoproto.unsafe_marshaler_all"] != null)
                        message[".gogoproto.unsafe_marshaler_all"] = Boolean(object[".gogoproto.unsafe_marshaler_all"]);
                    if (object[".gogoproto.unsafe_unmarshaler_all"] != null)
                        message[".gogoproto.unsafe_unmarshaler_all"] = Boolean(object[".gogoproto.unsafe_unmarshaler_all"]);
                    if (object[".gogoproto.goproto_extensions_map_all"] != null)
                        message[".gogoproto.goproto_extensions_map_all"] = Boolean(object[".gogoproto.goproto_extensions_map_all"]);
                    if (object[".gogoproto.goproto_unrecognized_all"] != null)
                        message[".gogoproto.goproto_unrecognized_all"] = Boolean(object[".gogoproto.goproto_unrecognized_all"]);
                    if (object[".gogoproto.gogoproto_import"] != null)
                        message[".gogoproto.gogoproto_import"] = Boolean(object[".gogoproto.gogoproto_import"]);
                    if (object[".gogoproto.protosizer_all"] != null)
                        message[".gogoproto.protosizer_all"] = Boolean(object[".gogoproto.protosizer_all"]);
                    if (object[".gogoproto.compare_all"] != null)
                        message[".gogoproto.compare_all"] = Boolean(object[".gogoproto.compare_all"]);
                    if (object[".gogoproto.typedecl_all"] != null)
                        message[".gogoproto.typedecl_all"] = Boolean(object[".gogoproto.typedecl_all"]);
                    if (object[".gogoproto.enumdecl_all"] != null)
                        message[".gogoproto.enumdecl_all"] = Boolean(object[".gogoproto.enumdecl_all"]);
                    if (object[".gogoproto.goproto_registration"] != null)
                        message[".gogoproto.goproto_registration"] = Boolean(object[".gogoproto.goproto_registration"]);
                    if (object[".gogoproto.messagename_all"] != null)
                        message[".gogoproto.messagename_all"] = Boolean(object[".gogoproto.messagename_all"]);
                    if (object[".gogoproto.goproto_sizecache_all"] != null)
                        message[".gogoproto.goproto_sizecache_all"] = Boolean(object[".gogoproto.goproto_sizecache_all"]);
                    if (object[".gogoproto.goproto_unkeyed_all"] != null)
                        message[".gogoproto.goproto_unkeyed_all"] = Boolean(object[".gogoproto.goproto_unkeyed_all"]);
                    if (object[".cosmos_proto.declare_interface"]) {
                        if (!Array.isArray(object[".cosmos_proto.declare_interface"]))
                            throw TypeError(".google.protobuf.FileOptions..cosmos_proto.declare_interface: array expected");
                        message[".cosmos_proto.declare_interface"] = [];
                        for (var i = 0; i < object[".cosmos_proto.declare_interface"].length; ++i) {
                            if (typeof object[".cosmos_proto.declare_interface"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..cosmos_proto.declare_interface: object expected");
                            message[".cosmos_proto.declare_interface"][i] = $root.cosmos_proto.InterfaceDescriptor.fromObject(object[".cosmos_proto.declare_interface"][i]);
                        }
                    }
                    if (object[".cosmos_proto.declare_scalar"]) {
                        if (!Array.isArray(object[".cosmos_proto.declare_scalar"]))
                            throw TypeError(".google.protobuf.FileOptions..cosmos_proto.declare_scalar: array expected");
                        message[".cosmos_proto.declare_scalar"] = [];
                        for (var i = 0; i < object[".cosmos_proto.declare_scalar"].length; ++i) {
                            if (typeof object[".cosmos_proto.declare_scalar"][i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions..cosmos_proto.declare_scalar: object expected");
                            message[".cosmos_proto.declare_scalar"][i] = $root.cosmos_proto.ScalarDescriptor.fromObject(object[".cosmos_proto.declare_scalar"][i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpreted_option = [];
                        object[".cosmos_proto.declare_interface"] = [];
                        object[".cosmos_proto.declare_scalar"] = [];
                    }
                    if (options.defaults) {
                        object.java_package = "";
                        object.java_outer_classname = "";
                        object.optimize_for = options.enums === String ? "SPEED" : 1;
                        object.java_multiple_files = false;
                        object.go_package = "";
                        object.cc_generic_services = false;
                        object.java_generic_services = false;
                        object.py_generic_services = false;
                        object.java_generate_equals_and_hash = false;
                        object.deprecated = false;
                        object.java_string_check_utf8 = false;
                        object.cc_enable_arenas = false;
                        object.objc_class_prefix = "";
                        object.csharp_namespace = "";
                        object[".gogoproto.goproto_getters_all"] = false;
                        object[".gogoproto.goproto_enum_prefix_all"] = false;
                        object[".gogoproto.goproto_stringer_all"] = false;
                        object[".gogoproto.verbose_equal_all"] = false;
                        object[".gogoproto.face_all"] = false;
                        object[".gogoproto.gostring_all"] = false;
                        object[".gogoproto.populate_all"] = false;
                        object[".gogoproto.stringer_all"] = false;
                        object[".gogoproto.onlyone_all"] = false;
                        object[".gogoproto.equal_all"] = false;
                        object[".gogoproto.description_all"] = false;
                        object[".gogoproto.testgen_all"] = false;
                        object[".gogoproto.benchgen_all"] = false;
                        object[".gogoproto.marshaler_all"] = false;
                        object[".gogoproto.unmarshaler_all"] = false;
                        object[".gogoproto.stable_marshaler_all"] = false;
                        object[".gogoproto.sizer_all"] = false;
                        object[".gogoproto.goproto_enum_stringer_all"] = false;
                        object[".gogoproto.enum_stringer_all"] = false;
                        object[".gogoproto.unsafe_marshaler_all"] = false;
                        object[".gogoproto.unsafe_unmarshaler_all"] = false;
                        object[".gogoproto.goproto_extensions_map_all"] = false;
                        object[".gogoproto.goproto_unrecognized_all"] = false;
                        object[".gogoproto.gogoproto_import"] = false;
                        object[".gogoproto.protosizer_all"] = false;
                        object[".gogoproto.compare_all"] = false;
                        object[".gogoproto.typedecl_all"] = false;
                        object[".gogoproto.enumdecl_all"] = false;
                        object[".gogoproto.goproto_registration"] = false;
                        object[".gogoproto.messagename_all"] = false;
                        object[".gogoproto.goproto_sizecache_all"] = false;
                        object[".gogoproto.goproto_unkeyed_all"] = false;
                    }
                    if (message.java_package != null && message.hasOwnProperty("java_package"))
                        object.java_package = message.java_package;
                    if (message.java_outer_classname != null && message.hasOwnProperty("java_outer_classname"))
                        object.java_outer_classname = message.java_outer_classname;
                    if (message.optimize_for != null && message.hasOwnProperty("optimize_for"))
                        object.optimize_for = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimize_for] : message.optimize_for;
                    if (message.java_multiple_files != null && message.hasOwnProperty("java_multiple_files"))
                        object.java_multiple_files = message.java_multiple_files;
                    if (message.go_package != null && message.hasOwnProperty("go_package"))
                        object.go_package = message.go_package;
                    if (message.cc_generic_services != null && message.hasOwnProperty("cc_generic_services"))
                        object.cc_generic_services = message.cc_generic_services;
                    if (message.java_generic_services != null && message.hasOwnProperty("java_generic_services"))
                        object.java_generic_services = message.java_generic_services;
                    if (message.py_generic_services != null && message.hasOwnProperty("py_generic_services"))
                        object.py_generic_services = message.py_generic_services;
                    if (message.java_generate_equals_and_hash != null && message.hasOwnProperty("java_generate_equals_and_hash"))
                        object.java_generate_equals_and_hash = message.java_generate_equals_and_hash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.java_string_check_utf8 != null && message.hasOwnProperty("java_string_check_utf8"))
                        object.java_string_check_utf8 = message.java_string_check_utf8;
                    if (message.cc_enable_arenas != null && message.hasOwnProperty("cc_enable_arenas"))
                        object.cc_enable_arenas = message.cc_enable_arenas;
                    if (message.objc_class_prefix != null && message.hasOwnProperty("objc_class_prefix"))
                        object.objc_class_prefix = message.objc_class_prefix;
                    if (message.csharp_namespace != null && message.hasOwnProperty("csharp_namespace"))
                        object.csharp_namespace = message.csharp_namespace;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.goproto_getters_all"] != null && message.hasOwnProperty(".gogoproto.goproto_getters_all"))
                        object[".gogoproto.goproto_getters_all"] = message[".gogoproto.goproto_getters_all"];
                    if (message[".gogoproto.goproto_enum_prefix_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix_all"))
                        object[".gogoproto.goproto_enum_prefix_all"] = message[".gogoproto.goproto_enum_prefix_all"];
                    if (message[".gogoproto.goproto_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer_all"))
                        object[".gogoproto.goproto_stringer_all"] = message[".gogoproto.goproto_stringer_all"];
                    if (message[".gogoproto.verbose_equal_all"] != null && message.hasOwnProperty(".gogoproto.verbose_equal_all"))
                        object[".gogoproto.verbose_equal_all"] = message[".gogoproto.verbose_equal_all"];
                    if (message[".gogoproto.face_all"] != null && message.hasOwnProperty(".gogoproto.face_all"))
                        object[".gogoproto.face_all"] = message[".gogoproto.face_all"];
                    if (message[".gogoproto.gostring_all"] != null && message.hasOwnProperty(".gogoproto.gostring_all"))
                        object[".gogoproto.gostring_all"] = message[".gogoproto.gostring_all"];
                    if (message[".gogoproto.populate_all"] != null && message.hasOwnProperty(".gogoproto.populate_all"))
                        object[".gogoproto.populate_all"] = message[".gogoproto.populate_all"];
                    if (message[".gogoproto.stringer_all"] != null && message.hasOwnProperty(".gogoproto.stringer_all"))
                        object[".gogoproto.stringer_all"] = message[".gogoproto.stringer_all"];
                    if (message[".gogoproto.onlyone_all"] != null && message.hasOwnProperty(".gogoproto.onlyone_all"))
                        object[".gogoproto.onlyone_all"] = message[".gogoproto.onlyone_all"];
                    if (message[".gogoproto.equal_all"] != null && message.hasOwnProperty(".gogoproto.equal_all"))
                        object[".gogoproto.equal_all"] = message[".gogoproto.equal_all"];
                    if (message[".gogoproto.description_all"] != null && message.hasOwnProperty(".gogoproto.description_all"))
                        object[".gogoproto.description_all"] = message[".gogoproto.description_all"];
                    if (message[".gogoproto.testgen_all"] != null && message.hasOwnProperty(".gogoproto.testgen_all"))
                        object[".gogoproto.testgen_all"] = message[".gogoproto.testgen_all"];
                    if (message[".gogoproto.benchgen_all"] != null && message.hasOwnProperty(".gogoproto.benchgen_all"))
                        object[".gogoproto.benchgen_all"] = message[".gogoproto.benchgen_all"];
                    if (message[".gogoproto.marshaler_all"] != null && message.hasOwnProperty(".gogoproto.marshaler_all"))
                        object[".gogoproto.marshaler_all"] = message[".gogoproto.marshaler_all"];
                    if (message[".gogoproto.unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unmarshaler_all"))
                        object[".gogoproto.unmarshaler_all"] = message[".gogoproto.unmarshaler_all"];
                    if (message[".gogoproto.stable_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler_all"))
                        object[".gogoproto.stable_marshaler_all"] = message[".gogoproto.stable_marshaler_all"];
                    if (message[".gogoproto.sizer_all"] != null && message.hasOwnProperty(".gogoproto.sizer_all"))
                        object[".gogoproto.sizer_all"] = message[".gogoproto.sizer_all"];
                    if (message[".gogoproto.goproto_enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer_all"))
                        object[".gogoproto.goproto_enum_stringer_all"] = message[".gogoproto.goproto_enum_stringer_all"];
                    if (message[".gogoproto.enum_stringer_all"] != null && message.hasOwnProperty(".gogoproto.enum_stringer_all"))
                        object[".gogoproto.enum_stringer_all"] = message[".gogoproto.enum_stringer_all"];
                    if (message[".gogoproto.unsafe_marshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler_all"))
                        object[".gogoproto.unsafe_marshaler_all"] = message[".gogoproto.unsafe_marshaler_all"];
                    if (message[".gogoproto.unsafe_unmarshaler_all"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler_all"))
                        object[".gogoproto.unsafe_unmarshaler_all"] = message[".gogoproto.unsafe_unmarshaler_all"];
                    if (message[".gogoproto.goproto_extensions_map_all"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map_all"))
                        object[".gogoproto.goproto_extensions_map_all"] = message[".gogoproto.goproto_extensions_map_all"];
                    if (message[".gogoproto.goproto_unrecognized_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized_all"))
                        object[".gogoproto.goproto_unrecognized_all"] = message[".gogoproto.goproto_unrecognized_all"];
                    if (message[".gogoproto.gogoproto_import"] != null && message.hasOwnProperty(".gogoproto.gogoproto_import"))
                        object[".gogoproto.gogoproto_import"] = message[".gogoproto.gogoproto_import"];
                    if (message[".gogoproto.protosizer_all"] != null && message.hasOwnProperty(".gogoproto.protosizer_all"))
                        object[".gogoproto.protosizer_all"] = message[".gogoproto.protosizer_all"];
                    if (message[".gogoproto.compare_all"] != null && message.hasOwnProperty(".gogoproto.compare_all"))
                        object[".gogoproto.compare_all"] = message[".gogoproto.compare_all"];
                    if (message[".gogoproto.typedecl_all"] != null && message.hasOwnProperty(".gogoproto.typedecl_all"))
                        object[".gogoproto.typedecl_all"] = message[".gogoproto.typedecl_all"];
                    if (message[".gogoproto.enumdecl_all"] != null && message.hasOwnProperty(".gogoproto.enumdecl_all"))
                        object[".gogoproto.enumdecl_all"] = message[".gogoproto.enumdecl_all"];
                    if (message[".gogoproto.goproto_registration"] != null && message.hasOwnProperty(".gogoproto.goproto_registration"))
                        object[".gogoproto.goproto_registration"] = message[".gogoproto.goproto_registration"];
                    if (message[".gogoproto.messagename_all"] != null && message.hasOwnProperty(".gogoproto.messagename_all"))
                        object[".gogoproto.messagename_all"] = message[".gogoproto.messagename_all"];
                    if (message[".gogoproto.goproto_sizecache_all"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache_all"))
                        object[".gogoproto.goproto_sizecache_all"] = message[".gogoproto.goproto_sizecache_all"];
                    if (message[".gogoproto.goproto_unkeyed_all"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed_all"))
                        object[".gogoproto.goproto_unkeyed_all"] = message[".gogoproto.goproto_unkeyed_all"];
                    if (message[".cosmos_proto.declare_interface"] && message[".cosmos_proto.declare_interface"].length) {
                        object[".cosmos_proto.declare_interface"] = [];
                        for (var j = 0; j < message[".cosmos_proto.declare_interface"].length; ++j)
                            object[".cosmos_proto.declare_interface"][j] = $root.cosmos_proto.InterfaceDescriptor.toObject(message[".cosmos_proto.declare_interface"][j], options);
                    }
                    if (message[".cosmos_proto.declare_scalar"] && message[".cosmos_proto.declare_scalar"].length) {
                        object[".cosmos_proto.declare_scalar"] = [];
                        for (var j = 0; j < message[".cosmos_proto.declare_scalar"].length; ++j)
                            object[".cosmos_proto.declare_scalar"][j] = $root.cosmos_proto.ScalarDescriptor.toObject(message[".cosmos_proto.declare_scalar"][j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [message_set_wire_format] MessageOptions message_set_wire_format
                 * @property {boolean|null} [no_standard_descriptor_accessor] MessageOptions no_standard_descriptor_accessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [map_entry] MessageOptions map_entry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MessageOptions uninterpreted_option
                 * @property {boolean|null} [".gogoproto.goproto_getters"] MessageOptions .gogoproto.goproto_getters
                 * @property {boolean|null} [".gogoproto.goproto_stringer"] MessageOptions .gogoproto.goproto_stringer
                 * @property {boolean|null} [".gogoproto.verbose_equal"] MessageOptions .gogoproto.verbose_equal
                 * @property {boolean|null} [".gogoproto.face"] MessageOptions .gogoproto.face
                 * @property {boolean|null} [".gogoproto.gostring"] MessageOptions .gogoproto.gostring
                 * @property {boolean|null} [".gogoproto.populate"] MessageOptions .gogoproto.populate
                 * @property {boolean|null} [".gogoproto.stringer"] MessageOptions .gogoproto.stringer
                 * @property {boolean|null} [".gogoproto.onlyone"] MessageOptions .gogoproto.onlyone
                 * @property {boolean|null} [".gogoproto.equal"] MessageOptions .gogoproto.equal
                 * @property {boolean|null} [".gogoproto.description"] MessageOptions .gogoproto.description
                 * @property {boolean|null} [".gogoproto.testgen"] MessageOptions .gogoproto.testgen
                 * @property {boolean|null} [".gogoproto.benchgen"] MessageOptions .gogoproto.benchgen
                 * @property {boolean|null} [".gogoproto.marshaler"] MessageOptions .gogoproto.marshaler
                 * @property {boolean|null} [".gogoproto.unmarshaler"] MessageOptions .gogoproto.unmarshaler
                 * @property {boolean|null} [".gogoproto.stable_marshaler"] MessageOptions .gogoproto.stable_marshaler
                 * @property {boolean|null} [".gogoproto.sizer"] MessageOptions .gogoproto.sizer
                 * @property {boolean|null} [".gogoproto.unsafe_marshaler"] MessageOptions .gogoproto.unsafe_marshaler
                 * @property {boolean|null} [".gogoproto.unsafe_unmarshaler"] MessageOptions .gogoproto.unsafe_unmarshaler
                 * @property {boolean|null} [".gogoproto.goproto_extensions_map"] MessageOptions .gogoproto.goproto_extensions_map
                 * @property {boolean|null} [".gogoproto.goproto_unrecognized"] MessageOptions .gogoproto.goproto_unrecognized
                 * @property {boolean|null} [".gogoproto.protosizer"] MessageOptions .gogoproto.protosizer
                 * @property {boolean|null} [".gogoproto.compare"] MessageOptions .gogoproto.compare
                 * @property {boolean|null} [".gogoproto.typedecl"] MessageOptions .gogoproto.typedecl
                 * @property {boolean|null} [".gogoproto.messagename"] MessageOptions .gogoproto.messagename
                 * @property {boolean|null} [".gogoproto.goproto_sizecache"] MessageOptions .gogoproto.goproto_sizecache
                 * @property {boolean|null} [".gogoproto.goproto_unkeyed"] MessageOptions .gogoproto.goproto_unkeyed
                 * @property {Array.<string>|null} [".cosmos_proto.implements_interface"] MessageOptions .cosmos_proto.implements_interface
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpreted_option = [];
                    this[".cosmos_proto.implements_interface"] = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions message_set_wire_format.
                 * @member {boolean} message_set_wire_format
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.message_set_wire_format = false;
    
                /**
                 * MessageOptions no_standard_descriptor_accessor.
                 * @member {boolean} no_standard_descriptor_accessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.no_standard_descriptor_accessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions map_entry.
                 * @member {boolean} map_entry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.map_entry = false;
    
                /**
                 * MessageOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MessageOptions .gogoproto.goproto_getters.
                 * @member {boolean} .gogoproto.goproto_getters
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_getters"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_stringer.
                 * @member {boolean} .gogoproto.goproto_stringer
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_stringer"] = false;
    
                /**
                 * MessageOptions .gogoproto.verbose_equal.
                 * @member {boolean} .gogoproto.verbose_equal
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.verbose_equal"] = false;
    
                /**
                 * MessageOptions .gogoproto.face.
                 * @member {boolean} .gogoproto.face
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.face"] = false;
    
                /**
                 * MessageOptions .gogoproto.gostring.
                 * @member {boolean} .gogoproto.gostring
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.gostring"] = false;
    
                /**
                 * MessageOptions .gogoproto.populate.
                 * @member {boolean} .gogoproto.populate
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.populate"] = false;
    
                /**
                 * MessageOptions .gogoproto.stringer.
                 * @member {boolean} .gogoproto.stringer
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.stringer"] = false;
    
                /**
                 * MessageOptions .gogoproto.onlyone.
                 * @member {boolean} .gogoproto.onlyone
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.onlyone"] = false;
    
                /**
                 * MessageOptions .gogoproto.equal.
                 * @member {boolean} .gogoproto.equal
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.equal"] = false;
    
                /**
                 * MessageOptions .gogoproto.description.
                 * @member {boolean} .gogoproto.description
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.description"] = false;
    
                /**
                 * MessageOptions .gogoproto.testgen.
                 * @member {boolean} .gogoproto.testgen
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.testgen"] = false;
    
                /**
                 * MessageOptions .gogoproto.benchgen.
                 * @member {boolean} .gogoproto.benchgen
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.benchgen"] = false;
    
                /**
                 * MessageOptions .gogoproto.marshaler.
                 * @member {boolean} .gogoproto.marshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.marshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.unmarshaler.
                 * @member {boolean} .gogoproto.unmarshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.unmarshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.stable_marshaler.
                 * @member {boolean} .gogoproto.stable_marshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.stable_marshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.sizer.
                 * @member {boolean} .gogoproto.sizer
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.sizer"] = false;
    
                /**
                 * MessageOptions .gogoproto.unsafe_marshaler.
                 * @member {boolean} .gogoproto.unsafe_marshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.unsafe_marshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.unsafe_unmarshaler.
                 * @member {boolean} .gogoproto.unsafe_unmarshaler
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.unsafe_unmarshaler"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_extensions_map.
                 * @member {boolean} .gogoproto.goproto_extensions_map
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_extensions_map"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_unrecognized.
                 * @member {boolean} .gogoproto.goproto_unrecognized
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_unrecognized"] = false;
    
                /**
                 * MessageOptions .gogoproto.protosizer.
                 * @member {boolean} .gogoproto.protosizer
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.protosizer"] = false;
    
                /**
                 * MessageOptions .gogoproto.compare.
                 * @member {boolean} .gogoproto.compare
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.compare"] = false;
    
                /**
                 * MessageOptions .gogoproto.typedecl.
                 * @member {boolean} .gogoproto.typedecl
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.typedecl"] = false;
    
                /**
                 * MessageOptions .gogoproto.messagename.
                 * @member {boolean} .gogoproto.messagename
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.messagename"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_sizecache.
                 * @member {boolean} .gogoproto.goproto_sizecache
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_sizecache"] = false;
    
                /**
                 * MessageOptions .gogoproto.goproto_unkeyed.
                 * @member {boolean} .gogoproto.goproto_unkeyed
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".gogoproto.goproto_unkeyed"] = false;
    
                /**
                 * MessageOptions .cosmos_proto.implements_interface.
                 * @member {Array.<string>} .cosmos_proto.implements_interface
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".cosmos_proto.implements_interface"] = $util.emptyArray;
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.message_set_wire_format != null && Object.hasOwnProperty.call(message, "message_set_wire_format"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.message_set_wire_format);
                    if (message.no_standard_descriptor_accessor != null && Object.hasOwnProperty.call(message, "no_standard_descriptor_accessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.no_standard_descriptor_accessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.map_entry != null && Object.hasOwnProperty.call(message, "map_entry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.map_entry);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.goproto_getters"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_getters"))
                        writer.uint32(/* id 64001, wireType 0 =*/512008).bool(message[".gogoproto.goproto_getters"]);
                    if (message[".gogoproto.goproto_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_stringer"))
                        writer.uint32(/* id 64003, wireType 0 =*/512024).bool(message[".gogoproto.goproto_stringer"]);
                    if (message[".gogoproto.verbose_equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.verbose_equal"))
                        writer.uint32(/* id 64004, wireType 0 =*/512032).bool(message[".gogoproto.verbose_equal"]);
                    if (message[".gogoproto.face"] != null && Object.hasOwnProperty.call(message, ".gogoproto.face"))
                        writer.uint32(/* id 64005, wireType 0 =*/512040).bool(message[".gogoproto.face"]);
                    if (message[".gogoproto.gostring"] != null && Object.hasOwnProperty.call(message, ".gogoproto.gostring"))
                        writer.uint32(/* id 64006, wireType 0 =*/512048).bool(message[".gogoproto.gostring"]);
                    if (message[".gogoproto.populate"] != null && Object.hasOwnProperty.call(message, ".gogoproto.populate"))
                        writer.uint32(/* id 64007, wireType 0 =*/512056).bool(message[".gogoproto.populate"]);
                    if (message[".gogoproto.onlyone"] != null && Object.hasOwnProperty.call(message, ".gogoproto.onlyone"))
                        writer.uint32(/* id 64009, wireType 0 =*/512072).bool(message[".gogoproto.onlyone"]);
                    if (message[".gogoproto.equal"] != null && Object.hasOwnProperty.call(message, ".gogoproto.equal"))
                        writer.uint32(/* id 64013, wireType 0 =*/512104).bool(message[".gogoproto.equal"]);
                    if (message[".gogoproto.description"] != null && Object.hasOwnProperty.call(message, ".gogoproto.description"))
                        writer.uint32(/* id 64014, wireType 0 =*/512112).bool(message[".gogoproto.description"]);
                    if (message[".gogoproto.testgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.testgen"))
                        writer.uint32(/* id 64015, wireType 0 =*/512120).bool(message[".gogoproto.testgen"]);
                    if (message[".gogoproto.benchgen"] != null && Object.hasOwnProperty.call(message, ".gogoproto.benchgen"))
                        writer.uint32(/* id 64016, wireType 0 =*/512128).bool(message[".gogoproto.benchgen"]);
                    if (message[".gogoproto.marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.marshaler"))
                        writer.uint32(/* id 64017, wireType 0 =*/512136).bool(message[".gogoproto.marshaler"]);
                    if (message[".gogoproto.unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unmarshaler"))
                        writer.uint32(/* id 64018, wireType 0 =*/512144).bool(message[".gogoproto.unmarshaler"]);
                    if (message[".gogoproto.stable_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stable_marshaler"))
                        writer.uint32(/* id 64019, wireType 0 =*/512152).bool(message[".gogoproto.stable_marshaler"]);
                    if (message[".gogoproto.sizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.sizer"))
                        writer.uint32(/* id 64020, wireType 0 =*/512160).bool(message[".gogoproto.sizer"]);
                    if (message[".gogoproto.unsafe_marshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_marshaler"))
                        writer.uint32(/* id 64023, wireType 0 =*/512184).bool(message[".gogoproto.unsafe_marshaler"]);
                    if (message[".gogoproto.unsafe_unmarshaler"] != null && Object.hasOwnProperty.call(message, ".gogoproto.unsafe_unmarshaler"))
                        writer.uint32(/* id 64024, wireType 0 =*/512192).bool(message[".gogoproto.unsafe_unmarshaler"]);
                    if (message[".gogoproto.goproto_extensions_map"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_extensions_map"))
                        writer.uint32(/* id 64025, wireType 0 =*/512200).bool(message[".gogoproto.goproto_extensions_map"]);
                    if (message[".gogoproto.goproto_unrecognized"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unrecognized"))
                        writer.uint32(/* id 64026, wireType 0 =*/512208).bool(message[".gogoproto.goproto_unrecognized"]);
                    if (message[".gogoproto.protosizer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.protosizer"))
                        writer.uint32(/* id 64028, wireType 0 =*/512224).bool(message[".gogoproto.protosizer"]);
                    if (message[".gogoproto.compare"] != null && Object.hasOwnProperty.call(message, ".gogoproto.compare"))
                        writer.uint32(/* id 64029, wireType 0 =*/512232).bool(message[".gogoproto.compare"]);
                    if (message[".gogoproto.typedecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.typedecl"))
                        writer.uint32(/* id 64030, wireType 0 =*/512240).bool(message[".gogoproto.typedecl"]);
                    if (message[".gogoproto.messagename"] != null && Object.hasOwnProperty.call(message, ".gogoproto.messagename"))
                        writer.uint32(/* id 64033, wireType 0 =*/512264).bool(message[".gogoproto.messagename"]);
                    if (message[".gogoproto.goproto_sizecache"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_sizecache"))
                        writer.uint32(/* id 64034, wireType 0 =*/512272).bool(message[".gogoproto.goproto_sizecache"]);
                    if (message[".gogoproto.goproto_unkeyed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_unkeyed"))
                        writer.uint32(/* id 64035, wireType 0 =*/512280).bool(message[".gogoproto.goproto_unkeyed"]);
                    if (message[".gogoproto.stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stringer"))
                        writer.uint32(/* id 67008, wireType 0 =*/536064).bool(message[".gogoproto.stringer"]);
                    if (message[".cosmos_proto.implements_interface"] != null && message[".cosmos_proto.implements_interface"].length)
                        for (var i = 0; i < message[".cosmos_proto.implements_interface"].length; ++i)
                            writer.uint32(/* id 93001, wireType 2 =*/744010).string(message[".cosmos_proto.implements_interface"][i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.message_set_wire_format = reader.bool();
                            break;
                        case 2:
                            message.no_standard_descriptor_accessor = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 7:
                            message.map_entry = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 64001:
                            message[".gogoproto.goproto_getters"] = reader.bool();
                            break;
                        case 64003:
                            message[".gogoproto.goproto_stringer"] = reader.bool();
                            break;
                        case 64004:
                            message[".gogoproto.verbose_equal"] = reader.bool();
                            break;
                        case 64005:
                            message[".gogoproto.face"] = reader.bool();
                            break;
                        case 64006:
                            message[".gogoproto.gostring"] = reader.bool();
                            break;
                        case 64007:
                            message[".gogoproto.populate"] = reader.bool();
                            break;
                        case 67008:
                            message[".gogoproto.stringer"] = reader.bool();
                            break;
                        case 64009:
                            message[".gogoproto.onlyone"] = reader.bool();
                            break;
                        case 64013:
                            message[".gogoproto.equal"] = reader.bool();
                            break;
                        case 64014:
                            message[".gogoproto.description"] = reader.bool();
                            break;
                        case 64015:
                            message[".gogoproto.testgen"] = reader.bool();
                            break;
                        case 64016:
                            message[".gogoproto.benchgen"] = reader.bool();
                            break;
                        case 64017:
                            message[".gogoproto.marshaler"] = reader.bool();
                            break;
                        case 64018:
                            message[".gogoproto.unmarshaler"] = reader.bool();
                            break;
                        case 64019:
                            message[".gogoproto.stable_marshaler"] = reader.bool();
                            break;
                        case 64020:
                            message[".gogoproto.sizer"] = reader.bool();
                            break;
                        case 64023:
                            message[".gogoproto.unsafe_marshaler"] = reader.bool();
                            break;
                        case 64024:
                            message[".gogoproto.unsafe_unmarshaler"] = reader.bool();
                            break;
                        case 64025:
                            message[".gogoproto.goproto_extensions_map"] = reader.bool();
                            break;
                        case 64026:
                            message[".gogoproto.goproto_unrecognized"] = reader.bool();
                            break;
                        case 64028:
                            message[".gogoproto.protosizer"] = reader.bool();
                            break;
                        case 64029:
                            message[".gogoproto.compare"] = reader.bool();
                            break;
                        case 64030:
                            message[".gogoproto.typedecl"] = reader.bool();
                            break;
                        case 64033:
                            message[".gogoproto.messagename"] = reader.bool();
                            break;
                        case 64034:
                            message[".gogoproto.goproto_sizecache"] = reader.bool();
                            break;
                        case 64035:
                            message[".gogoproto.goproto_unkeyed"] = reader.bool();
                            break;
                        case 93001:
                            if (!(message[".cosmos_proto.implements_interface"] && message[".cosmos_proto.implements_interface"].length))
                                message[".cosmos_proto.implements_interface"] = [];
                            message[".cosmos_proto.implements_interface"].push(reader.string());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        if (typeof message.message_set_wire_format !== "boolean")
                            return "message_set_wire_format: boolean expected";
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        if (typeof message.no_standard_descriptor_accessor !== "boolean")
                            return "no_standard_descriptor_accessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        if (typeof message.map_entry !== "boolean")
                            return "map_entry: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                        if (typeof message[".gogoproto.goproto_getters"] !== "boolean")
                            return ".gogoproto.goproto_getters: boolean expected";
                    if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                        if (typeof message[".gogoproto.goproto_stringer"] !== "boolean")
                            return ".gogoproto.goproto_stringer: boolean expected";
                    if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                        if (typeof message[".gogoproto.verbose_equal"] !== "boolean")
                            return ".gogoproto.verbose_equal: boolean expected";
                    if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                        if (typeof message[".gogoproto.face"] !== "boolean")
                            return ".gogoproto.face: boolean expected";
                    if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                        if (typeof message[".gogoproto.gostring"] !== "boolean")
                            return ".gogoproto.gostring: boolean expected";
                    if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                        if (typeof message[".gogoproto.populate"] !== "boolean")
                            return ".gogoproto.populate: boolean expected";
                    if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                        if (typeof message[".gogoproto.stringer"] !== "boolean")
                            return ".gogoproto.stringer: boolean expected";
                    if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                        if (typeof message[".gogoproto.onlyone"] !== "boolean")
                            return ".gogoproto.onlyone: boolean expected";
                    if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                        if (typeof message[".gogoproto.equal"] !== "boolean")
                            return ".gogoproto.equal: boolean expected";
                    if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                        if (typeof message[".gogoproto.description"] !== "boolean")
                            return ".gogoproto.description: boolean expected";
                    if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                        if (typeof message[".gogoproto.testgen"] !== "boolean")
                            return ".gogoproto.testgen: boolean expected";
                    if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                        if (typeof message[".gogoproto.benchgen"] !== "boolean")
                            return ".gogoproto.benchgen: boolean expected";
                    if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                        if (typeof message[".gogoproto.marshaler"] !== "boolean")
                            return ".gogoproto.marshaler: boolean expected";
                    if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                        if (typeof message[".gogoproto.unmarshaler"] !== "boolean")
                            return ".gogoproto.unmarshaler: boolean expected";
                    if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                        if (typeof message[".gogoproto.stable_marshaler"] !== "boolean")
                            return ".gogoproto.stable_marshaler: boolean expected";
                    if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                        if (typeof message[".gogoproto.sizer"] !== "boolean")
                            return ".gogoproto.sizer: boolean expected";
                    if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                        if (typeof message[".gogoproto.unsafe_marshaler"] !== "boolean")
                            return ".gogoproto.unsafe_marshaler: boolean expected";
                    if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                        if (typeof message[".gogoproto.unsafe_unmarshaler"] !== "boolean")
                            return ".gogoproto.unsafe_unmarshaler: boolean expected";
                    if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                        if (typeof message[".gogoproto.goproto_extensions_map"] !== "boolean")
                            return ".gogoproto.goproto_extensions_map: boolean expected";
                    if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                        if (typeof message[".gogoproto.goproto_unrecognized"] !== "boolean")
                            return ".gogoproto.goproto_unrecognized: boolean expected";
                    if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                        if (typeof message[".gogoproto.protosizer"] !== "boolean")
                            return ".gogoproto.protosizer: boolean expected";
                    if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                        if (typeof message[".gogoproto.compare"] !== "boolean")
                            return ".gogoproto.compare: boolean expected";
                    if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                        if (typeof message[".gogoproto.typedecl"] !== "boolean")
                            return ".gogoproto.typedecl: boolean expected";
                    if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                        if (typeof message[".gogoproto.messagename"] !== "boolean")
                            return ".gogoproto.messagename: boolean expected";
                    if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                        if (typeof message[".gogoproto.goproto_sizecache"] !== "boolean")
                            return ".gogoproto.goproto_sizecache: boolean expected";
                    if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                        if (typeof message[".gogoproto.goproto_unkeyed"] !== "boolean")
                            return ".gogoproto.goproto_unkeyed: boolean expected";
                    if (message[".cosmos_proto.implements_interface"] != null && message.hasOwnProperty(".cosmos_proto.implements_interface")) {
                        if (!Array.isArray(message[".cosmos_proto.implements_interface"]))
                            return ".cosmos_proto.implements_interface: array expected";
                        for (var i = 0; i < message[".cosmos_proto.implements_interface"].length; ++i)
                            if (!$util.isString(message[".cosmos_proto.implements_interface"][i]))
                                return ".cosmos_proto.implements_interface: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.message_set_wire_format != null)
                        message.message_set_wire_format = Boolean(object.message_set_wire_format);
                    if (object.no_standard_descriptor_accessor != null)
                        message.no_standard_descriptor_accessor = Boolean(object.no_standard_descriptor_accessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.map_entry != null)
                        message.map_entry = Boolean(object.map_entry);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.goproto_getters"] != null)
                        message[".gogoproto.goproto_getters"] = Boolean(object[".gogoproto.goproto_getters"]);
                    if (object[".gogoproto.goproto_stringer"] != null)
                        message[".gogoproto.goproto_stringer"] = Boolean(object[".gogoproto.goproto_stringer"]);
                    if (object[".gogoproto.verbose_equal"] != null)
                        message[".gogoproto.verbose_equal"] = Boolean(object[".gogoproto.verbose_equal"]);
                    if (object[".gogoproto.face"] != null)
                        message[".gogoproto.face"] = Boolean(object[".gogoproto.face"]);
                    if (object[".gogoproto.gostring"] != null)
                        message[".gogoproto.gostring"] = Boolean(object[".gogoproto.gostring"]);
                    if (object[".gogoproto.populate"] != null)
                        message[".gogoproto.populate"] = Boolean(object[".gogoproto.populate"]);
                    if (object[".gogoproto.stringer"] != null)
                        message[".gogoproto.stringer"] = Boolean(object[".gogoproto.stringer"]);
                    if (object[".gogoproto.onlyone"] != null)
                        message[".gogoproto.onlyone"] = Boolean(object[".gogoproto.onlyone"]);
                    if (object[".gogoproto.equal"] != null)
                        message[".gogoproto.equal"] = Boolean(object[".gogoproto.equal"]);
                    if (object[".gogoproto.description"] != null)
                        message[".gogoproto.description"] = Boolean(object[".gogoproto.description"]);
                    if (object[".gogoproto.testgen"] != null)
                        message[".gogoproto.testgen"] = Boolean(object[".gogoproto.testgen"]);
                    if (object[".gogoproto.benchgen"] != null)
                        message[".gogoproto.benchgen"] = Boolean(object[".gogoproto.benchgen"]);
                    if (object[".gogoproto.marshaler"] != null)
                        message[".gogoproto.marshaler"] = Boolean(object[".gogoproto.marshaler"]);
                    if (object[".gogoproto.unmarshaler"] != null)
                        message[".gogoproto.unmarshaler"] = Boolean(object[".gogoproto.unmarshaler"]);
                    if (object[".gogoproto.stable_marshaler"] != null)
                        message[".gogoproto.stable_marshaler"] = Boolean(object[".gogoproto.stable_marshaler"]);
                    if (object[".gogoproto.sizer"] != null)
                        message[".gogoproto.sizer"] = Boolean(object[".gogoproto.sizer"]);
                    if (object[".gogoproto.unsafe_marshaler"] != null)
                        message[".gogoproto.unsafe_marshaler"] = Boolean(object[".gogoproto.unsafe_marshaler"]);
                    if (object[".gogoproto.unsafe_unmarshaler"] != null)
                        message[".gogoproto.unsafe_unmarshaler"] = Boolean(object[".gogoproto.unsafe_unmarshaler"]);
                    if (object[".gogoproto.goproto_extensions_map"] != null)
                        message[".gogoproto.goproto_extensions_map"] = Boolean(object[".gogoproto.goproto_extensions_map"]);
                    if (object[".gogoproto.goproto_unrecognized"] != null)
                        message[".gogoproto.goproto_unrecognized"] = Boolean(object[".gogoproto.goproto_unrecognized"]);
                    if (object[".gogoproto.protosizer"] != null)
                        message[".gogoproto.protosizer"] = Boolean(object[".gogoproto.protosizer"]);
                    if (object[".gogoproto.compare"] != null)
                        message[".gogoproto.compare"] = Boolean(object[".gogoproto.compare"]);
                    if (object[".gogoproto.typedecl"] != null)
                        message[".gogoproto.typedecl"] = Boolean(object[".gogoproto.typedecl"]);
                    if (object[".gogoproto.messagename"] != null)
                        message[".gogoproto.messagename"] = Boolean(object[".gogoproto.messagename"]);
                    if (object[".gogoproto.goproto_sizecache"] != null)
                        message[".gogoproto.goproto_sizecache"] = Boolean(object[".gogoproto.goproto_sizecache"]);
                    if (object[".gogoproto.goproto_unkeyed"] != null)
                        message[".gogoproto.goproto_unkeyed"] = Boolean(object[".gogoproto.goproto_unkeyed"]);
                    if (object[".cosmos_proto.implements_interface"]) {
                        if (!Array.isArray(object[".cosmos_proto.implements_interface"]))
                            throw TypeError(".google.protobuf.MessageOptions..cosmos_proto.implements_interface: array expected");
                        message[".cosmos_proto.implements_interface"] = [];
                        for (var i = 0; i < object[".cosmos_proto.implements_interface"].length; ++i)
                            message[".cosmos_proto.implements_interface"][i] = String(object[".cosmos_proto.implements_interface"][i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.uninterpreted_option = [];
                        object[".cosmos_proto.implements_interface"] = [];
                    }
                    if (options.defaults) {
                        object.message_set_wire_format = false;
                        object.no_standard_descriptor_accessor = false;
                        object.deprecated = false;
                        object.map_entry = false;
                        object[".gogoproto.goproto_getters"] = false;
                        object[".gogoproto.goproto_stringer"] = false;
                        object[".gogoproto.verbose_equal"] = false;
                        object[".gogoproto.face"] = false;
                        object[".gogoproto.gostring"] = false;
                        object[".gogoproto.populate"] = false;
                        object[".gogoproto.onlyone"] = false;
                        object[".gogoproto.equal"] = false;
                        object[".gogoproto.description"] = false;
                        object[".gogoproto.testgen"] = false;
                        object[".gogoproto.benchgen"] = false;
                        object[".gogoproto.marshaler"] = false;
                        object[".gogoproto.unmarshaler"] = false;
                        object[".gogoproto.stable_marshaler"] = false;
                        object[".gogoproto.sizer"] = false;
                        object[".gogoproto.unsafe_marshaler"] = false;
                        object[".gogoproto.unsafe_unmarshaler"] = false;
                        object[".gogoproto.goproto_extensions_map"] = false;
                        object[".gogoproto.goproto_unrecognized"] = false;
                        object[".gogoproto.protosizer"] = false;
                        object[".gogoproto.compare"] = false;
                        object[".gogoproto.typedecl"] = false;
                        object[".gogoproto.messagename"] = false;
                        object[".gogoproto.goproto_sizecache"] = false;
                        object[".gogoproto.goproto_unkeyed"] = false;
                        object[".gogoproto.stringer"] = false;
                    }
                    if (message.message_set_wire_format != null && message.hasOwnProperty("message_set_wire_format"))
                        object.message_set_wire_format = message.message_set_wire_format;
                    if (message.no_standard_descriptor_accessor != null && message.hasOwnProperty("no_standard_descriptor_accessor"))
                        object.no_standard_descriptor_accessor = message.no_standard_descriptor_accessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.map_entry != null && message.hasOwnProperty("map_entry"))
                        object.map_entry = message.map_entry;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.goproto_getters"] != null && message.hasOwnProperty(".gogoproto.goproto_getters"))
                        object[".gogoproto.goproto_getters"] = message[".gogoproto.goproto_getters"];
                    if (message[".gogoproto.goproto_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_stringer"))
                        object[".gogoproto.goproto_stringer"] = message[".gogoproto.goproto_stringer"];
                    if (message[".gogoproto.verbose_equal"] != null && message.hasOwnProperty(".gogoproto.verbose_equal"))
                        object[".gogoproto.verbose_equal"] = message[".gogoproto.verbose_equal"];
                    if (message[".gogoproto.face"] != null && message.hasOwnProperty(".gogoproto.face"))
                        object[".gogoproto.face"] = message[".gogoproto.face"];
                    if (message[".gogoproto.gostring"] != null && message.hasOwnProperty(".gogoproto.gostring"))
                        object[".gogoproto.gostring"] = message[".gogoproto.gostring"];
                    if (message[".gogoproto.populate"] != null && message.hasOwnProperty(".gogoproto.populate"))
                        object[".gogoproto.populate"] = message[".gogoproto.populate"];
                    if (message[".gogoproto.onlyone"] != null && message.hasOwnProperty(".gogoproto.onlyone"))
                        object[".gogoproto.onlyone"] = message[".gogoproto.onlyone"];
                    if (message[".gogoproto.equal"] != null && message.hasOwnProperty(".gogoproto.equal"))
                        object[".gogoproto.equal"] = message[".gogoproto.equal"];
                    if (message[".gogoproto.description"] != null && message.hasOwnProperty(".gogoproto.description"))
                        object[".gogoproto.description"] = message[".gogoproto.description"];
                    if (message[".gogoproto.testgen"] != null && message.hasOwnProperty(".gogoproto.testgen"))
                        object[".gogoproto.testgen"] = message[".gogoproto.testgen"];
                    if (message[".gogoproto.benchgen"] != null && message.hasOwnProperty(".gogoproto.benchgen"))
                        object[".gogoproto.benchgen"] = message[".gogoproto.benchgen"];
                    if (message[".gogoproto.marshaler"] != null && message.hasOwnProperty(".gogoproto.marshaler"))
                        object[".gogoproto.marshaler"] = message[".gogoproto.marshaler"];
                    if (message[".gogoproto.unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unmarshaler"))
                        object[".gogoproto.unmarshaler"] = message[".gogoproto.unmarshaler"];
                    if (message[".gogoproto.stable_marshaler"] != null && message.hasOwnProperty(".gogoproto.stable_marshaler"))
                        object[".gogoproto.stable_marshaler"] = message[".gogoproto.stable_marshaler"];
                    if (message[".gogoproto.sizer"] != null && message.hasOwnProperty(".gogoproto.sizer"))
                        object[".gogoproto.sizer"] = message[".gogoproto.sizer"];
                    if (message[".gogoproto.unsafe_marshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_marshaler"))
                        object[".gogoproto.unsafe_marshaler"] = message[".gogoproto.unsafe_marshaler"];
                    if (message[".gogoproto.unsafe_unmarshaler"] != null && message.hasOwnProperty(".gogoproto.unsafe_unmarshaler"))
                        object[".gogoproto.unsafe_unmarshaler"] = message[".gogoproto.unsafe_unmarshaler"];
                    if (message[".gogoproto.goproto_extensions_map"] != null && message.hasOwnProperty(".gogoproto.goproto_extensions_map"))
                        object[".gogoproto.goproto_extensions_map"] = message[".gogoproto.goproto_extensions_map"];
                    if (message[".gogoproto.goproto_unrecognized"] != null && message.hasOwnProperty(".gogoproto.goproto_unrecognized"))
                        object[".gogoproto.goproto_unrecognized"] = message[".gogoproto.goproto_unrecognized"];
                    if (message[".gogoproto.protosizer"] != null && message.hasOwnProperty(".gogoproto.protosizer"))
                        object[".gogoproto.protosizer"] = message[".gogoproto.protosizer"];
                    if (message[".gogoproto.compare"] != null && message.hasOwnProperty(".gogoproto.compare"))
                        object[".gogoproto.compare"] = message[".gogoproto.compare"];
                    if (message[".gogoproto.typedecl"] != null && message.hasOwnProperty(".gogoproto.typedecl"))
                        object[".gogoproto.typedecl"] = message[".gogoproto.typedecl"];
                    if (message[".gogoproto.messagename"] != null && message.hasOwnProperty(".gogoproto.messagename"))
                        object[".gogoproto.messagename"] = message[".gogoproto.messagename"];
                    if (message[".gogoproto.goproto_sizecache"] != null && message.hasOwnProperty(".gogoproto.goproto_sizecache"))
                        object[".gogoproto.goproto_sizecache"] = message[".gogoproto.goproto_sizecache"];
                    if (message[".gogoproto.goproto_unkeyed"] != null && message.hasOwnProperty(".gogoproto.goproto_unkeyed"))
                        object[".gogoproto.goproto_unkeyed"] = message[".gogoproto.goproto_unkeyed"];
                    if (message[".gogoproto.stringer"] != null && message.hasOwnProperty(".gogoproto.stringer"))
                        object[".gogoproto.stringer"] = message[".gogoproto.stringer"];
                    if (message[".cosmos_proto.implements_interface"] && message[".cosmos_proto.implements_interface"].length) {
                        object[".cosmos_proto.implements_interface"] = [];
                        for (var j = 0; j < message[".cosmos_proto.implements_interface"].length; ++j)
                            object[".cosmos_proto.implements_interface"][j] = message[".cosmos_proto.implements_interface"][j];
                    }
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] FieldOptions uninterpreted_option
                 * @property {boolean|null} [".gogoproto.nullable"] FieldOptions .gogoproto.nullable
                 * @property {boolean|null} [".gogoproto.embed"] FieldOptions .gogoproto.embed
                 * @property {string|null} [".gogoproto.customtype"] FieldOptions .gogoproto.customtype
                 * @property {string|null} [".gogoproto.customname"] FieldOptions .gogoproto.customname
                 * @property {string|null} [".gogoproto.jsontag"] FieldOptions .gogoproto.jsontag
                 * @property {string|null} [".gogoproto.moretags"] FieldOptions .gogoproto.moretags
                 * @property {string|null} [".gogoproto.casttype"] FieldOptions .gogoproto.casttype
                 * @property {string|null} [".gogoproto.castkey"] FieldOptions .gogoproto.castkey
                 * @property {string|null} [".gogoproto.castvalue"] FieldOptions .gogoproto.castvalue
                 * @property {boolean|null} [".gogoproto.stdtime"] FieldOptions .gogoproto.stdtime
                 * @property {boolean|null} [".gogoproto.stdduration"] FieldOptions .gogoproto.stdduration
                 * @property {boolean|null} [".gogoproto.wktpointer"] FieldOptions .gogoproto.wktpointer
                 * @property {string|null} [".gogoproto.castrepeated"] FieldOptions .gogoproto.castrepeated
                 * @property {string|null} [".cosmos_proto.accepts_interface"] FieldOptions .cosmos_proto.accepts_interface
                 * @property {string|null} [".cosmos_proto.scalar"] FieldOptions .cosmos_proto.scalar
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * FieldOptions .gogoproto.nullable.
                 * @member {boolean} .gogoproto.nullable
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.nullable"] = false;
    
                /**
                 * FieldOptions .gogoproto.embed.
                 * @member {boolean} .gogoproto.embed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.embed"] = false;
    
                /**
                 * FieldOptions .gogoproto.customtype.
                 * @member {string} .gogoproto.customtype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.customtype"] = "";
    
                /**
                 * FieldOptions .gogoproto.customname.
                 * @member {string} .gogoproto.customname
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.customname"] = "";
    
                /**
                 * FieldOptions .gogoproto.jsontag.
                 * @member {string} .gogoproto.jsontag
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.jsontag"] = "";
    
                /**
                 * FieldOptions .gogoproto.moretags.
                 * @member {string} .gogoproto.moretags
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.moretags"] = "";
    
                /**
                 * FieldOptions .gogoproto.casttype.
                 * @member {string} .gogoproto.casttype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.casttype"] = "";
    
                /**
                 * FieldOptions .gogoproto.castkey.
                 * @member {string} .gogoproto.castkey
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.castkey"] = "";
    
                /**
                 * FieldOptions .gogoproto.castvalue.
                 * @member {string} .gogoproto.castvalue
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.castvalue"] = "";
    
                /**
                 * FieldOptions .gogoproto.stdtime.
                 * @member {boolean} .gogoproto.stdtime
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.stdtime"] = false;
    
                /**
                 * FieldOptions .gogoproto.stdduration.
                 * @member {boolean} .gogoproto.stdduration
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.stdduration"] = false;
    
                /**
                 * FieldOptions .gogoproto.wktpointer.
                 * @member {boolean} .gogoproto.wktpointer
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.wktpointer"] = false;
    
                /**
                 * FieldOptions .gogoproto.castrepeated.
                 * @member {string} .gogoproto.castrepeated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".gogoproto.castrepeated"] = "";
    
                /**
                 * FieldOptions .cosmos_proto.accepts_interface.
                 * @member {string} .cosmos_proto.accepts_interface
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".cosmos_proto.accepts_interface"] = "";
    
                /**
                 * FieldOptions .cosmos_proto.scalar.
                 * @member {string} .cosmos_proto.scalar
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".cosmos_proto.scalar"] = "";
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.nullable"] != null && Object.hasOwnProperty.call(message, ".gogoproto.nullable"))
                        writer.uint32(/* id 65001, wireType 0 =*/520008).bool(message[".gogoproto.nullable"]);
                    if (message[".gogoproto.embed"] != null && Object.hasOwnProperty.call(message, ".gogoproto.embed"))
                        writer.uint32(/* id 65002, wireType 0 =*/520016).bool(message[".gogoproto.embed"]);
                    if (message[".gogoproto.customtype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customtype"))
                        writer.uint32(/* id 65003, wireType 2 =*/520026).string(message[".gogoproto.customtype"]);
                    if (message[".gogoproto.customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.customname"))
                        writer.uint32(/* id 65004, wireType 2 =*/520034).string(message[".gogoproto.customname"]);
                    if (message[".gogoproto.jsontag"] != null && Object.hasOwnProperty.call(message, ".gogoproto.jsontag"))
                        writer.uint32(/* id 65005, wireType 2 =*/520042).string(message[".gogoproto.jsontag"]);
                    if (message[".gogoproto.moretags"] != null && Object.hasOwnProperty.call(message, ".gogoproto.moretags"))
                        writer.uint32(/* id 65006, wireType 2 =*/520050).string(message[".gogoproto.moretags"]);
                    if (message[".gogoproto.casttype"] != null && Object.hasOwnProperty.call(message, ".gogoproto.casttype"))
                        writer.uint32(/* id 65007, wireType 2 =*/520058).string(message[".gogoproto.casttype"]);
                    if (message[".gogoproto.castkey"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castkey"))
                        writer.uint32(/* id 65008, wireType 2 =*/520066).string(message[".gogoproto.castkey"]);
                    if (message[".gogoproto.castvalue"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castvalue"))
                        writer.uint32(/* id 65009, wireType 2 =*/520074).string(message[".gogoproto.castvalue"]);
                    if (message[".gogoproto.stdtime"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdtime"))
                        writer.uint32(/* id 65010, wireType 0 =*/520080).bool(message[".gogoproto.stdtime"]);
                    if (message[".gogoproto.stdduration"] != null && Object.hasOwnProperty.call(message, ".gogoproto.stdduration"))
                        writer.uint32(/* id 65011, wireType 0 =*/520088).bool(message[".gogoproto.stdduration"]);
                    if (message[".gogoproto.wktpointer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.wktpointer"))
                        writer.uint32(/* id 65012, wireType 0 =*/520096).bool(message[".gogoproto.wktpointer"]);
                    if (message[".gogoproto.castrepeated"] != null && Object.hasOwnProperty.call(message, ".gogoproto.castrepeated"))
                        writer.uint32(/* id 65013, wireType 2 =*/520106).string(message[".gogoproto.castrepeated"]);
                    if (message[".cosmos_proto.accepts_interface"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.accepts_interface"))
                        writer.uint32(/* id 93001, wireType 2 =*/744010).string(message[".cosmos_proto.accepts_interface"]);
                    if (message[".cosmos_proto.scalar"] != null && Object.hasOwnProperty.call(message, ".cosmos_proto.scalar"))
                        writer.uint32(/* id 93002, wireType 2 =*/744018).string(message[".cosmos_proto.scalar"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.ctype = reader.int32();
                            break;
                        case 2:
                            message.packed = reader.bool();
                            break;
                        case 6:
                            message.jstype = reader.int32();
                            break;
                        case 5:
                            message.lazy = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 10:
                            message.weak = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 65001:
                            message[".gogoproto.nullable"] = reader.bool();
                            break;
                        case 65002:
                            message[".gogoproto.embed"] = reader.bool();
                            break;
                        case 65003:
                            message[".gogoproto.customtype"] = reader.string();
                            break;
                        case 65004:
                            message[".gogoproto.customname"] = reader.string();
                            break;
                        case 65005:
                            message[".gogoproto.jsontag"] = reader.string();
                            break;
                        case 65006:
                            message[".gogoproto.moretags"] = reader.string();
                            break;
                        case 65007:
                            message[".gogoproto.casttype"] = reader.string();
                            break;
                        case 65008:
                            message[".gogoproto.castkey"] = reader.string();
                            break;
                        case 65009:
                            message[".gogoproto.castvalue"] = reader.string();
                            break;
                        case 65010:
                            message[".gogoproto.stdtime"] = reader.bool();
                            break;
                        case 65011:
                            message[".gogoproto.stdduration"] = reader.bool();
                            break;
                        case 65012:
                            message[".gogoproto.wktpointer"] = reader.bool();
                            break;
                        case 65013:
                            message[".gogoproto.castrepeated"] = reader.string();
                            break;
                        case 93001:
                            message[".cosmos_proto.accepts_interface"] = reader.string();
                            break;
                        case 93002:
                            message[".cosmos_proto.scalar"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                        if (typeof message[".gogoproto.nullable"] !== "boolean")
                            return ".gogoproto.nullable: boolean expected";
                    if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                        if (typeof message[".gogoproto.embed"] !== "boolean")
                            return ".gogoproto.embed: boolean expected";
                    if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                        if (!$util.isString(message[".gogoproto.customtype"]))
                            return ".gogoproto.customtype: string expected";
                    if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                        if (!$util.isString(message[".gogoproto.customname"]))
                            return ".gogoproto.customname: string expected";
                    if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                        if (!$util.isString(message[".gogoproto.jsontag"]))
                            return ".gogoproto.jsontag: string expected";
                    if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                        if (!$util.isString(message[".gogoproto.moretags"]))
                            return ".gogoproto.moretags: string expected";
                    if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                        if (!$util.isString(message[".gogoproto.casttype"]))
                            return ".gogoproto.casttype: string expected";
                    if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                        if (!$util.isString(message[".gogoproto.castkey"]))
                            return ".gogoproto.castkey: string expected";
                    if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                        if (!$util.isString(message[".gogoproto.castvalue"]))
                            return ".gogoproto.castvalue: string expected";
                    if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                        if (typeof message[".gogoproto.stdtime"] !== "boolean")
                            return ".gogoproto.stdtime: boolean expected";
                    if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                        if (typeof message[".gogoproto.stdduration"] !== "boolean")
                            return ".gogoproto.stdduration: boolean expected";
                    if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                        if (typeof message[".gogoproto.wktpointer"] !== "boolean")
                            return ".gogoproto.wktpointer: boolean expected";
                    if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                        if (!$util.isString(message[".gogoproto.castrepeated"]))
                            return ".gogoproto.castrepeated: string expected";
                    if (message[".cosmos_proto.accepts_interface"] != null && message.hasOwnProperty(".cosmos_proto.accepts_interface"))
                        if (!$util.isString(message[".cosmos_proto.accepts_interface"]))
                            return ".cosmos_proto.accepts_interface: string expected";
                    if (message[".cosmos_proto.scalar"] != null && message.hasOwnProperty(".cosmos_proto.scalar"))
                        if (!$util.isString(message[".cosmos_proto.scalar"]))
                            return ".cosmos_proto.scalar: string expected";
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.nullable"] != null)
                        message[".gogoproto.nullable"] = Boolean(object[".gogoproto.nullable"]);
                    if (object[".gogoproto.embed"] != null)
                        message[".gogoproto.embed"] = Boolean(object[".gogoproto.embed"]);
                    if (object[".gogoproto.customtype"] != null)
                        message[".gogoproto.customtype"] = String(object[".gogoproto.customtype"]);
                    if (object[".gogoproto.customname"] != null)
                        message[".gogoproto.customname"] = String(object[".gogoproto.customname"]);
                    if (object[".gogoproto.jsontag"] != null)
                        message[".gogoproto.jsontag"] = String(object[".gogoproto.jsontag"]);
                    if (object[".gogoproto.moretags"] != null)
                        message[".gogoproto.moretags"] = String(object[".gogoproto.moretags"]);
                    if (object[".gogoproto.casttype"] != null)
                        message[".gogoproto.casttype"] = String(object[".gogoproto.casttype"]);
                    if (object[".gogoproto.castkey"] != null)
                        message[".gogoproto.castkey"] = String(object[".gogoproto.castkey"]);
                    if (object[".gogoproto.castvalue"] != null)
                        message[".gogoproto.castvalue"] = String(object[".gogoproto.castvalue"]);
                    if (object[".gogoproto.stdtime"] != null)
                        message[".gogoproto.stdtime"] = Boolean(object[".gogoproto.stdtime"]);
                    if (object[".gogoproto.stdduration"] != null)
                        message[".gogoproto.stdduration"] = Boolean(object[".gogoproto.stdduration"]);
                    if (object[".gogoproto.wktpointer"] != null)
                        message[".gogoproto.wktpointer"] = Boolean(object[".gogoproto.wktpointer"]);
                    if (object[".gogoproto.castrepeated"] != null)
                        message[".gogoproto.castrepeated"] = String(object[".gogoproto.castrepeated"]);
                    if (object[".cosmos_proto.accepts_interface"] != null)
                        message[".cosmos_proto.accepts_interface"] = String(object[".cosmos_proto.accepts_interface"]);
                    if (object[".cosmos_proto.scalar"] != null)
                        message[".cosmos_proto.scalar"] = String(object[".cosmos_proto.scalar"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object[".gogoproto.nullable"] = false;
                        object[".gogoproto.embed"] = false;
                        object[".gogoproto.customtype"] = "";
                        object[".gogoproto.customname"] = "";
                        object[".gogoproto.jsontag"] = "";
                        object[".gogoproto.moretags"] = "";
                        object[".gogoproto.casttype"] = "";
                        object[".gogoproto.castkey"] = "";
                        object[".gogoproto.castvalue"] = "";
                        object[".gogoproto.stdtime"] = false;
                        object[".gogoproto.stdduration"] = false;
                        object[".gogoproto.wktpointer"] = false;
                        object[".gogoproto.castrepeated"] = "";
                        object[".cosmos_proto.accepts_interface"] = "";
                        object[".cosmos_proto.scalar"] = "";
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.nullable"] != null && message.hasOwnProperty(".gogoproto.nullable"))
                        object[".gogoproto.nullable"] = message[".gogoproto.nullable"];
                    if (message[".gogoproto.embed"] != null && message.hasOwnProperty(".gogoproto.embed"))
                        object[".gogoproto.embed"] = message[".gogoproto.embed"];
                    if (message[".gogoproto.customtype"] != null && message.hasOwnProperty(".gogoproto.customtype"))
                        object[".gogoproto.customtype"] = message[".gogoproto.customtype"];
                    if (message[".gogoproto.customname"] != null && message.hasOwnProperty(".gogoproto.customname"))
                        object[".gogoproto.customname"] = message[".gogoproto.customname"];
                    if (message[".gogoproto.jsontag"] != null && message.hasOwnProperty(".gogoproto.jsontag"))
                        object[".gogoproto.jsontag"] = message[".gogoproto.jsontag"];
                    if (message[".gogoproto.moretags"] != null && message.hasOwnProperty(".gogoproto.moretags"))
                        object[".gogoproto.moretags"] = message[".gogoproto.moretags"];
                    if (message[".gogoproto.casttype"] != null && message.hasOwnProperty(".gogoproto.casttype"))
                        object[".gogoproto.casttype"] = message[".gogoproto.casttype"];
                    if (message[".gogoproto.castkey"] != null && message.hasOwnProperty(".gogoproto.castkey"))
                        object[".gogoproto.castkey"] = message[".gogoproto.castkey"];
                    if (message[".gogoproto.castvalue"] != null && message.hasOwnProperty(".gogoproto.castvalue"))
                        object[".gogoproto.castvalue"] = message[".gogoproto.castvalue"];
                    if (message[".gogoproto.stdtime"] != null && message.hasOwnProperty(".gogoproto.stdtime"))
                        object[".gogoproto.stdtime"] = message[".gogoproto.stdtime"];
                    if (message[".gogoproto.stdduration"] != null && message.hasOwnProperty(".gogoproto.stdduration"))
                        object[".gogoproto.stdduration"] = message[".gogoproto.stdduration"];
                    if (message[".gogoproto.wktpointer"] != null && message.hasOwnProperty(".gogoproto.wktpointer"))
                        object[".gogoproto.wktpointer"] = message[".gogoproto.wktpointer"];
                    if (message[".gogoproto.castrepeated"] != null && message.hasOwnProperty(".gogoproto.castrepeated"))
                        object[".gogoproto.castrepeated"] = message[".gogoproto.castrepeated"];
                    if (message[".cosmos_proto.accepts_interface"] != null && message.hasOwnProperty(".cosmos_proto.accepts_interface"))
                        object[".cosmos_proto.accepts_interface"] = message[".cosmos_proto.accepts_interface"];
                    if (message[".cosmos_proto.scalar"] != null && message.hasOwnProperty(".cosmos_proto.scalar"))
                        object[".cosmos_proto.scalar"] = message[".cosmos_proto.scalar"];
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] OneofOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allow_alias] EnumOptions allow_alias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumOptions uninterpreted_option
                 * @property {boolean|null} [".gogoproto.goproto_enum_prefix"] EnumOptions .gogoproto.goproto_enum_prefix
                 * @property {boolean|null} [".gogoproto.goproto_enum_stringer"] EnumOptions .gogoproto.goproto_enum_stringer
                 * @property {boolean|null} [".gogoproto.enum_stringer"] EnumOptions .gogoproto.enum_stringer
                 * @property {string|null} [".gogoproto.enum_customname"] EnumOptions .gogoproto.enum_customname
                 * @property {boolean|null} [".gogoproto.enumdecl"] EnumOptions .gogoproto.enumdecl
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allow_alias.
                 * @member {boolean} allow_alias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allow_alias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumOptions .gogoproto.goproto_enum_prefix.
                 * @member {boolean} .gogoproto.goproto_enum_prefix
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.goproto_enum_prefix"] = false;
    
                /**
                 * EnumOptions .gogoproto.goproto_enum_stringer.
                 * @member {boolean} .gogoproto.goproto_enum_stringer
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.goproto_enum_stringer"] = false;
    
                /**
                 * EnumOptions .gogoproto.enum_stringer.
                 * @member {boolean} .gogoproto.enum_stringer
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.enum_stringer"] = false;
    
                /**
                 * EnumOptions .gogoproto.enum_customname.
                 * @member {string} .gogoproto.enum_customname
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.enum_customname"] = "";
    
                /**
                 * EnumOptions .gogoproto.enumdecl.
                 * @member {boolean} .gogoproto.enumdecl
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype[".gogoproto.enumdecl"] = false;
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allow_alias != null && Object.hasOwnProperty.call(message, "allow_alias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allow_alias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.goproto_enum_prefix"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_prefix"))
                        writer.uint32(/* id 62001, wireType 0 =*/496008).bool(message[".gogoproto.goproto_enum_prefix"]);
                    if (message[".gogoproto.goproto_enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.goproto_enum_stringer"))
                        writer.uint32(/* id 62021, wireType 0 =*/496168).bool(message[".gogoproto.goproto_enum_stringer"]);
                    if (message[".gogoproto.enum_stringer"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_stringer"))
                        writer.uint32(/* id 62022, wireType 0 =*/496176).bool(message[".gogoproto.enum_stringer"]);
                    if (message[".gogoproto.enum_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enum_customname"))
                        writer.uint32(/* id 62023, wireType 2 =*/496186).string(message[".gogoproto.enum_customname"]);
                    if (message[".gogoproto.enumdecl"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumdecl"))
                        writer.uint32(/* id 62024, wireType 0 =*/496192).bool(message[".gogoproto.enumdecl"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            message.allow_alias = reader.bool();
                            break;
                        case 3:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 62001:
                            message[".gogoproto.goproto_enum_prefix"] = reader.bool();
                            break;
                        case 62021:
                            message[".gogoproto.goproto_enum_stringer"] = reader.bool();
                            break;
                        case 62022:
                            message[".gogoproto.enum_stringer"] = reader.bool();
                            break;
                        case 62023:
                            message[".gogoproto.enum_customname"] = reader.string();
                            break;
                        case 62024:
                            message[".gogoproto.enumdecl"] = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        if (typeof message.allow_alias !== "boolean")
                            return "allow_alias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                        if (typeof message[".gogoproto.goproto_enum_prefix"] !== "boolean")
                            return ".gogoproto.goproto_enum_prefix: boolean expected";
                    if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                        if (typeof message[".gogoproto.goproto_enum_stringer"] !== "boolean")
                            return ".gogoproto.goproto_enum_stringer: boolean expected";
                    if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                        if (typeof message[".gogoproto.enum_stringer"] !== "boolean")
                            return ".gogoproto.enum_stringer: boolean expected";
                    if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                        if (!$util.isString(message[".gogoproto.enum_customname"]))
                            return ".gogoproto.enum_customname: string expected";
                    if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                        if (typeof message[".gogoproto.enumdecl"] !== "boolean")
                            return ".gogoproto.enumdecl: boolean expected";
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allow_alias != null)
                        message.allow_alias = Boolean(object.allow_alias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.goproto_enum_prefix"] != null)
                        message[".gogoproto.goproto_enum_prefix"] = Boolean(object[".gogoproto.goproto_enum_prefix"]);
                    if (object[".gogoproto.goproto_enum_stringer"] != null)
                        message[".gogoproto.goproto_enum_stringer"] = Boolean(object[".gogoproto.goproto_enum_stringer"]);
                    if (object[".gogoproto.enum_stringer"] != null)
                        message[".gogoproto.enum_stringer"] = Boolean(object[".gogoproto.enum_stringer"]);
                    if (object[".gogoproto.enum_customname"] != null)
                        message[".gogoproto.enum_customname"] = String(object[".gogoproto.enum_customname"]);
                    if (object[".gogoproto.enumdecl"] != null)
                        message[".gogoproto.enumdecl"] = Boolean(object[".gogoproto.enumdecl"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.allow_alias = false;
                        object.deprecated = false;
                        object[".gogoproto.goproto_enum_prefix"] = false;
                        object[".gogoproto.goproto_enum_stringer"] = false;
                        object[".gogoproto.enum_stringer"] = false;
                        object[".gogoproto.enum_customname"] = "";
                        object[".gogoproto.enumdecl"] = false;
                    }
                    if (message.allow_alias != null && message.hasOwnProperty("allow_alias"))
                        object.allow_alias = message.allow_alias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.goproto_enum_prefix"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_prefix"))
                        object[".gogoproto.goproto_enum_prefix"] = message[".gogoproto.goproto_enum_prefix"];
                    if (message[".gogoproto.goproto_enum_stringer"] != null && message.hasOwnProperty(".gogoproto.goproto_enum_stringer"))
                        object[".gogoproto.goproto_enum_stringer"] = message[".gogoproto.goproto_enum_stringer"];
                    if (message[".gogoproto.enum_stringer"] != null && message.hasOwnProperty(".gogoproto.enum_stringer"))
                        object[".gogoproto.enum_stringer"] = message[".gogoproto.enum_stringer"];
                    if (message[".gogoproto.enum_customname"] != null && message.hasOwnProperty(".gogoproto.enum_customname"))
                        object[".gogoproto.enum_customname"] = message[".gogoproto.enum_customname"];
                    if (message[".gogoproto.enumdecl"] != null && message.hasOwnProperty(".gogoproto.enumdecl"))
                        object[".gogoproto.enumdecl"] = message[".gogoproto.enumdecl"];
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] EnumValueOptions uninterpreted_option
                 * @property {string|null} [".gogoproto.enumvalue_customname"] EnumValueOptions .gogoproto.enumvalue_customname
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * EnumValueOptions .gogoproto.enumvalue_customname.
                 * @member {string} .gogoproto.enumvalue_customname
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype[".gogoproto.enumvalue_customname"] = "";
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".gogoproto.enumvalue_customname"] != null && Object.hasOwnProperty.call(message, ".gogoproto.enumvalue_customname"))
                        writer.uint32(/* id 66001, wireType 2 =*/528010).string(message[".gogoproto.enumvalue_customname"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 66001:
                            message[".gogoproto.enumvalue_customname"] = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                        if (!$util.isString(message[".gogoproto.enumvalue_customname"]))
                            return ".gogoproto.enumvalue_customname: string expected";
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".gogoproto.enumvalue_customname"] != null)
                        message[".gogoproto.enumvalue_customname"] = String(object[".gogoproto.enumvalue_customname"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".gogoproto.enumvalue_customname"] = "";
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".gogoproto.enumvalue_customname"] != null && message.hasOwnProperty(".gogoproto.enumvalue_customname"))
                        object[".gogoproto.enumvalue_customname"] = message[".gogoproto.enumvalue_customname"];
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] ServiceOptions uninterpreted_option
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpreted_option] MethodOptions uninterpreted_option
                 * @property {google.api.IHttpRule|null} [".google.api.http"] MethodOptions .google.api.http
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpreted_option = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions uninterpreted_option.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpreted_option
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpreted_option = $util.emptyArray;
    
                /**
                 * MethodOptions .google.api.http.
                 * @member {google.api.IHttpRule|null|undefined} .google.api.http
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype[".google.api.http"] = null;
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpreted_option != null && message.uninterpreted_option.length)
                        for (var i = 0; i < message.uninterpreted_option.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpreted_option[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".google.api.http"] != null && Object.hasOwnProperty.call(message, ".google.api.http"))
                        $root.google.api.HttpRule.encode(message[".google.api.http"], writer.uint32(/* id 72295728, wireType 2 =*/578365826).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33:
                            message.deprecated = reader.bool();
                            break;
                        case 999:
                            if (!(message.uninterpreted_option && message.uninterpreted_option.length))
                                message.uninterpreted_option = [];
                            message.uninterpreted_option.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                            break;
                        case 72295728:
                            message[".google.api.http"] = $root.google.api.HttpRule.decode(reader, reader.uint32());
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpreted_option != null && message.hasOwnProperty("uninterpreted_option")) {
                        if (!Array.isArray(message.uninterpreted_option))
                            return "uninterpreted_option: array expected";
                        for (var i = 0; i < message.uninterpreted_option.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpreted_option[i]);
                            if (error)
                                return "uninterpreted_option." + error;
                        }
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http")) {
                        var error = $root.google.api.HttpRule.verify(message[".google.api.http"]);
                        if (error)
                            return ".google.api.http." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpreted_option) {
                        if (!Array.isArray(object.uninterpreted_option))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: array expected");
                        message.uninterpreted_option = [];
                        for (var i = 0; i < object.uninterpreted_option.length; ++i) {
                            if (typeof object.uninterpreted_option[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpreted_option: object expected");
                            message.uninterpreted_option[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpreted_option[i]);
                        }
                    }
                    if (object[".google.api.http"] != null) {
                        if (typeof object[".google.api.http"] !== "object")
                            throw TypeError(".google.protobuf.MethodOptions..google.api.http: object expected");
                        message[".google.api.http"] = $root.google.api.HttpRule.fromObject(object[".google.api.http"]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpreted_option = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object[".google.api.http"] = null;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpreted_option && message.uninterpreted_option.length) {
                        object.uninterpreted_option = [];
                        for (var j = 0; j < message.uninterpreted_option.length; ++j)
                            object.uninterpreted_option[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpreted_option[j], options);
                    }
                    if (message[".google.api.http"] != null && message.hasOwnProperty(".google.api.http"))
                        object[".google.api.http"] = $root.google.api.HttpRule.toObject(message[".google.api.http"], options);
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifier_value] UninterpretedOption identifier_value
                 * @property {Long|null} [positive_int_value] UninterpretedOption positive_int_value
                 * @property {Long|null} [negative_int_value] UninterpretedOption negative_int_value
                 * @property {number|null} [double_value] UninterpretedOption double_value
                 * @property {Uint8Array|null} [string_value] UninterpretedOption string_value
                 * @property {string|null} [aggregate_value] UninterpretedOption aggregate_value
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifier_value.
                 * @member {string} identifier_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifier_value = "";
    
                /**
                 * UninterpretedOption positive_int_value.
                 * @member {Long} positive_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positive_int_value = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negative_int_value.
                 * @member {Long} negative_int_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negative_int_value = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption double_value.
                 * @member {number} double_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.double_value = 0;
    
                /**
                 * UninterpretedOption string_value.
                 * @member {Uint8Array} string_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.string_value = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregate_value.
                 * @member {string} aggregate_value
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregate_value = "";
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifier_value != null && Object.hasOwnProperty.call(message, "identifier_value"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifier_value);
                    if (message.positive_int_value != null && Object.hasOwnProperty.call(message, "positive_int_value"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positive_int_value);
                    if (message.negative_int_value != null && Object.hasOwnProperty.call(message, "negative_int_value"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negative_int_value);
                    if (message.double_value != null && Object.hasOwnProperty.call(message, "double_value"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.double_value);
                    if (message.string_value != null && Object.hasOwnProperty.call(message, "string_value"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.string_value);
                    if (message.aggregate_value != null && Object.hasOwnProperty.call(message, "aggregate_value"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregate_value);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2:
                            if (!(message.name && message.name.length))
                                message.name = [];
                            message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                            break;
                        case 3:
                            message.identifier_value = reader.string();
                            break;
                        case 4:
                            message.positive_int_value = reader.uint64();
                            break;
                        case 5:
                            message.negative_int_value = reader.int64();
                            break;
                        case 6:
                            message.double_value = reader.double();
                            break;
                        case 7:
                            message.string_value = reader.bytes();
                            break;
                        case 8:
                            message.aggregate_value = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        if (!$util.isString(message.identifier_value))
                            return "identifier_value: string expected";
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (!$util.isInteger(message.positive_int_value) && !(message.positive_int_value && $util.isInteger(message.positive_int_value.low) && $util.isInteger(message.positive_int_value.high)))
                            return "positive_int_value: integer|Long expected";
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (!$util.isInteger(message.negative_int_value) && !(message.negative_int_value && $util.isInteger(message.negative_int_value.low) && $util.isInteger(message.negative_int_value.high)))
                            return "negative_int_value: integer|Long expected";
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        if (typeof message.double_value !== "number")
                            return "double_value: number expected";
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        if (!(message.string_value && typeof message.string_value.length === "number" || $util.isString(message.string_value)))
                            return "string_value: buffer expected";
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        if (!$util.isString(message.aggregate_value))
                            return "aggregate_value: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifier_value != null)
                        message.identifier_value = String(object.identifier_value);
                    if (object.positive_int_value != null)
                        if ($util.Long)
                            (message.positive_int_value = $util.Long.fromValue(object.positive_int_value)).unsigned = true;
                        else if (typeof object.positive_int_value === "string")
                            message.positive_int_value = parseInt(object.positive_int_value, 10);
                        else if (typeof object.positive_int_value === "number")
                            message.positive_int_value = object.positive_int_value;
                        else if (typeof object.positive_int_value === "object")
                            message.positive_int_value = new $util.LongBits(object.positive_int_value.low >>> 0, object.positive_int_value.high >>> 0).toNumber(true);
                    if (object.negative_int_value != null)
                        if ($util.Long)
                            (message.negative_int_value = $util.Long.fromValue(object.negative_int_value)).unsigned = false;
                        else if (typeof object.negative_int_value === "string")
                            message.negative_int_value = parseInt(object.negative_int_value, 10);
                        else if (typeof object.negative_int_value === "number")
                            message.negative_int_value = object.negative_int_value;
                        else if (typeof object.negative_int_value === "object")
                            message.negative_int_value = new $util.LongBits(object.negative_int_value.low >>> 0, object.negative_int_value.high >>> 0).toNumber();
                    if (object.double_value != null)
                        message.double_value = Number(object.double_value);
                    if (object.string_value != null)
                        if (typeof object.string_value === "string")
                            $util.base64.decode(object.string_value, message.string_value = $util.newBuffer($util.base64.length(object.string_value)), 0);
                        else if (object.string_value.length)
                            message.string_value = object.string_value;
                    if (object.aggregate_value != null)
                        message.aggregate_value = String(object.aggregate_value);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifier_value = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positive_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positive_int_value = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negative_int_value = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negative_int_value = options.longs === String ? "0" : 0;
                        object.double_value = 0;
                        if (options.bytes === String)
                            object.string_value = "";
                        else {
                            object.string_value = [];
                            if (options.bytes !== Array)
                                object.string_value = $util.newBuffer(object.string_value);
                        }
                        object.aggregate_value = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifier_value != null && message.hasOwnProperty("identifier_value"))
                        object.identifier_value = message.identifier_value;
                    if (message.positive_int_value != null && message.hasOwnProperty("positive_int_value"))
                        if (typeof message.positive_int_value === "number")
                            object.positive_int_value = options.longs === String ? String(message.positive_int_value) : message.positive_int_value;
                        else
                            object.positive_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.positive_int_value) : options.longs === Number ? new $util.LongBits(message.positive_int_value.low >>> 0, message.positive_int_value.high >>> 0).toNumber(true) : message.positive_int_value;
                    if (message.negative_int_value != null && message.hasOwnProperty("negative_int_value"))
                        if (typeof message.negative_int_value === "number")
                            object.negative_int_value = options.longs === String ? String(message.negative_int_value) : message.negative_int_value;
                        else
                            object.negative_int_value = options.longs === String ? $util.Long.prototype.toString.call(message.negative_int_value) : options.longs === Number ? new $util.LongBits(message.negative_int_value.low >>> 0, message.negative_int_value.high >>> 0).toNumber() : message.negative_int_value;
                    if (message.double_value != null && message.hasOwnProperty("double_value"))
                        object.double_value = options.json && !isFinite(message.double_value) ? String(message.double_value) : message.double_value;
                    if (message.string_value != null && message.hasOwnProperty("string_value"))
                        object.string_value = options.bytes === String ? $util.base64.encode(message.string_value, 0, message.string_value.length) : options.bytes === Array ? Array.prototype.slice.call(message.string_value) : message.string_value;
                    if (message.aggregate_value != null && message.hasOwnProperty("aggregate_value"))
                        object.aggregate_value = message.aggregate_value;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} name_part NamePart name_part
                     * @property {boolean} is_extension NamePart is_extension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart name_part.
                     * @member {string} name_part
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.name_part = "";
    
                    /**
                     * NamePart is_extension.
                     * @member {boolean} is_extension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.is_extension = false;
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name_part);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.is_extension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.name_part = reader.string();
                                break;
                            case 2:
                                message.is_extension = reader.bool();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("name_part"))
                            throw $util.ProtocolError("missing required 'name_part'", { instance: message });
                        if (!message.hasOwnProperty("is_extension"))
                            throw $util.ProtocolError("missing required 'is_extension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.name_part))
                            return "name_part: string expected";
                        if (typeof message.is_extension !== "boolean")
                            return "is_extension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.name_part != null)
                            message.name_part = String(object.name_part);
                        if (object.is_extension != null)
                            message.is_extension = Boolean(object.is_extension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.name_part = "";
                            object.is_extension = false;
                        }
                        if (message.name_part != null && message.hasOwnProperty("name_part"))
                            object.name_part = message.name_part;
                        if (message.is_extension != null && message.hasOwnProperty("is_extension"))
                            object.is_extension = message.is_extension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.location && message.location.length))
                                message.location = [];
                            message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leading_comments] Location leading_comments
                     * @property {string|null} [trailing_comments] Location trailing_comments
                     * @property {Array.<string>|null} [leading_detached_comments] Location leading_detached_comments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leading_detached_comments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leading_comments.
                     * @member {string} leading_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_comments = "";
    
                    /**
                     * Location trailing_comments.
                     * @member {string} trailing_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailing_comments = "";
    
                    /**
                     * Location leading_detached_comments.
                     * @member {Array.<string>} leading_detached_comments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leading_detached_comments = $util.emptyArray;
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leading_comments != null && Object.hasOwnProperty.call(message, "leading_comments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leading_comments);
                        if (message.trailing_comments != null && Object.hasOwnProperty.call(message, "trailing_comments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailing_comments);
                        if (message.leading_detached_comments != null && message.leading_detached_comments.length)
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leading_detached_comments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                if (!(message.span && message.span.length))
                                    message.span = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.span.push(reader.int32());
                                } else
                                    message.span.push(reader.int32());
                                break;
                            case 3:
                                message.leading_comments = reader.string();
                                break;
                            case 4:
                                message.trailing_comments = reader.string();
                                break;
                            case 6:
                                if (!(message.leading_detached_comments && message.leading_detached_comments.length))
                                    message.leading_detached_comments = [];
                                message.leading_detached_comments.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            if (!$util.isString(message.leading_comments))
                                return "leading_comments: string expected";
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            if (!$util.isString(message.trailing_comments))
                                return "trailing_comments: string expected";
                        if (message.leading_detached_comments != null && message.hasOwnProperty("leading_detached_comments")) {
                            if (!Array.isArray(message.leading_detached_comments))
                                return "leading_detached_comments: array expected";
                            for (var i = 0; i < message.leading_detached_comments.length; ++i)
                                if (!$util.isString(message.leading_detached_comments[i]))
                                    return "leading_detached_comments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leading_comments != null)
                            message.leading_comments = String(object.leading_comments);
                        if (object.trailing_comments != null)
                            message.trailing_comments = String(object.trailing_comments);
                        if (object.leading_detached_comments) {
                            if (!Array.isArray(object.leading_detached_comments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leading_detached_comments: array expected");
                            message.leading_detached_comments = [];
                            for (var i = 0; i < object.leading_detached_comments.length; ++i)
                                message.leading_detached_comments[i] = String(object.leading_detached_comments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leading_detached_comments = [];
                        }
                        if (options.defaults) {
                            object.leading_comments = "";
                            object.trailing_comments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leading_comments != null && message.hasOwnProperty("leading_comments"))
                            object.leading_comments = message.leading_comments;
                        if (message.trailing_comments != null && message.hasOwnProperty("trailing_comments"))
                            object.trailing_comments = message.trailing_comments;
                        if (message.leading_detached_comments && message.leading_detached_comments.length) {
                            object.leading_detached_comments = [];
                            for (var j = 0; j < message.leading_detached_comments.length; ++j)
                                object.leading_detached_comments[j] = message.leading_detached_comments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.annotation && message.annotation.length))
                                message.annotation = [];
                            message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [source_file] Annotation source_file
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation source_file.
                     * @member {string} source_file
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.source_file = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.source_file != null && Object.hasOwnProperty.call(message, "source_file"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.source_file);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.path && message.path.length))
                                    message.path = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.path.push(reader.int32());
                                } else
                                    message.path.push(reader.int32());
                                break;
                            case 2:
                                message.source_file = reader.string();
                                break;
                            case 3:
                                message.begin = reader.int32();
                                break;
                            case 4:
                                message.end = reader.int32();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            if (!$util.isString(message.source_file))
                                return "source_file: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.source_file != null)
                            message.source_file = String(object.source_file);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.source_file = "";
                            object.begin = 0;
                            object.end = 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.source_file != null && message.hasOwnProperty("source_file"))
                            object.source_file = message.source_file;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            protobuf.Any = (function() {
    
                /**
                 * Properties of an Any.
                 * @memberof google.protobuf
                 * @interface IAny
                 * @property {string|null} [type_url] Any type_url
                 * @property {Uint8Array|null} [value] Any value
                 */
    
                /**
                 * Constructs a new Any.
                 * @memberof google.protobuf
                 * @classdesc Represents an Any.
                 * @implements IAny
                 * @constructor
                 * @param {google.protobuf.IAny=} [properties] Properties to set
                 */
                function Any(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Any type_url.
                 * @member {string} type_url
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.type_url = "";
    
                /**
                 * Any value.
                 * @member {Uint8Array} value
                 * @memberof google.protobuf.Any
                 * @instance
                 */
                Any.prototype.value = $util.newBuffer([]);
    
                /**
                 * Encodes the specified Any message. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.type_url != null && Object.hasOwnProperty.call(message, "type_url"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.type_url);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                        writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.value);
                    return writer;
                };
    
                /**
                 * Encodes the specified Any message, length delimited. Does not implicitly {@link google.protobuf.Any.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.IAny} message Any message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Any.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Any();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.type_url = reader.string();
                            break;
                        case 2:
                            message.value = reader.bytes();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an Any message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Any} Any
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Any.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an Any message.
                 * @function verify
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Any.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        if (!$util.isString(message.type_url))
                            return "type_url: string expected";
                    if (message.value != null && message.hasOwnProperty("value"))
                        if (!(message.value && typeof message.value.length === "number" || $util.isString(message.value)))
                            return "value: buffer expected";
                    return null;
                };
    
                /**
                 * Creates an Any message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Any} Any
                 */
                Any.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Any)
                        return object;
                    var message = new $root.google.protobuf.Any();
                    if (object.type_url != null)
                        message.type_url = String(object.type_url);
                    if (object.value != null)
                        if (typeof object.value === "string")
                            $util.base64.decode(object.value, message.value = $util.newBuffer($util.base64.length(object.value)), 0);
                        else if (object.value.length)
                            message.value = object.value;
                    return message;
                };
    
                /**
                 * Creates a plain object from an Any message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Any
                 * @static
                 * @param {google.protobuf.Any} message Any
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Any.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.type_url = "";
                        if (options.bytes === String)
                            object.value = "";
                        else {
                            object.value = [];
                            if (options.bytes !== Array)
                                object.value = $util.newBuffer(object.value);
                        }
                    }
                    if (message.type_url != null && message.hasOwnProperty("type_url"))
                        object.type_url = message.type_url;
                    if (message.value != null && message.hasOwnProperty("value"))
                        object.value = options.bytes === String ? $util.base64.encode(message.value, 0, message.value.length) : options.bytes === Array ? Array.prototype.slice.call(message.value) : message.value;
                    return object;
                };
    
                /**
                 * Converts this Any to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Any
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Any.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Any;
            })();
    
            protobuf.Timestamp = (function() {
    
                /**
                 * Properties of a Timestamp.
                 * @memberof google.protobuf
                 * @interface ITimestamp
                 * @property {Long|null} [seconds] Timestamp seconds
                 * @property {number|null} [nanos] Timestamp nanos
                 */
    
                /**
                 * Constructs a new Timestamp.
                 * @memberof google.protobuf
                 * @classdesc Represents a Timestamp.
                 * @implements ITimestamp
                 * @constructor
                 * @param {google.protobuf.ITimestamp=} [properties] Properties to set
                 */
                function Timestamp(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Timestamp seconds.
                 * @member {Long} seconds
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Timestamp nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 */
                Timestamp.prototype.nanos = 0;
    
                /**
                 * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Timestamp.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Timestamp message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Timestamp} Timestamp
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Timestamp.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Timestamp message.
                 * @function verify
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Timestamp.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Timestamp} Timestamp
                 */
                Timestamp.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Timestamp)
                        return object;
                    var message = new $root.google.protobuf.Timestamp();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Timestamp message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Timestamp
                 * @static
                 * @param {google.protobuf.Timestamp} message Timestamp
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Timestamp.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Timestamp to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Timestamp
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Timestamp.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Timestamp;
            })();
    
            protobuf.Duration = (function() {
    
                /**
                 * Properties of a Duration.
                 * @memberof google.protobuf
                 * @interface IDuration
                 * @property {Long|null} [seconds] Duration seconds
                 * @property {number|null} [nanos] Duration nanos
                 */
    
                /**
                 * Constructs a new Duration.
                 * @memberof google.protobuf
                 * @classdesc Represents a Duration.
                 * @implements IDuration
                 * @constructor
                 * @param {google.protobuf.IDuration=} [properties] Properties to set
                 */
                function Duration(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Duration seconds.
                 * @member {Long} seconds
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * Duration nanos.
                 * @member {number} nanos
                 * @memberof google.protobuf.Duration
                 * @instance
                 */
                Duration.prototype.nanos = 0;
    
                /**
                 * Encodes the specified Duration message. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.seconds != null && Object.hasOwnProperty.call(message, "seconds"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);
                    if (message.nanos != null && Object.hasOwnProperty.call(message, "nanos"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);
                    return writer;
                };
    
                /**
                 * Encodes the specified Duration message, length delimited. Does not implicitly {@link google.protobuf.Duration.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.IDuration} message Duration message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Duration.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Duration();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.seconds = reader.int64();
                            break;
                        case 2:
                            message.nanos = reader.int32();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Duration message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.Duration} Duration
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Duration.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Duration message.
                 * @function verify
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Duration.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))
                            return "seconds: integer|Long expected";
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        if (!$util.isInteger(message.nanos))
                            return "nanos: integer expected";
                    return null;
                };
    
                /**
                 * Creates a Duration message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.Duration} Duration
                 */
                Duration.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.Duration)
                        return object;
                    var message = new $root.google.protobuf.Duration();
                    if (object.seconds != null)
                        if ($util.Long)
                            (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;
                        else if (typeof object.seconds === "string")
                            message.seconds = parseInt(object.seconds, 10);
                        else if (typeof object.seconds === "number")
                            message.seconds = object.seconds;
                        else if (typeof object.seconds === "object")
                            message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();
                    if (object.nanos != null)
                        message.nanos = object.nanos | 0;
                    return message;
                };
    
                /**
                 * Creates a plain object from a Duration message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.Duration
                 * @static
                 * @param {google.protobuf.Duration} message Duration
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Duration.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.seconds = options.longs === String ? "0" : 0;
                        object.nanos = 0;
                    }
                    if (message.seconds != null && message.hasOwnProperty("seconds"))
                        if (typeof message.seconds === "number")
                            object.seconds = options.longs === String ? String(message.seconds) : message.seconds;
                        else
                            object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;
                    if (message.nanos != null && message.hasOwnProperty("nanos"))
                        object.nanos = message.nanos;
                    return object;
                };
    
                /**
                 * Converts this Duration to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.Duration
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Duration.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Duration;
            })();
    
            return protobuf;
        })();
    
        google.api = (function() {
    
            /**
             * Namespace api.
             * @memberof google
             * @namespace
             */
            var api = {};
    
            api.Http = (function() {
    
                /**
                 * Properties of a Http.
                 * @memberof google.api
                 * @interface IHttp
                 * @property {Array.<google.api.IHttpRule>|null} [rules] Http rules
                 * @property {boolean|null} [fully_decode_reserved_expansion] Http fully_decode_reserved_expansion
                 */
    
                /**
                 * Constructs a new Http.
                 * @memberof google.api
                 * @classdesc Represents a Http.
                 * @implements IHttp
                 * @constructor
                 * @param {google.api.IHttp=} [properties] Properties to set
                 */
                function Http(properties) {
                    this.rules = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * Http rules.
                 * @member {Array.<google.api.IHttpRule>} rules
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.rules = $util.emptyArray;
    
                /**
                 * Http fully_decode_reserved_expansion.
                 * @member {boolean} fully_decode_reserved_expansion
                 * @memberof google.api.Http
                 * @instance
                 */
                Http.prototype.fully_decode_reserved_expansion = false;
    
                /**
                 * Encodes the specified Http message. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.rules != null && message.rules.length)
                        for (var i = 0; i < message.rules.length; ++i)
                            $root.google.api.HttpRule.encode(message.rules[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    if (message.fully_decode_reserved_expansion != null && Object.hasOwnProperty.call(message, "fully_decode_reserved_expansion"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.fully_decode_reserved_expansion);
                    return writer;
                };
    
                /**
                 * Encodes the specified Http message, length delimited. Does not implicitly {@link google.api.Http.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.IHttp} message Http message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                Http.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.Http();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            if (!(message.rules && message.rules.length))
                                message.rules = [];
                            message.rules.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        case 2:
                            message.fully_decode_reserved_expansion = reader.bool();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a Http message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.Http
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.Http} Http
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                Http.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a Http message.
                 * @function verify
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                Http.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.rules != null && message.hasOwnProperty("rules")) {
                        if (!Array.isArray(message.rules))
                            return "rules: array expected";
                        for (var i = 0; i < message.rules.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.rules[i]);
                            if (error)
                                return "rules." + error;
                        }
                    }
                    if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                        if (typeof message.fully_decode_reserved_expansion !== "boolean")
                            return "fully_decode_reserved_expansion: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a Http message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.Http
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.Http} Http
                 */
                Http.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.Http)
                        return object;
                    var message = new $root.google.api.Http();
                    if (object.rules) {
                        if (!Array.isArray(object.rules))
                            throw TypeError(".google.api.Http.rules: array expected");
                        message.rules = [];
                        for (var i = 0; i < object.rules.length; ++i) {
                            if (typeof object.rules[i] !== "object")
                                throw TypeError(".google.api.Http.rules: object expected");
                            message.rules[i] = $root.google.api.HttpRule.fromObject(object.rules[i]);
                        }
                    }
                    if (object.fully_decode_reserved_expansion != null)
                        message.fully_decode_reserved_expansion = Boolean(object.fully_decode_reserved_expansion);
                    return message;
                };
    
                /**
                 * Creates a plain object from a Http message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.Http
                 * @static
                 * @param {google.api.Http} message Http
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                Http.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.rules = [];
                    if (options.defaults)
                        object.fully_decode_reserved_expansion = false;
                    if (message.rules && message.rules.length) {
                        object.rules = [];
                        for (var j = 0; j < message.rules.length; ++j)
                            object.rules[j] = $root.google.api.HttpRule.toObject(message.rules[j], options);
                    }
                    if (message.fully_decode_reserved_expansion != null && message.hasOwnProperty("fully_decode_reserved_expansion"))
                        object.fully_decode_reserved_expansion = message.fully_decode_reserved_expansion;
                    return object;
                };
    
                /**
                 * Converts this Http to JSON.
                 * @function toJSON
                 * @memberof google.api.Http
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                Http.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return Http;
            })();
    
            api.HttpRule = (function() {
    
                /**
                 * Properties of a HttpRule.
                 * @memberof google.api
                 * @interface IHttpRule
                 * @property {string|null} [selector] HttpRule selector
                 * @property {string|null} [get] HttpRule get
                 * @property {string|null} [put] HttpRule put
                 * @property {string|null} [post] HttpRule post
                 * @property {string|null} ["delete"] HttpRule delete
                 * @property {string|null} [patch] HttpRule patch
                 * @property {google.api.ICustomHttpPattern|null} [custom] HttpRule custom
                 * @property {string|null} [body] HttpRule body
                 * @property {string|null} [response_body] HttpRule response_body
                 * @property {Array.<google.api.IHttpRule>|null} [additional_bindings] HttpRule additional_bindings
                 */
    
                /**
                 * Constructs a new HttpRule.
                 * @memberof google.api
                 * @classdesc Represents a HttpRule.
                 * @implements IHttpRule
                 * @constructor
                 * @param {google.api.IHttpRule=} [properties] Properties to set
                 */
                function HttpRule(properties) {
                    this.additional_bindings = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * HttpRule selector.
                 * @member {string} selector
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.selector = "";
    
                /**
                 * HttpRule get.
                 * @member {string|null|undefined} get
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.get = null;
    
                /**
                 * HttpRule put.
                 * @member {string|null|undefined} put
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.put = null;
    
                /**
                 * HttpRule post.
                 * @member {string|null|undefined} post
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.post = null;
    
                /**
                 * HttpRule delete.
                 * @member {string|null|undefined} delete
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype["delete"] = null;
    
                /**
                 * HttpRule patch.
                 * @member {string|null|undefined} patch
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.patch = null;
    
                /**
                 * HttpRule custom.
                 * @member {google.api.ICustomHttpPattern|null|undefined} custom
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.custom = null;
    
                /**
                 * HttpRule body.
                 * @member {string} body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.body = "";
    
                /**
                 * HttpRule response_body.
                 * @member {string} response_body
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.response_body = "";
    
                /**
                 * HttpRule additional_bindings.
                 * @member {Array.<google.api.IHttpRule>} additional_bindings
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                HttpRule.prototype.additional_bindings = $util.emptyArray;
    
                // OneOf field names bound to virtual getters and setters
                var $oneOfFields;
    
                /**
                 * HttpRule pattern.
                 * @member {"get"|"put"|"post"|"delete"|"patch"|"custom"|undefined} pattern
                 * @memberof google.api.HttpRule
                 * @instance
                 */
                Object.defineProperty(HttpRule.prototype, "pattern", {
                    get: $util.oneOfGetter($oneOfFields = ["get", "put", "post", "delete", "patch", "custom"]),
                    set: $util.oneOfSetter($oneOfFields)
                });
    
                /**
                 * Encodes the specified HttpRule message. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.selector != null && Object.hasOwnProperty.call(message, "selector"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.selector);
                    if (message.get != null && Object.hasOwnProperty.call(message, "get"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.get);
                    if (message.put != null && Object.hasOwnProperty.call(message, "put"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.put);
                    if (message.post != null && Object.hasOwnProperty.call(message, "post"))
                        writer.uint32(/* id 4, wireType 2 =*/34).string(message.post);
                    if (message["delete"] != null && Object.hasOwnProperty.call(message, "delete"))
                        writer.uint32(/* id 5, wireType 2 =*/42).string(message["delete"]);
                    if (message.patch != null && Object.hasOwnProperty.call(message, "patch"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.patch);
                    if (message.body != null && Object.hasOwnProperty.call(message, "body"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.body);
                    if (message.custom != null && Object.hasOwnProperty.call(message, "custom"))
                        $root.google.api.CustomHttpPattern.encode(message.custom, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.additional_bindings != null && message.additional_bindings.length)
                        for (var i = 0; i < message.additional_bindings.length; ++i)
                            $root.google.api.HttpRule.encode(message.additional_bindings[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();
                    if (message.response_body != null && Object.hasOwnProperty.call(message, "response_body"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.response_body);
                    return writer;
                };
    
                /**
                 * Encodes the specified HttpRule message, length delimited. Does not implicitly {@link google.api.HttpRule.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.IHttpRule} message HttpRule message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                HttpRule.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.HttpRule();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.selector = reader.string();
                            break;
                        case 2:
                            message.get = reader.string();
                            break;
                        case 3:
                            message.put = reader.string();
                            break;
                        case 4:
                            message.post = reader.string();
                            break;
                        case 5:
                            message["delete"] = reader.string();
                            break;
                        case 6:
                            message.patch = reader.string();
                            break;
                        case 8:
                            message.custom = $root.google.api.CustomHttpPattern.decode(reader, reader.uint32());
                            break;
                        case 7:
                            message.body = reader.string();
                            break;
                        case 12:
                            message.response_body = reader.string();
                            break;
                        case 11:
                            if (!(message.additional_bindings && message.additional_bindings.length))
                                message.additional_bindings = [];
                            message.additional_bindings.push($root.google.api.HttpRule.decode(reader, reader.uint32()));
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a HttpRule message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.HttpRule} HttpRule
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                HttpRule.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a HttpRule message.
                 * @function verify
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                HttpRule.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    var properties = {};
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        if (!$util.isString(message.selector))
                            return "selector: string expected";
                    if (message.get != null && message.hasOwnProperty("get")) {
                        properties.pattern = 1;
                        if (!$util.isString(message.get))
                            return "get: string expected";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.put))
                            return "put: string expected";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.post))
                            return "post: string expected";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message["delete"]))
                            return "delete: string expected";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        if (!$util.isString(message.patch))
                            return "patch: string expected";
                    }
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        if (properties.pattern === 1)
                            return "pattern: multiple values";
                        properties.pattern = 1;
                        {
                            var error = $root.google.api.CustomHttpPattern.verify(message.custom);
                            if (error)
                                return "custom." + error;
                        }
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        if (!$util.isString(message.body))
                            return "body: string expected";
                    if (message.response_body != null && message.hasOwnProperty("response_body"))
                        if (!$util.isString(message.response_body))
                            return "response_body: string expected";
                    if (message.additional_bindings != null && message.hasOwnProperty("additional_bindings")) {
                        if (!Array.isArray(message.additional_bindings))
                            return "additional_bindings: array expected";
                        for (var i = 0; i < message.additional_bindings.length; ++i) {
                            var error = $root.google.api.HttpRule.verify(message.additional_bindings[i]);
                            if (error)
                                return "additional_bindings." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a HttpRule message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.HttpRule} HttpRule
                 */
                HttpRule.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.HttpRule)
                        return object;
                    var message = new $root.google.api.HttpRule();
                    if (object.selector != null)
                        message.selector = String(object.selector);
                    if (object.get != null)
                        message.get = String(object.get);
                    if (object.put != null)
                        message.put = String(object.put);
                    if (object.post != null)
                        message.post = String(object.post);
                    if (object["delete"] != null)
                        message["delete"] = String(object["delete"]);
                    if (object.patch != null)
                        message.patch = String(object.patch);
                    if (object.custom != null) {
                        if (typeof object.custom !== "object")
                            throw TypeError(".google.api.HttpRule.custom: object expected");
                        message.custom = $root.google.api.CustomHttpPattern.fromObject(object.custom);
                    }
                    if (object.body != null)
                        message.body = String(object.body);
                    if (object.response_body != null)
                        message.response_body = String(object.response_body);
                    if (object.additional_bindings) {
                        if (!Array.isArray(object.additional_bindings))
                            throw TypeError(".google.api.HttpRule.additional_bindings: array expected");
                        message.additional_bindings = [];
                        for (var i = 0; i < object.additional_bindings.length; ++i) {
                            if (typeof object.additional_bindings[i] !== "object")
                                throw TypeError(".google.api.HttpRule.additional_bindings: object expected");
                            message.additional_bindings[i] = $root.google.api.HttpRule.fromObject(object.additional_bindings[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a HttpRule message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.HttpRule
                 * @static
                 * @param {google.api.HttpRule} message HttpRule
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                HttpRule.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.additional_bindings = [];
                    if (options.defaults) {
                        object.selector = "";
                        object.body = "";
                        object.response_body = "";
                    }
                    if (message.selector != null && message.hasOwnProperty("selector"))
                        object.selector = message.selector;
                    if (message.get != null && message.hasOwnProperty("get")) {
                        object.get = message.get;
                        if (options.oneofs)
                            object.pattern = "get";
                    }
                    if (message.put != null && message.hasOwnProperty("put")) {
                        object.put = message.put;
                        if (options.oneofs)
                            object.pattern = "put";
                    }
                    if (message.post != null && message.hasOwnProperty("post")) {
                        object.post = message.post;
                        if (options.oneofs)
                            object.pattern = "post";
                    }
                    if (message["delete"] != null && message.hasOwnProperty("delete")) {
                        object["delete"] = message["delete"];
                        if (options.oneofs)
                            object.pattern = "delete";
                    }
                    if (message.patch != null && message.hasOwnProperty("patch")) {
                        object.patch = message.patch;
                        if (options.oneofs)
                            object.pattern = "patch";
                    }
                    if (message.body != null && message.hasOwnProperty("body"))
                        object.body = message.body;
                    if (message.custom != null && message.hasOwnProperty("custom")) {
                        object.custom = $root.google.api.CustomHttpPattern.toObject(message.custom, options);
                        if (options.oneofs)
                            object.pattern = "custom";
                    }
                    if (message.additional_bindings && message.additional_bindings.length) {
                        object.additional_bindings = [];
                        for (var j = 0; j < message.additional_bindings.length; ++j)
                            object.additional_bindings[j] = $root.google.api.HttpRule.toObject(message.additional_bindings[j], options);
                    }
                    if (message.response_body != null && message.hasOwnProperty("response_body"))
                        object.response_body = message.response_body;
                    return object;
                };
    
                /**
                 * Converts this HttpRule to JSON.
                 * @function toJSON
                 * @memberof google.api.HttpRule
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                HttpRule.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return HttpRule;
            })();
    
            api.CustomHttpPattern = (function() {
    
                /**
                 * Properties of a CustomHttpPattern.
                 * @memberof google.api
                 * @interface ICustomHttpPattern
                 * @property {string|null} [kind] CustomHttpPattern kind
                 * @property {string|null} [path] CustomHttpPattern path
                 */
    
                /**
                 * Constructs a new CustomHttpPattern.
                 * @memberof google.api
                 * @classdesc Represents a CustomHttpPattern.
                 * @implements ICustomHttpPattern
                 * @constructor
                 * @param {google.api.ICustomHttpPattern=} [properties] Properties to set
                 */
                function CustomHttpPattern(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * CustomHttpPattern kind.
                 * @member {string} kind
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.kind = "";
    
                /**
                 * CustomHttpPattern path.
                 * @member {string} path
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 */
                CustomHttpPattern.prototype.path = "";
    
                /**
                 * Encodes the specified CustomHttpPattern message. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.kind != null && Object.hasOwnProperty.call(message, "kind"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.kind);
                    if (message.path != null && Object.hasOwnProperty.call(message, "path"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);
                    return writer;
                };
    
                /**
                 * Encodes the specified CustomHttpPattern message, length delimited. Does not implicitly {@link google.api.CustomHttpPattern.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.ICustomHttpPattern} message CustomHttpPattern message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                CustomHttpPattern.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.api.CustomHttpPattern();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1:
                            message.kind = reader.string();
                            break;
                        case 2:
                            message.path = reader.string();
                            break;
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a CustomHttpPattern message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                CustomHttpPattern.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a CustomHttpPattern message.
                 * @function verify
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                CustomHttpPattern.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        if (!$util.isString(message.kind))
                            return "kind: string expected";
                    if (message.path != null && message.hasOwnProperty("path"))
                        if (!$util.isString(message.path))
                            return "path: string expected";
                    return null;
                };
    
                /**
                 * Creates a CustomHttpPattern message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.api.CustomHttpPattern} CustomHttpPattern
                 */
                CustomHttpPattern.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.api.CustomHttpPattern)
                        return object;
                    var message = new $root.google.api.CustomHttpPattern();
                    if (object.kind != null)
                        message.kind = String(object.kind);
                    if (object.path != null)
                        message.path = String(object.path);
                    return message;
                };
    
                /**
                 * Creates a plain object from a CustomHttpPattern message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.api.CustomHttpPattern
                 * @static
                 * @param {google.api.CustomHttpPattern} message CustomHttpPattern
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                CustomHttpPattern.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.kind = "";
                        object.path = "";
                    }
                    if (message.kind != null && message.hasOwnProperty("kind"))
                        object.kind = message.kind;
                    if (message.path != null && message.hasOwnProperty("path"))
                        object.path = message.path;
                    return object;
                };
    
                /**
                 * Converts this CustomHttpPattern to JSON.
                 * @function toJSON
                 * @memberof google.api.CustomHttpPattern
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                CustomHttpPattern.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                return CustomHttpPattern;
            })();
    
            return api;
        })();
    
        return google;
    })();
    
    $root.osmosis = (function() {
    
        /**
         * Namespace osmosis.
         * @exports osmosis
         * @namespace
         */
        var osmosis = {};
    
        osmosis.tokenfactory = (function() {
    
            /**
             * Namespace tokenfactory.
             * @memberof osmosis
             * @namespace
             */
            var tokenfactory = {};
    
            tokenfactory.v1beta1 = (function() {
    
                /**
                 * Namespace v1beta1.
                 * @memberof osmosis.tokenfactory
                 * @namespace
                 */
                var v1beta1 = {};
    
                v1beta1.Msg = (function() {
    
                    /**
                     * Constructs a new Msg service.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a Msg
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Msg(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Msg.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Msg;
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Msg#createDenom}.
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @typedef CreateDenomCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse} [response] MsgCreateDenomResponse
                     */
    
                    /**
                     * Calls CreateDenom.
                     * @function createDenom
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgCreateDenom} request MsgCreateDenom message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Msg.CreateDenomCallback} callback Node-style callback called with the error, if any, and MsgCreateDenomResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.createDenom = function createDenom(request, callback) {
                        return this.rpcCall(createDenom, $root.osmosis.tokenfactory.v1beta1.MsgCreateDenom, $root.osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse, request, callback);
                    }, "name", { value: "CreateDenom" });
    
                    /**
                     * Calls CreateDenom.
                     * @function createDenom
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgCreateDenom} request MsgCreateDenom message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Msg#mint}.
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @typedef MintCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.MsgMintResponse} [response] MsgMintResponse
                     */
    
                    /**
                     * Calls Mint.
                     * @function mint
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgMint} request MsgMint message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Msg.MintCallback} callback Node-style callback called with the error, if any, and MsgMintResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.mint = function mint(request, callback) {
                        return this.rpcCall(mint, $root.osmosis.tokenfactory.v1beta1.MsgMint, $root.osmosis.tokenfactory.v1beta1.MsgMintResponse, request, callback);
                    }, "name", { value: "Mint" });
    
                    /**
                     * Calls Mint.
                     * @function mint
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgMint} request MsgMint message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.MsgMintResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Msg#burn}.
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @typedef BurnCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.MsgBurnResponse} [response] MsgBurnResponse
                     */
    
                    /**
                     * Calls Burn.
                     * @function burn
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgBurn} request MsgBurn message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Msg.BurnCallback} callback Node-style callback called with the error, if any, and MsgBurnResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.burn = function burn(request, callback) {
                        return this.rpcCall(burn, $root.osmosis.tokenfactory.v1beta1.MsgBurn, $root.osmosis.tokenfactory.v1beta1.MsgBurnResponse, request, callback);
                    }, "name", { value: "Burn" });
    
                    /**
                     * Calls Burn.
                     * @function burn
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgBurn} request MsgBurn message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.MsgBurnResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Msg#changeAdmin}.
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @typedef ChangeAdminCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse} [response] MsgChangeAdminResponse
                     */
    
                    /**
                     * Calls ChangeAdmin.
                     * @function changeAdmin
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgChangeAdmin} request MsgChangeAdmin message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Msg.ChangeAdminCallback} callback Node-style callback called with the error, if any, and MsgChangeAdminResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.changeAdmin = function changeAdmin(request, callback) {
                        return this.rpcCall(changeAdmin, $root.osmosis.tokenfactory.v1beta1.MsgChangeAdmin, $root.osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse, request, callback);
                    }, "name", { value: "ChangeAdmin" });
    
                    /**
                     * Calls ChangeAdmin.
                     * @function changeAdmin
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgChangeAdmin} request MsgChangeAdmin message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Msg#setDenomMetadata}.
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @typedef SetDenomMetadataCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse} [response] MsgSetDenomMetadataResponse
                     */
    
                    /**
                     * Calls SetDenomMetadata.
                     * @function setDenomMetadata
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetDenomMetadata} request MsgSetDenomMetadata message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Msg.SetDenomMetadataCallback} callback Node-style callback called with the error, if any, and MsgSetDenomMetadataResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.setDenomMetadata = function setDenomMetadata(request, callback) {
                        return this.rpcCall(setDenomMetadata, $root.osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata, $root.osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse, request, callback);
                    }, "name", { value: "SetDenomMetadata" });
    
                    /**
                     * Calls SetDenomMetadata.
                     * @function setDenomMetadata
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetDenomMetadata} request MsgSetDenomMetadata message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Msg#setBeforeSendHook}.
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @typedef SetBeforeSendHookCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse} [response] MsgSetBeforeSendHookResponse
                     */
    
                    /**
                     * Calls SetBeforeSendHook.
                     * @function setBeforeSendHook
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetBeforeSendHook} request MsgSetBeforeSendHook message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Msg.SetBeforeSendHookCallback} callback Node-style callback called with the error, if any, and MsgSetBeforeSendHookResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.setBeforeSendHook = function setBeforeSendHook(request, callback) {
                        return this.rpcCall(setBeforeSendHook, $root.osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook, $root.osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse, request, callback);
                    }, "name", { value: "SetBeforeSendHook" });
    
                    /**
                     * Calls SetBeforeSendHook.
                     * @function setBeforeSendHook
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetBeforeSendHook} request MsgSetBeforeSendHook message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Msg#forceTransfer}.
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @typedef ForceTransferCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.MsgForceTransferResponse} [response] MsgForceTransferResponse
                     */
    
                    /**
                     * Calls ForceTransfer.
                     * @function forceTransfer
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgForceTransfer} request MsgForceTransfer message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Msg.ForceTransferCallback} callback Node-style callback called with the error, if any, and MsgForceTransferResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.forceTransfer = function forceTransfer(request, callback) {
                        return this.rpcCall(forceTransfer, $root.osmosis.tokenfactory.v1beta1.MsgForceTransfer, $root.osmosis.tokenfactory.v1beta1.MsgForceTransferResponse, request, callback);
                    }, "name", { value: "ForceTransfer" });
    
                    /**
                     * Calls ForceTransfer.
                     * @function forceTransfer
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgForceTransfer} request MsgForceTransfer message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.MsgForceTransferResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Msg#updateParams}.
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @typedef UpdateParamsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse} [response] MsgUpdateParamsResponse
                     */
    
                    /**
                     * Calls UpdateParams.
                     * @function updateParams
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgUpdateParams} request MsgUpdateParams message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Msg.UpdateParamsCallback} callback Node-style callback called with the error, if any, and MsgUpdateParamsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Msg.prototype.updateParams = function updateParams(request, callback) {
                        return this.rpcCall(updateParams, $root.osmosis.tokenfactory.v1beta1.MsgUpdateParams, $root.osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse, request, callback);
                    }, "name", { value: "UpdateParams" });
    
                    /**
                     * Calls UpdateParams.
                     * @function updateParams
                     * @memberof osmosis.tokenfactory.v1beta1.Msg
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IMsgUpdateParams} request MsgUpdateParams message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse>} Promise
                     * @variation 2
                     */
    
                    return Msg;
                })();
    
                v1beta1.MsgCreateDenom = (function() {
    
                    /**
                     * Properties of a MsgCreateDenom.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgCreateDenom
                     * @property {string|null} [sender] MsgCreateDenom sender
                     * @property {string|null} [subdenom] MsgCreateDenom subdenom
                     */
    
                    /**
                     * Constructs a new MsgCreateDenom.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgCreateDenom.
                     * @implements IMsgCreateDenom
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgCreateDenom=} [properties] Properties to set
                     */
                    function MsgCreateDenom(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgCreateDenom sender.
                     * @member {string} sender
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @instance
                     */
                    MsgCreateDenom.prototype.sender = "";
    
                    /**
                     * MsgCreateDenom subdenom.
                     * @member {string} subdenom
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @instance
                     */
                    MsgCreateDenom.prototype.subdenom = "";
    
                    /**
                     * Encodes the specified MsgCreateDenom message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgCreateDenom.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgCreateDenom} message MsgCreateDenom message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateDenom.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                        if (message.subdenom != null && Object.hasOwnProperty.call(message, "subdenom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.subdenom);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgCreateDenom message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgCreateDenom.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgCreateDenom} message MsgCreateDenom message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateDenom.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgCreateDenom message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgCreateDenom} MsgCreateDenom
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateDenom.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgCreateDenom();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sender = reader.string();
                                break;
                            case 2:
                                message.subdenom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgCreateDenom message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgCreateDenom} MsgCreateDenom
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateDenom.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgCreateDenom message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgCreateDenom.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.subdenom != null && message.hasOwnProperty("subdenom"))
                            if (!$util.isString(message.subdenom))
                                return "subdenom: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgCreateDenom message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgCreateDenom} MsgCreateDenom
                     */
                    MsgCreateDenom.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgCreateDenom)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.MsgCreateDenom();
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.subdenom != null)
                            message.subdenom = String(object.subdenom);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgCreateDenom message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgCreateDenom} message MsgCreateDenom
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgCreateDenom.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.sender = "";
                            object.subdenom = "";
                        }
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.subdenom != null && message.hasOwnProperty("subdenom"))
                            object.subdenom = message.subdenom;
                        return object;
                    };
    
                    /**
                     * Converts this MsgCreateDenom to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenom
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgCreateDenom.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgCreateDenom;
                })();
    
                v1beta1.MsgCreateDenomResponse = (function() {
    
                    /**
                     * Properties of a MsgCreateDenomResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgCreateDenomResponse
                     * @property {string|null} [new_token_denom] MsgCreateDenomResponse new_token_denom
                     */
    
                    /**
                     * Constructs a new MsgCreateDenomResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgCreateDenomResponse.
                     * @implements IMsgCreateDenomResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgCreateDenomResponse=} [properties] Properties to set
                     */
                    function MsgCreateDenomResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgCreateDenomResponse new_token_denom.
                     * @member {string} new_token_denom
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
                     * @instance
                     */
                    MsgCreateDenomResponse.prototype.new_token_denom = "";
    
                    /**
                     * Encodes the specified MsgCreateDenomResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgCreateDenomResponse} message MsgCreateDenomResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateDenomResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.new_token_denom != null && Object.hasOwnProperty.call(message, "new_token_denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.new_token_denom);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgCreateDenomResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgCreateDenomResponse} message MsgCreateDenomResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgCreateDenomResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgCreateDenomResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse} MsgCreateDenomResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateDenomResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.new_token_denom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgCreateDenomResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse} MsgCreateDenomResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgCreateDenomResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgCreateDenomResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgCreateDenomResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.new_token_denom != null && message.hasOwnProperty("new_token_denom"))
                            if (!$util.isString(message.new_token_denom))
                                return "new_token_denom: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgCreateDenomResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse} MsgCreateDenomResponse
                     */
                    MsgCreateDenomResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse();
                        if (object.new_token_denom != null)
                            message.new_token_denom = String(object.new_token_denom);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgCreateDenomResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse} message MsgCreateDenomResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgCreateDenomResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.new_token_denom = "";
                        if (message.new_token_denom != null && message.hasOwnProperty("new_token_denom"))
                            object.new_token_denom = message.new_token_denom;
                        return object;
                    };
    
                    /**
                     * Converts this MsgCreateDenomResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgCreateDenomResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgCreateDenomResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgCreateDenomResponse;
                })();
    
                v1beta1.MsgMint = (function() {
    
                    /**
                     * Properties of a MsgMint.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgMint
                     * @property {string|null} [sender] MsgMint sender
                     * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgMint amount
                     * @property {string|null} [mintToAddress] MsgMint mintToAddress
                     */
    
                    /**
                     * Constructs a new MsgMint.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgMint.
                     * @implements IMsgMint
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgMint=} [properties] Properties to set
                     */
                    function MsgMint(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgMint sender.
                     * @member {string} sender
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @instance
                     */
                    MsgMint.prototype.sender = "";
    
                    /**
                     * MsgMint amount.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @instance
                     */
                    MsgMint.prototype.amount = null;
    
                    /**
                     * MsgMint mintToAddress.
                     * @member {string} mintToAddress
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @instance
                     */
                    MsgMint.prototype.mintToAddress = "";
    
                    /**
                     * Encodes the specified MsgMint message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgMint.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgMint} message MsgMint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgMint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.mintToAddress != null && Object.hasOwnProperty.call(message, "mintToAddress"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.mintToAddress);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgMint message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgMint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgMint} message MsgMint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgMint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgMint message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgMint} MsgMint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgMint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgMint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sender = reader.string();
                                break;
                            case 2:
                                message.amount = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.mintToAddress = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgMint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgMint} MsgMint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgMint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgMint message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgMint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        if (message.mintToAddress != null && message.hasOwnProperty("mintToAddress"))
                            if (!$util.isString(message.mintToAddress))
                                return "mintToAddress: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgMint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgMint} MsgMint
                     */
                    MsgMint.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgMint)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.MsgMint();
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".osmosis.tokenfactory.v1beta1.MsgMint.amount: object expected");
                            message.amount = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount);
                        }
                        if (object.mintToAddress != null)
                            message.mintToAddress = String(object.mintToAddress);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgMint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgMint} message MsgMint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgMint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.sender = "";
                            object.amount = null;
                            object.mintToAddress = "";
                        }
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.cosmos.base.v1beta1.Coin.toObject(message.amount, options);
                        if (message.mintToAddress != null && message.hasOwnProperty("mintToAddress"))
                            object.mintToAddress = message.mintToAddress;
                        return object;
                    };
    
                    /**
                     * Converts this MsgMint to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgMint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgMint;
                })();
    
                v1beta1.MsgMintResponse = (function() {
    
                    /**
                     * Properties of a MsgMintResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgMintResponse
                     */
    
                    /**
                     * Constructs a new MsgMintResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgMintResponse.
                     * @implements IMsgMintResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgMintResponse=} [properties] Properties to set
                     */
                    function MsgMintResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified MsgMintResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgMintResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMintResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgMintResponse} message MsgMintResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgMintResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgMintResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgMintResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMintResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgMintResponse} message MsgMintResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgMintResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgMintResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMintResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgMintResponse} MsgMintResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgMintResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgMintResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgMintResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMintResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgMintResponse} MsgMintResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgMintResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgMintResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMintResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgMintResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgMintResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMintResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgMintResponse} MsgMintResponse
                     */
                    MsgMintResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgMintResponse)
                            return object;
                        return new $root.osmosis.tokenfactory.v1beta1.MsgMintResponse();
                    };
    
                    /**
                     * Creates a plain object from a MsgMintResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMintResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgMintResponse} message MsgMintResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgMintResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MsgMintResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgMintResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgMintResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgMintResponse;
                })();
    
                v1beta1.MsgBurn = (function() {
    
                    /**
                     * Properties of a MsgBurn.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgBurn
                     * @property {string|null} [sender] MsgBurn sender
                     * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgBurn amount
                     * @property {string|null} [burnFromAddress] MsgBurn burnFromAddress
                     */
    
                    /**
                     * Constructs a new MsgBurn.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgBurn.
                     * @implements IMsgBurn
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgBurn=} [properties] Properties to set
                     */
                    function MsgBurn(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgBurn sender.
                     * @member {string} sender
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @instance
                     */
                    MsgBurn.prototype.sender = "";
    
                    /**
                     * MsgBurn amount.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @instance
                     */
                    MsgBurn.prototype.amount = null;
    
                    /**
                     * MsgBurn burnFromAddress.
                     * @member {string} burnFromAddress
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @instance
                     */
                    MsgBurn.prototype.burnFromAddress = "";
    
                    /**
                     * Encodes the specified MsgBurn message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgBurn.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgBurn} message MsgBurn message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgBurn.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.burnFromAddress != null && Object.hasOwnProperty.call(message, "burnFromAddress"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.burnFromAddress);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgBurn message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgBurn.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgBurn} message MsgBurn message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgBurn.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgBurn message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgBurn} MsgBurn
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgBurn.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgBurn();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sender = reader.string();
                                break;
                            case 2:
                                message.amount = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.burnFromAddress = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgBurn message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgBurn} MsgBurn
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgBurn.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgBurn message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgBurn.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        if (message.burnFromAddress != null && message.hasOwnProperty("burnFromAddress"))
                            if (!$util.isString(message.burnFromAddress))
                                return "burnFromAddress: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgBurn message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgBurn} MsgBurn
                     */
                    MsgBurn.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgBurn)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.MsgBurn();
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".osmosis.tokenfactory.v1beta1.MsgBurn.amount: object expected");
                            message.amount = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount);
                        }
                        if (object.burnFromAddress != null)
                            message.burnFromAddress = String(object.burnFromAddress);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgBurn message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgBurn} message MsgBurn
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgBurn.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.sender = "";
                            object.amount = null;
                            object.burnFromAddress = "";
                        }
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.cosmos.base.v1beta1.Coin.toObject(message.amount, options);
                        if (message.burnFromAddress != null && message.hasOwnProperty("burnFromAddress"))
                            object.burnFromAddress = message.burnFromAddress;
                        return object;
                    };
    
                    /**
                     * Converts this MsgBurn to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurn
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgBurn.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgBurn;
                })();
    
                v1beta1.MsgBurnResponse = (function() {
    
                    /**
                     * Properties of a MsgBurnResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgBurnResponse
                     */
    
                    /**
                     * Constructs a new MsgBurnResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgBurnResponse.
                     * @implements IMsgBurnResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgBurnResponse=} [properties] Properties to set
                     */
                    function MsgBurnResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified MsgBurnResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgBurnResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurnResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgBurnResponse} message MsgBurnResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgBurnResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgBurnResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgBurnResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurnResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgBurnResponse} message MsgBurnResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgBurnResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgBurnResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurnResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgBurnResponse} MsgBurnResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgBurnResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgBurnResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgBurnResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurnResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgBurnResponse} MsgBurnResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgBurnResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgBurnResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurnResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgBurnResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgBurnResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurnResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgBurnResponse} MsgBurnResponse
                     */
                    MsgBurnResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgBurnResponse)
                            return object;
                        return new $root.osmosis.tokenfactory.v1beta1.MsgBurnResponse();
                    };
    
                    /**
                     * Creates a plain object from a MsgBurnResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurnResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgBurnResponse} message MsgBurnResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgBurnResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MsgBurnResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgBurnResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgBurnResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgBurnResponse;
                })();
    
                v1beta1.MsgChangeAdmin = (function() {
    
                    /**
                     * Properties of a MsgChangeAdmin.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgChangeAdmin
                     * @property {string|null} [sender] MsgChangeAdmin sender
                     * @property {string|null} [denom] MsgChangeAdmin denom
                     * @property {string|null} [new_admin] MsgChangeAdmin new_admin
                     */
    
                    /**
                     * Constructs a new MsgChangeAdmin.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgChangeAdmin.
                     * @implements IMsgChangeAdmin
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgChangeAdmin=} [properties] Properties to set
                     */
                    function MsgChangeAdmin(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgChangeAdmin sender.
                     * @member {string} sender
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @instance
                     */
                    MsgChangeAdmin.prototype.sender = "";
    
                    /**
                     * MsgChangeAdmin denom.
                     * @member {string} denom
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @instance
                     */
                    MsgChangeAdmin.prototype.denom = "";
    
                    /**
                     * MsgChangeAdmin new_admin.
                     * @member {string} new_admin
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @instance
                     */
                    MsgChangeAdmin.prototype.new_admin = "";
    
                    /**
                     * Encodes the specified MsgChangeAdmin message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgChangeAdmin.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgChangeAdmin} message MsgChangeAdmin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChangeAdmin.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                        if (message.new_admin != null && Object.hasOwnProperty.call(message, "new_admin"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.new_admin);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgChangeAdmin message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgChangeAdmin.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgChangeAdmin} message MsgChangeAdmin message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChangeAdmin.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgChangeAdmin message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgChangeAdmin} MsgChangeAdmin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChangeAdmin.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgChangeAdmin();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sender = reader.string();
                                break;
                            case 2:
                                message.denom = reader.string();
                                break;
                            case 3:
                                message.new_admin = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgChangeAdmin message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgChangeAdmin} MsgChangeAdmin
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChangeAdmin.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgChangeAdmin message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChangeAdmin.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.new_admin != null && message.hasOwnProperty("new_admin"))
                            if (!$util.isString(message.new_admin))
                                return "new_admin: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgChangeAdmin message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgChangeAdmin} MsgChangeAdmin
                     */
                    MsgChangeAdmin.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgChangeAdmin)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.MsgChangeAdmin();
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.new_admin != null)
                            message.new_admin = String(object.new_admin);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgChangeAdmin message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgChangeAdmin} message MsgChangeAdmin
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChangeAdmin.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.sender = "";
                            object.denom = "";
                            object.new_admin = "";
                        }
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.new_admin != null && message.hasOwnProperty("new_admin"))
                            object.new_admin = message.new_admin;
                        return object;
                    };
    
                    /**
                     * Converts this MsgChangeAdmin to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdmin
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChangeAdmin.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgChangeAdmin;
                })();
    
                v1beta1.MsgChangeAdminResponse = (function() {
    
                    /**
                     * Properties of a MsgChangeAdminResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgChangeAdminResponse
                     */
    
                    /**
                     * Constructs a new MsgChangeAdminResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgChangeAdminResponse.
                     * @implements IMsgChangeAdminResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgChangeAdminResponse=} [properties] Properties to set
                     */
                    function MsgChangeAdminResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified MsgChangeAdminResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgChangeAdminResponse} message MsgChangeAdminResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChangeAdminResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgChangeAdminResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgChangeAdminResponse} message MsgChangeAdminResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgChangeAdminResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgChangeAdminResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse} MsgChangeAdminResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChangeAdminResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgChangeAdminResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse} MsgChangeAdminResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgChangeAdminResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgChangeAdminResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgChangeAdminResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgChangeAdminResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse} MsgChangeAdminResponse
                     */
                    MsgChangeAdminResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse)
                            return object;
                        return new $root.osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse();
                    };
    
                    /**
                     * Creates a plain object from a MsgChangeAdminResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse} message MsgChangeAdminResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgChangeAdminResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MsgChangeAdminResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgChangeAdminResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgChangeAdminResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgChangeAdminResponse;
                })();
    
                v1beta1.MsgSetBeforeSendHook = (function() {
    
                    /**
                     * Properties of a MsgSetBeforeSendHook.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgSetBeforeSendHook
                     * @property {string|null} [sender] MsgSetBeforeSendHook sender
                     * @property {string|null} [denom] MsgSetBeforeSendHook denom
                     * @property {string|null} [contract_addr] MsgSetBeforeSendHook contract_addr
                     */
    
                    /**
                     * Constructs a new MsgSetBeforeSendHook.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgSetBeforeSendHook.
                     * @implements IMsgSetBeforeSendHook
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetBeforeSendHook=} [properties] Properties to set
                     */
                    function MsgSetBeforeSendHook(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgSetBeforeSendHook sender.
                     * @member {string} sender
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @instance
                     */
                    MsgSetBeforeSendHook.prototype.sender = "";
    
                    /**
                     * MsgSetBeforeSendHook denom.
                     * @member {string} denom
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @instance
                     */
                    MsgSetBeforeSendHook.prototype.denom = "";
    
                    /**
                     * MsgSetBeforeSendHook contract_addr.
                     * @member {string} contract_addr
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @instance
                     */
                    MsgSetBeforeSendHook.prototype.contract_addr = "";
    
                    /**
                     * Encodes the specified MsgSetBeforeSendHook message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetBeforeSendHook} message MsgSetBeforeSendHook message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetBeforeSendHook.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.denom);
                        if (message.contract_addr != null && Object.hasOwnProperty.call(message, "contract_addr"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.contract_addr);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgSetBeforeSendHook message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetBeforeSendHook} message MsgSetBeforeSendHook message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetBeforeSendHook.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgSetBeforeSendHook message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook} MsgSetBeforeSendHook
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetBeforeSendHook.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sender = reader.string();
                                break;
                            case 2:
                                message.denom = reader.string();
                                break;
                            case 3:
                                message.contract_addr = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgSetBeforeSendHook message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook} MsgSetBeforeSendHook
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetBeforeSendHook.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgSetBeforeSendHook message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSetBeforeSendHook.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.contract_addr != null && message.hasOwnProperty("contract_addr"))
                            if (!$util.isString(message.contract_addr))
                                return "contract_addr: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgSetBeforeSendHook message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook} MsgSetBeforeSendHook
                     */
                    MsgSetBeforeSendHook.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook();
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.contract_addr != null)
                            message.contract_addr = String(object.contract_addr);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgSetBeforeSendHook message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook} message MsgSetBeforeSendHook
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSetBeforeSendHook.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.sender = "";
                            object.denom = "";
                            object.contract_addr = "";
                        }
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.contract_addr != null && message.hasOwnProperty("contract_addr"))
                            object.contract_addr = message.contract_addr;
                        return object;
                    };
    
                    /**
                     * Converts this MsgSetBeforeSendHook to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHook
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSetBeforeSendHook.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgSetBeforeSendHook;
                })();
    
                v1beta1.MsgSetBeforeSendHookResponse = (function() {
    
                    /**
                     * Properties of a MsgSetBeforeSendHookResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgSetBeforeSendHookResponse
                     */
    
                    /**
                     * Constructs a new MsgSetBeforeSendHookResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgSetBeforeSendHookResponse.
                     * @implements IMsgSetBeforeSendHookResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetBeforeSendHookResponse=} [properties] Properties to set
                     */
                    function MsgSetBeforeSendHookResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified MsgSetBeforeSendHookResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetBeforeSendHookResponse} message MsgSetBeforeSendHookResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetBeforeSendHookResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgSetBeforeSendHookResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetBeforeSendHookResponse} message MsgSetBeforeSendHookResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetBeforeSendHookResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgSetBeforeSendHookResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse} MsgSetBeforeSendHookResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetBeforeSendHookResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgSetBeforeSendHookResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse} MsgSetBeforeSendHookResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetBeforeSendHookResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgSetBeforeSendHookResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSetBeforeSendHookResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgSetBeforeSendHookResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse} MsgSetBeforeSendHookResponse
                     */
                    MsgSetBeforeSendHookResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse)
                            return object;
                        return new $root.osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse();
                    };
    
                    /**
                     * Creates a plain object from a MsgSetBeforeSendHookResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse} message MsgSetBeforeSendHookResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSetBeforeSendHookResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MsgSetBeforeSendHookResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetBeforeSendHookResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSetBeforeSendHookResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgSetBeforeSendHookResponse;
                })();
    
                v1beta1.MsgSetDenomMetadata = (function() {
    
                    /**
                     * Properties of a MsgSetDenomMetadata.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgSetDenomMetadata
                     * @property {string|null} [sender] MsgSetDenomMetadata sender
                     * @property {cosmos.bank.v1beta1.IMetadata|null} [metadata] MsgSetDenomMetadata metadata
                     */
    
                    /**
                     * Constructs a new MsgSetDenomMetadata.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgSetDenomMetadata.
                     * @implements IMsgSetDenomMetadata
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetDenomMetadata=} [properties] Properties to set
                     */
                    function MsgSetDenomMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgSetDenomMetadata sender.
                     * @member {string} sender
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @instance
                     */
                    MsgSetDenomMetadata.prototype.sender = "";
    
                    /**
                     * MsgSetDenomMetadata metadata.
                     * @member {cosmos.bank.v1beta1.IMetadata|null|undefined} metadata
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @instance
                     */
                    MsgSetDenomMetadata.prototype.metadata = null;
    
                    /**
                     * Encodes the specified MsgSetDenomMetadata message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetDenomMetadata} message MsgSetDenomMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetDenomMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                        if (message.metadata != null && Object.hasOwnProperty.call(message, "metadata"))
                            $root.cosmos.bank.v1beta1.Metadata.encode(message.metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgSetDenomMetadata message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetDenomMetadata} message MsgSetDenomMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetDenomMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgSetDenomMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata} MsgSetDenomMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetDenomMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sender = reader.string();
                                break;
                            case 2:
                                message.metadata = $root.cosmos.bank.v1beta1.Metadata.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgSetDenomMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata} MsgSetDenomMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetDenomMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgSetDenomMetadata message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSetDenomMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.metadata != null && message.hasOwnProperty("metadata")) {
                            var error = $root.cosmos.bank.v1beta1.Metadata.verify(message.metadata);
                            if (error)
                                return "metadata." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MsgSetDenomMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata} MsgSetDenomMetadata
                     */
                    MsgSetDenomMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata();
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.metadata != null) {
                            if (typeof object.metadata !== "object")
                                throw TypeError(".osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata.metadata: object expected");
                            message.metadata = $root.cosmos.bank.v1beta1.Metadata.fromObject(object.metadata);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgSetDenomMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata} message MsgSetDenomMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSetDenomMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.sender = "";
                            object.metadata = null;
                        }
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.metadata != null && message.hasOwnProperty("metadata"))
                            object.metadata = $root.cosmos.bank.v1beta1.Metadata.toObject(message.metadata, options);
                        return object;
                    };
    
                    /**
                     * Converts this MsgSetDenomMetadata to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSetDenomMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgSetDenomMetadata;
                })();
    
                v1beta1.MsgSetDenomMetadataResponse = (function() {
    
                    /**
                     * Properties of a MsgSetDenomMetadataResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgSetDenomMetadataResponse
                     */
    
                    /**
                     * Constructs a new MsgSetDenomMetadataResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgSetDenomMetadataResponse.
                     * @implements IMsgSetDenomMetadataResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetDenomMetadataResponse=} [properties] Properties to set
                     */
                    function MsgSetDenomMetadataResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified MsgSetDenomMetadataResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetDenomMetadataResponse} message MsgSetDenomMetadataResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetDenomMetadataResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgSetDenomMetadataResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgSetDenomMetadataResponse} message MsgSetDenomMetadataResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgSetDenomMetadataResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgSetDenomMetadataResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse} MsgSetDenomMetadataResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetDenomMetadataResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgSetDenomMetadataResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse} MsgSetDenomMetadataResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgSetDenomMetadataResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgSetDenomMetadataResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgSetDenomMetadataResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgSetDenomMetadataResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse} MsgSetDenomMetadataResponse
                     */
                    MsgSetDenomMetadataResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse)
                            return object;
                        return new $root.osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse();
                    };
    
                    /**
                     * Creates a plain object from a MsgSetDenomMetadataResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse} message MsgSetDenomMetadataResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgSetDenomMetadataResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MsgSetDenomMetadataResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgSetDenomMetadataResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgSetDenomMetadataResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgSetDenomMetadataResponse;
                })();
    
                v1beta1.MsgForceTransfer = (function() {
    
                    /**
                     * Properties of a MsgForceTransfer.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgForceTransfer
                     * @property {string|null} [sender] MsgForceTransfer sender
                     * @property {cosmos.base.v1beta1.ICoin|null} [amount] MsgForceTransfer amount
                     * @property {string|null} [transferFromAddress] MsgForceTransfer transferFromAddress
                     * @property {string|null} [transferToAddress] MsgForceTransfer transferToAddress
                     */
    
                    /**
                     * Constructs a new MsgForceTransfer.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgForceTransfer.
                     * @implements IMsgForceTransfer
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgForceTransfer=} [properties] Properties to set
                     */
                    function MsgForceTransfer(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgForceTransfer sender.
                     * @member {string} sender
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @instance
                     */
                    MsgForceTransfer.prototype.sender = "";
    
                    /**
                     * MsgForceTransfer amount.
                     * @member {cosmos.base.v1beta1.ICoin|null|undefined} amount
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @instance
                     */
                    MsgForceTransfer.prototype.amount = null;
    
                    /**
                     * MsgForceTransfer transferFromAddress.
                     * @member {string} transferFromAddress
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @instance
                     */
                    MsgForceTransfer.prototype.transferFromAddress = "";
    
                    /**
                     * MsgForceTransfer transferToAddress.
                     * @member {string} transferToAddress
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @instance
                     */
                    MsgForceTransfer.prototype.transferToAddress = "";
    
                    /**
                     * Encodes the specified MsgForceTransfer message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgForceTransfer.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgForceTransfer} message MsgForceTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgForceTransfer.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.sender != null && Object.hasOwnProperty.call(message, "sender"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.sender);
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.cosmos.base.v1beta1.Coin.encode(message.amount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.transferFromAddress != null && Object.hasOwnProperty.call(message, "transferFromAddress"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.transferFromAddress);
                        if (message.transferToAddress != null && Object.hasOwnProperty.call(message, "transferToAddress"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.transferToAddress);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgForceTransfer message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgForceTransfer.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgForceTransfer} message MsgForceTransfer message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgForceTransfer.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgForceTransfer message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgForceTransfer} MsgForceTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgForceTransfer.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgForceTransfer();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.sender = reader.string();
                                break;
                            case 2:
                                message.amount = $root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32());
                                break;
                            case 3:
                                message.transferFromAddress = reader.string();
                                break;
                            case 4:
                                message.transferToAddress = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgForceTransfer message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgForceTransfer} MsgForceTransfer
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgForceTransfer.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgForceTransfer message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgForceTransfer.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            if (!$util.isString(message.sender))
                                return "sender: string expected";
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            var error = $root.cosmos.base.v1beta1.Coin.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        if (message.transferFromAddress != null && message.hasOwnProperty("transferFromAddress"))
                            if (!$util.isString(message.transferFromAddress))
                                return "transferFromAddress: string expected";
                        if (message.transferToAddress != null && message.hasOwnProperty("transferToAddress"))
                            if (!$util.isString(message.transferToAddress))
                                return "transferToAddress: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgForceTransfer message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgForceTransfer} MsgForceTransfer
                     */
                    MsgForceTransfer.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgForceTransfer)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.MsgForceTransfer();
                        if (object.sender != null)
                            message.sender = String(object.sender);
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".osmosis.tokenfactory.v1beta1.MsgForceTransfer.amount: object expected");
                            message.amount = $root.cosmos.base.v1beta1.Coin.fromObject(object.amount);
                        }
                        if (object.transferFromAddress != null)
                            message.transferFromAddress = String(object.transferFromAddress);
                        if (object.transferToAddress != null)
                            message.transferToAddress = String(object.transferToAddress);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgForceTransfer message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgForceTransfer} message MsgForceTransfer
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgForceTransfer.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.sender = "";
                            object.amount = null;
                            object.transferFromAddress = "";
                            object.transferToAddress = "";
                        }
                        if (message.sender != null && message.hasOwnProperty("sender"))
                            object.sender = message.sender;
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.cosmos.base.v1beta1.Coin.toObject(message.amount, options);
                        if (message.transferFromAddress != null && message.hasOwnProperty("transferFromAddress"))
                            object.transferFromAddress = message.transferFromAddress;
                        if (message.transferToAddress != null && message.hasOwnProperty("transferToAddress"))
                            object.transferToAddress = message.transferToAddress;
                        return object;
                    };
    
                    /**
                     * Converts this MsgForceTransfer to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransfer
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgForceTransfer.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgForceTransfer;
                })();
    
                v1beta1.MsgForceTransferResponse = (function() {
    
                    /**
                     * Properties of a MsgForceTransferResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgForceTransferResponse
                     */
    
                    /**
                     * Constructs a new MsgForceTransferResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgForceTransferResponse.
                     * @implements IMsgForceTransferResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgForceTransferResponse=} [properties] Properties to set
                     */
                    function MsgForceTransferResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified MsgForceTransferResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgForceTransferResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransferResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgForceTransferResponse} message MsgForceTransferResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgForceTransferResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgForceTransferResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgForceTransferResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransferResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgForceTransferResponse} message MsgForceTransferResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgForceTransferResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgForceTransferResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransferResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgForceTransferResponse} MsgForceTransferResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgForceTransferResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgForceTransferResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgForceTransferResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransferResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgForceTransferResponse} MsgForceTransferResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgForceTransferResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgForceTransferResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransferResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgForceTransferResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgForceTransferResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransferResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgForceTransferResponse} MsgForceTransferResponse
                     */
                    MsgForceTransferResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgForceTransferResponse)
                            return object;
                        return new $root.osmosis.tokenfactory.v1beta1.MsgForceTransferResponse();
                    };
    
                    /**
                     * Creates a plain object from a MsgForceTransferResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransferResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgForceTransferResponse} message MsgForceTransferResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgForceTransferResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MsgForceTransferResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgForceTransferResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgForceTransferResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgForceTransferResponse;
                })();
    
                v1beta1.MsgUpdateParams = (function() {
    
                    /**
                     * Properties of a MsgUpdateParams.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgUpdateParams
                     * @property {string|null} [authority] MsgUpdateParams authority
                     * @property {osmosis.tokenfactory.v1beta1.IParams|null} [params] MsgUpdateParams params
                     */
    
                    /**
                     * Constructs a new MsgUpdateParams.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgUpdateParams.
                     * @implements IMsgUpdateParams
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgUpdateParams=} [properties] Properties to set
                     */
                    function MsgUpdateParams(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MsgUpdateParams authority.
                     * @member {string} authority
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @instance
                     */
                    MsgUpdateParams.prototype.authority = "";
    
                    /**
                     * MsgUpdateParams params.
                     * @member {osmosis.tokenfactory.v1beta1.IParams|null|undefined} params
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @instance
                     */
                    MsgUpdateParams.prototype.params = null;
    
                    /**
                     * Encodes the specified MsgUpdateParams message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgUpdateParams.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateParams.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.authority != null && Object.hasOwnProperty.call(message, "authority"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.authority);
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.osmosis.tokenfactory.v1beta1.Params.encode(message.params, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgUpdateParams message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgUpdateParams.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgUpdateParams} message MsgUpdateParams message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateParams.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgUpdateParams message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgUpdateParams} MsgUpdateParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateParams.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgUpdateParams();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.authority = reader.string();
                                break;
                            case 2:
                                message.params = $root.osmosis.tokenfactory.v1beta1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgUpdateParams message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgUpdateParams} MsgUpdateParams
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateParams.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgUpdateParams message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpdateParams.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.authority != null && message.hasOwnProperty("authority"))
                            if (!$util.isString(message.authority))
                                return "authority: string expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            var error = $root.osmosis.tokenfactory.v1beta1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MsgUpdateParams message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgUpdateParams} MsgUpdateParams
                     */
                    MsgUpdateParams.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgUpdateParams)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.MsgUpdateParams();
                        if (object.authority != null)
                            message.authority = String(object.authority);
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".osmosis.tokenfactory.v1beta1.MsgUpdateParams.params: object expected");
                            message.params = $root.osmosis.tokenfactory.v1beta1.Params.fromObject(object.params);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MsgUpdateParams message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgUpdateParams} message MsgUpdateParams
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpdateParams.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.authority = "";
                            object.params = null;
                        }
                        if (message.authority != null && message.hasOwnProperty("authority"))
                            object.authority = message.authority;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.osmosis.tokenfactory.v1beta1.Params.toObject(message.params, options);
                        return object;
                    };
    
                    /**
                     * Converts this MsgUpdateParams to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParams
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpdateParams.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgUpdateParams;
                })();
    
                v1beta1.MsgUpdateParamsResponse = (function() {
    
                    /**
                     * Properties of a MsgUpdateParamsResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IMsgUpdateParamsResponse
                     */
    
                    /**
                     * Constructs a new MsgUpdateParamsResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a MsgUpdateParamsResponse.
                     * @implements IMsgUpdateParamsResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IMsgUpdateParamsResponse=} [properties] Properties to set
                     */
                    function MsgUpdateParamsResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified MsgUpdateParamsResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateParamsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MsgUpdateParamsResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IMsgUpdateParamsResponse} message MsgUpdateParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MsgUpdateParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateParamsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MsgUpdateParamsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MsgUpdateParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MsgUpdateParamsResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MsgUpdateParamsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a MsgUpdateParamsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse} MsgUpdateParamsResponse
                     */
                    MsgUpdateParamsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse)
                            return object;
                        return new $root.osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse();
                    };
    
                    /**
                     * Creates a plain object from a MsgUpdateParamsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse} message MsgUpdateParamsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MsgUpdateParamsResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this MsgUpdateParamsResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.MsgUpdateParamsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MsgUpdateParamsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return MsgUpdateParamsResponse;
                })();
    
                v1beta1.Params = (function() {
    
                    /**
                     * Properties of a Params.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IParams
                     * @property {Array.<cosmos.base.v1beta1.ICoin>|null} [denom_creation_fee] Params denom_creation_fee
                     * @property {Long|null} [denom_creation_gas_consume] Params denom_creation_gas_consume
                     * @property {string|null} [fee_collector_address] Params fee_collector_address
                     */
    
                    /**
                     * Constructs a new Params.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a Params.
                     * @implements IParams
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IParams=} [properties] Properties to set
                     */
                    function Params(properties) {
                        this.denom_creation_fee = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Params denom_creation_fee.
                     * @member {Array.<cosmos.base.v1beta1.ICoin>} denom_creation_fee
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @instance
                     */
                    Params.prototype.denom_creation_fee = $util.emptyArray;
    
                    /**
                     * Params denom_creation_gas_consume.
                     * @member {Long} denom_creation_gas_consume
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @instance
                     */
                    Params.prototype.denom_creation_gas_consume = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Params fee_collector_address.
                     * @member {string} fee_collector_address
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @instance
                     */
                    Params.prototype.fee_collector_address = "";
    
                    /**
                     * Encodes the specified Params message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.Params.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom_creation_fee != null && message.denom_creation_fee.length)
                            for (var i = 0; i < message.denom_creation_fee.length; ++i)
                                $root.cosmos.base.v1beta1.Coin.encode(message.denom_creation_fee[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.denom_creation_gas_consume != null && Object.hasOwnProperty.call(message, "denom_creation_gas_consume"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.denom_creation_gas_consume);
                        if (message.fee_collector_address != null && Object.hasOwnProperty.call(message, "fee_collector_address"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.fee_collector_address);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Params message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.Params.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IParams} message Params message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Params.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Params message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.Params();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.denom_creation_fee && message.denom_creation_fee.length))
                                    message.denom_creation_fee = [];
                                message.denom_creation_fee.push($root.cosmos.base.v1beta1.Coin.decode(reader, reader.uint32()));
                                break;
                            case 2:
                                message.denom_creation_gas_consume = reader.uint64();
                                break;
                            case 3:
                                message.fee_collector_address = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Params message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.Params} Params
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Params.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Params message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Params.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom_creation_fee != null && message.hasOwnProperty("denom_creation_fee")) {
                            if (!Array.isArray(message.denom_creation_fee))
                                return "denom_creation_fee: array expected";
                            for (var i = 0; i < message.denom_creation_fee.length; ++i) {
                                var error = $root.cosmos.base.v1beta1.Coin.verify(message.denom_creation_fee[i]);
                                if (error)
                                    return "denom_creation_fee." + error;
                            }
                        }
                        if (message.denom_creation_gas_consume != null && message.hasOwnProperty("denom_creation_gas_consume"))
                            if (!$util.isInteger(message.denom_creation_gas_consume) && !(message.denom_creation_gas_consume && $util.isInteger(message.denom_creation_gas_consume.low) && $util.isInteger(message.denom_creation_gas_consume.high)))
                                return "denom_creation_gas_consume: integer|Long expected";
                        if (message.fee_collector_address != null && message.hasOwnProperty("fee_collector_address"))
                            if (!$util.isString(message.fee_collector_address))
                                return "fee_collector_address: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Params message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.Params} Params
                     */
                    Params.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.Params)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.Params();
                        if (object.denom_creation_fee) {
                            if (!Array.isArray(object.denom_creation_fee))
                                throw TypeError(".osmosis.tokenfactory.v1beta1.Params.denom_creation_fee: array expected");
                            message.denom_creation_fee = [];
                            for (var i = 0; i < object.denom_creation_fee.length; ++i) {
                                if (typeof object.denom_creation_fee[i] !== "object")
                                    throw TypeError(".osmosis.tokenfactory.v1beta1.Params.denom_creation_fee: object expected");
                                message.denom_creation_fee[i] = $root.cosmos.base.v1beta1.Coin.fromObject(object.denom_creation_fee[i]);
                            }
                        }
                        if (object.denom_creation_gas_consume != null)
                            if ($util.Long)
                                (message.denom_creation_gas_consume = $util.Long.fromValue(object.denom_creation_gas_consume)).unsigned = true;
                            else if (typeof object.denom_creation_gas_consume === "string")
                                message.denom_creation_gas_consume = parseInt(object.denom_creation_gas_consume, 10);
                            else if (typeof object.denom_creation_gas_consume === "number")
                                message.denom_creation_gas_consume = object.denom_creation_gas_consume;
                            else if (typeof object.denom_creation_gas_consume === "object")
                                message.denom_creation_gas_consume = new $util.LongBits(object.denom_creation_gas_consume.low >>> 0, object.denom_creation_gas_consume.high >>> 0).toNumber(true);
                        if (object.fee_collector_address != null)
                            message.fee_collector_address = String(object.fee_collector_address);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Params message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.Params} message Params
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Params.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.denom_creation_fee = [];
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.denom_creation_gas_consume = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.denom_creation_gas_consume = options.longs === String ? "0" : 0;
                            object.fee_collector_address = "";
                        }
                        if (message.denom_creation_fee && message.denom_creation_fee.length) {
                            object.denom_creation_fee = [];
                            for (var j = 0; j < message.denom_creation_fee.length; ++j)
                                object.denom_creation_fee[j] = $root.cosmos.base.v1beta1.Coin.toObject(message.denom_creation_fee[j], options);
                        }
                        if (message.denom_creation_gas_consume != null && message.hasOwnProperty("denom_creation_gas_consume"))
                            if (typeof message.denom_creation_gas_consume === "number")
                                object.denom_creation_gas_consume = options.longs === String ? String(message.denom_creation_gas_consume) : message.denom_creation_gas_consume;
                            else
                                object.denom_creation_gas_consume = options.longs === String ? $util.Long.prototype.toString.call(message.denom_creation_gas_consume) : options.longs === Number ? new $util.LongBits(message.denom_creation_gas_consume.low >>> 0, message.denom_creation_gas_consume.high >>> 0).toNumber(true) : message.denom_creation_gas_consume;
                        if (message.fee_collector_address != null && message.hasOwnProperty("fee_collector_address"))
                            object.fee_collector_address = message.fee_collector_address;
                        return object;
                    };
    
                    /**
                     * Converts this Params to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.Params
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Params.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return Params;
                })();
    
                v1beta1.Query = (function() {
    
                    /**
                     * Constructs a new Query service.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a Query
                     * @extends $protobuf.rpc.Service
                     * @constructor
                     * @param {$protobuf.RPCImpl} rpcImpl RPC implementation
                     * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
                     * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
                     */
                    function Query(rpcImpl, requestDelimited, responseDelimited) {
                        $protobuf.rpc.Service.call(this, rpcImpl, requestDelimited, responseDelimited);
                    }
    
                    (Query.prototype = Object.create($protobuf.rpc.Service.prototype)).constructor = Query;
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Query#params}.
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @typedef ParamsCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.QueryParamsResponse} [response] QueryParamsResponse
                     */
    
                    /**
                     * Calls Params.
                     * @function params
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Query.ParamsCallback} callback Node-style callback called with the error, if any, and QueryParamsResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.params = function params(request, callback) {
                        return this.rpcCall(params, $root.osmosis.tokenfactory.v1beta1.QueryParamsRequest, $root.osmosis.tokenfactory.v1beta1.QueryParamsResponse, request, callback);
                    }, "name", { value: "Params" });
    
                    /**
                     * Calls Params.
                     * @function params
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IQueryParamsRequest} request QueryParamsRequest message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.QueryParamsResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Query#denomAuthorityMetadata}.
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @typedef DenomAuthorityMetadataCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse} [response] QueryDenomAuthorityMetadataResponse
                     */
    
                    /**
                     * Calls DenomAuthorityMetadata.
                     * @function denomAuthorityMetadata
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomAuthorityMetadataRequest} request QueryDenomAuthorityMetadataRequest message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Query.DenomAuthorityMetadataCallback} callback Node-style callback called with the error, if any, and QueryDenomAuthorityMetadataResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.denomAuthorityMetadata = function denomAuthorityMetadata(request, callback) {
                        return this.rpcCall(denomAuthorityMetadata, $root.osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest, $root.osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse, request, callback);
                    }, "name", { value: "DenomAuthorityMetadata" });
    
                    /**
                     * Calls DenomAuthorityMetadata.
                     * @function denomAuthorityMetadata
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomAuthorityMetadataRequest} request QueryDenomAuthorityMetadataRequest message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Query#denomsFromCreator}.
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @typedef DenomsFromCreatorCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse} [response] QueryDenomsFromCreatorResponse
                     */
    
                    /**
                     * Calls DenomsFromCreator.
                     * @function denomsFromCreator
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomsFromCreatorRequest} request QueryDenomsFromCreatorRequest message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Query.DenomsFromCreatorCallback} callback Node-style callback called with the error, if any, and QueryDenomsFromCreatorResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.denomsFromCreator = function denomsFromCreator(request, callback) {
                        return this.rpcCall(denomsFromCreator, $root.osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest, $root.osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse, request, callback);
                    }, "name", { value: "DenomsFromCreator" });
    
                    /**
                     * Calls DenomsFromCreator.
                     * @function denomsFromCreator
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomsFromCreatorRequest} request QueryDenomsFromCreatorRequest message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse>} Promise
                     * @variation 2
                     */
    
                    /**
                     * Callback as used by {@link osmosis.tokenfactory.v1beta1.Query#beforeSendHookAddress}.
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @typedef BeforeSendHookAddressCallback
                     * @type {function}
                     * @param {Error|null} error Error, if any
                     * @param {osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse} [response] QueryBeforeSendHookAddressResponse
                     */
    
                    /**
                     * Calls BeforeSendHookAddress.
                     * @function beforeSendHookAddress
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IQueryBeforeSendHookAddressRequest} request QueryBeforeSendHookAddressRequest message or plain object
                     * @param {osmosis.tokenfactory.v1beta1.Query.BeforeSendHookAddressCallback} callback Node-style callback called with the error, if any, and QueryBeforeSendHookAddressResponse
                     * @returns {undefined}
                     * @variation 1
                     */
                    Object.defineProperty(Query.prototype.beforeSendHookAddress = function beforeSendHookAddress(request, callback) {
                        return this.rpcCall(beforeSendHookAddress, $root.osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest, $root.osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse, request, callback);
                    }, "name", { value: "BeforeSendHookAddress" });
    
                    /**
                     * Calls BeforeSendHookAddress.
                     * @function beforeSendHookAddress
                     * @memberof osmosis.tokenfactory.v1beta1.Query
                     * @instance
                     * @param {osmosis.tokenfactory.v1beta1.IQueryBeforeSendHookAddressRequest} request QueryBeforeSendHookAddressRequest message or plain object
                     * @returns {Promise<osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse>} Promise
                     * @variation 2
                     */
    
                    return Query;
                })();
    
                v1beta1.QueryParamsRequest = (function() {
    
                    /**
                     * Properties of a QueryParamsRequest.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IQueryParamsRequest
                     */
    
                    /**
                     * Constructs a new QueryParamsRequest.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a QueryParamsRequest.
                     * @implements IQueryParamsRequest
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IQueryParamsRequest=} [properties] Properties to set
                     */
                    function QueryParamsRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Encodes the specified QueryParamsRequest message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryParamsRequest.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QueryParamsRequest message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryParamsRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryParamsRequest} message QueryParamsRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QueryParamsRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.QueryParamsRequest} QueryParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.QueryParamsRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QueryParamsRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.QueryParamsRequest} QueryParamsRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QueryParamsRequest message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryParamsRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a QueryParamsRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.QueryParamsRequest} QueryParamsRequest
                     */
                    QueryParamsRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.QueryParamsRequest)
                            return object;
                        return new $root.osmosis.tokenfactory.v1beta1.QueryParamsRequest();
                    };
    
                    /**
                     * Creates a plain object from a QueryParamsRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.QueryParamsRequest} message QueryParamsRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryParamsRequest.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this QueryParamsRequest to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryParamsRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return QueryParamsRequest;
                })();
    
                v1beta1.QueryParamsResponse = (function() {
    
                    /**
                     * Properties of a QueryParamsResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IQueryParamsResponse
                     * @property {osmosis.tokenfactory.v1beta1.IParams|null} [params] QueryParamsResponse params
                     */
    
                    /**
                     * Constructs a new QueryParamsResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a QueryParamsResponse.
                     * @implements IQueryParamsResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IQueryParamsResponse=} [properties] Properties to set
                     */
                    function QueryParamsResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * QueryParamsResponse params.
                     * @member {osmosis.tokenfactory.v1beta1.IParams|null|undefined} params
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsResponse
                     * @instance
                     */
                    QueryParamsResponse.prototype.params = null;
    
                    /**
                     * Encodes the specified QueryParamsResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryParamsResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.osmosis.tokenfactory.v1beta1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QueryParamsResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryParamsResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryParamsResponse} message QueryParamsResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryParamsResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QueryParamsResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.QueryParamsResponse} QueryParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.QueryParamsResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.params = $root.osmosis.tokenfactory.v1beta1.Params.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QueryParamsResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.QueryParamsResponse} QueryParamsResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryParamsResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QueryParamsResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryParamsResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            var error = $root.osmosis.tokenfactory.v1beta1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a QueryParamsResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.QueryParamsResponse} QueryParamsResponse
                     */
                    QueryParamsResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.QueryParamsResponse)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.QueryParamsResponse();
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".osmosis.tokenfactory.v1beta1.QueryParamsResponse.params: object expected");
                            message.params = $root.osmosis.tokenfactory.v1beta1.Params.fromObject(object.params);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a QueryParamsResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.QueryParamsResponse} message QueryParamsResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryParamsResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.params = null;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.osmosis.tokenfactory.v1beta1.Params.toObject(message.params, options);
                        return object;
                    };
    
                    /**
                     * Converts this QueryParamsResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.QueryParamsResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryParamsResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return QueryParamsResponse;
                })();
    
                v1beta1.QueryDenomAuthorityMetadataRequest = (function() {
    
                    /**
                     * Properties of a QueryDenomAuthorityMetadataRequest.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IQueryDenomAuthorityMetadataRequest
                     * @property {string|null} [creator] QueryDenomAuthorityMetadataRequest creator
                     * @property {string|null} [subdenom] QueryDenomAuthorityMetadataRequest subdenom
                     */
    
                    /**
                     * Constructs a new QueryDenomAuthorityMetadataRequest.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a QueryDenomAuthorityMetadataRequest.
                     * @implements IQueryDenomAuthorityMetadataRequest
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomAuthorityMetadataRequest=} [properties] Properties to set
                     */
                    function QueryDenomAuthorityMetadataRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * QueryDenomAuthorityMetadataRequest creator.
                     * @member {string} creator
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @instance
                     */
                    QueryDenomAuthorityMetadataRequest.prototype.creator = "";
    
                    /**
                     * QueryDenomAuthorityMetadataRequest subdenom.
                     * @member {string} subdenom
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @instance
                     */
                    QueryDenomAuthorityMetadataRequest.prototype.subdenom = "";
    
                    /**
                     * Encodes the specified QueryDenomAuthorityMetadataRequest message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomAuthorityMetadataRequest} message QueryDenomAuthorityMetadataRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomAuthorityMetadataRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.creator != null && Object.hasOwnProperty.call(message, "creator"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.creator);
                        if (message.subdenom != null && Object.hasOwnProperty.call(message, "subdenom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.subdenom);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QueryDenomAuthorityMetadataRequest message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomAuthorityMetadataRequest} message QueryDenomAuthorityMetadataRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomAuthorityMetadataRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QueryDenomAuthorityMetadataRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest} QueryDenomAuthorityMetadataRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomAuthorityMetadataRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.creator = reader.string();
                                break;
                            case 2:
                                message.subdenom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QueryDenomAuthorityMetadataRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest} QueryDenomAuthorityMetadataRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomAuthorityMetadataRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QueryDenomAuthorityMetadataRequest message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomAuthorityMetadataRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.creator != null && message.hasOwnProperty("creator"))
                            if (!$util.isString(message.creator))
                                return "creator: string expected";
                        if (message.subdenom != null && message.hasOwnProperty("subdenom"))
                            if (!$util.isString(message.subdenom))
                                return "subdenom: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a QueryDenomAuthorityMetadataRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest} QueryDenomAuthorityMetadataRequest
                     */
                    QueryDenomAuthorityMetadataRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest();
                        if (object.creator != null)
                            message.creator = String(object.creator);
                        if (object.subdenom != null)
                            message.subdenom = String(object.subdenom);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a QueryDenomAuthorityMetadataRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest} message QueryDenomAuthorityMetadataRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomAuthorityMetadataRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.creator = "";
                            object.subdenom = "";
                        }
                        if (message.creator != null && message.hasOwnProperty("creator"))
                            object.creator = message.creator;
                        if (message.subdenom != null && message.hasOwnProperty("subdenom"))
                            object.subdenom = message.subdenom;
                        return object;
                    };
    
                    /**
                     * Converts this QueryDenomAuthorityMetadataRequest to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomAuthorityMetadataRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return QueryDenomAuthorityMetadataRequest;
                })();
    
                v1beta1.QueryDenomAuthorityMetadataResponse = (function() {
    
                    /**
                     * Properties of a QueryDenomAuthorityMetadataResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IQueryDenomAuthorityMetadataResponse
                     * @property {osmosis.tokenfactory.v1beta1.IDenomAuthorityMetadata|null} [authority_metadata] QueryDenomAuthorityMetadataResponse authority_metadata
                     */
    
                    /**
                     * Constructs a new QueryDenomAuthorityMetadataResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a QueryDenomAuthorityMetadataResponse.
                     * @implements IQueryDenomAuthorityMetadataResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomAuthorityMetadataResponse=} [properties] Properties to set
                     */
                    function QueryDenomAuthorityMetadataResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * QueryDenomAuthorityMetadataResponse authority_metadata.
                     * @member {osmosis.tokenfactory.v1beta1.IDenomAuthorityMetadata|null|undefined} authority_metadata
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
                     * @instance
                     */
                    QueryDenomAuthorityMetadataResponse.prototype.authority_metadata = null;
    
                    /**
                     * Encodes the specified QueryDenomAuthorityMetadataResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomAuthorityMetadataResponse} message QueryDenomAuthorityMetadataResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomAuthorityMetadataResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.authority_metadata != null && Object.hasOwnProperty.call(message, "authority_metadata"))
                            $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.encode(message.authority_metadata, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QueryDenomAuthorityMetadataResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomAuthorityMetadataResponse} message QueryDenomAuthorityMetadataResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomAuthorityMetadataResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QueryDenomAuthorityMetadataResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse} QueryDenomAuthorityMetadataResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomAuthorityMetadataResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.authority_metadata = $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QueryDenomAuthorityMetadataResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse} QueryDenomAuthorityMetadataResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomAuthorityMetadataResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QueryDenomAuthorityMetadataResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomAuthorityMetadataResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.authority_metadata != null && message.hasOwnProperty("authority_metadata")) {
                            var error = $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.verify(message.authority_metadata);
                            if (error)
                                return "authority_metadata." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a QueryDenomAuthorityMetadataResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse} QueryDenomAuthorityMetadataResponse
                     */
                    QueryDenomAuthorityMetadataResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse();
                        if (object.authority_metadata != null) {
                            if (typeof object.authority_metadata !== "object")
                                throw TypeError(".osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse.authority_metadata: object expected");
                            message.authority_metadata = $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.fromObject(object.authority_metadata);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a QueryDenomAuthorityMetadataResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse} message QueryDenomAuthorityMetadataResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomAuthorityMetadataResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.authority_metadata = null;
                        if (message.authority_metadata != null && message.hasOwnProperty("authority_metadata"))
                            object.authority_metadata = $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.toObject(message.authority_metadata, options);
                        return object;
                    };
    
                    /**
                     * Converts this QueryDenomAuthorityMetadataResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomAuthorityMetadataResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return QueryDenomAuthorityMetadataResponse;
                })();
    
                v1beta1.QueryDenomsFromCreatorRequest = (function() {
    
                    /**
                     * Properties of a QueryDenomsFromCreatorRequest.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IQueryDenomsFromCreatorRequest
                     * @property {string|null} [creator] QueryDenomsFromCreatorRequest creator
                     */
    
                    /**
                     * Constructs a new QueryDenomsFromCreatorRequest.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a QueryDenomsFromCreatorRequest.
                     * @implements IQueryDenomsFromCreatorRequest
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomsFromCreatorRequest=} [properties] Properties to set
                     */
                    function QueryDenomsFromCreatorRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * QueryDenomsFromCreatorRequest creator.
                     * @member {string} creator
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
                     * @instance
                     */
                    QueryDenomsFromCreatorRequest.prototype.creator = "";
    
                    /**
                     * Encodes the specified QueryDenomsFromCreatorRequest message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomsFromCreatorRequest} message QueryDenomsFromCreatorRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomsFromCreatorRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.creator != null && Object.hasOwnProperty.call(message, "creator"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.creator);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QueryDenomsFromCreatorRequest message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomsFromCreatorRequest} message QueryDenomsFromCreatorRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomsFromCreatorRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QueryDenomsFromCreatorRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest} QueryDenomsFromCreatorRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomsFromCreatorRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.creator = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QueryDenomsFromCreatorRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest} QueryDenomsFromCreatorRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomsFromCreatorRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QueryDenomsFromCreatorRequest message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomsFromCreatorRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.creator != null && message.hasOwnProperty("creator"))
                            if (!$util.isString(message.creator))
                                return "creator: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a QueryDenomsFromCreatorRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest} QueryDenomsFromCreatorRequest
                     */
                    QueryDenomsFromCreatorRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest();
                        if (object.creator != null)
                            message.creator = String(object.creator);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a QueryDenomsFromCreatorRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest} message QueryDenomsFromCreatorRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomsFromCreatorRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.creator = "";
                        if (message.creator != null && message.hasOwnProperty("creator"))
                            object.creator = message.creator;
                        return object;
                    };
    
                    /**
                     * Converts this QueryDenomsFromCreatorRequest to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomsFromCreatorRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return QueryDenomsFromCreatorRequest;
                })();
    
                v1beta1.QueryDenomsFromCreatorResponse = (function() {
    
                    /**
                     * Properties of a QueryDenomsFromCreatorResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IQueryDenomsFromCreatorResponse
                     * @property {Array.<string>|null} [denoms] QueryDenomsFromCreatorResponse denoms
                     */
    
                    /**
                     * Constructs a new QueryDenomsFromCreatorResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a QueryDenomsFromCreatorResponse.
                     * @implements IQueryDenomsFromCreatorResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomsFromCreatorResponse=} [properties] Properties to set
                     */
                    function QueryDenomsFromCreatorResponse(properties) {
                        this.denoms = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * QueryDenomsFromCreatorResponse denoms.
                     * @member {Array.<string>} denoms
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
                     * @instance
                     */
                    QueryDenomsFromCreatorResponse.prototype.denoms = $util.emptyArray;
    
                    /**
                     * Encodes the specified QueryDenomsFromCreatorResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomsFromCreatorResponse} message QueryDenomsFromCreatorResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomsFromCreatorResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denoms != null && message.denoms.length)
                            for (var i = 0; i < message.denoms.length; ++i)
                                writer.uint32(/* id 1, wireType 2 =*/10).string(message.denoms[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QueryDenomsFromCreatorResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryDenomsFromCreatorResponse} message QueryDenomsFromCreatorResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryDenomsFromCreatorResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QueryDenomsFromCreatorResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse} QueryDenomsFromCreatorResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomsFromCreatorResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                if (!(message.denoms && message.denoms.length))
                                    message.denoms = [];
                                message.denoms.push(reader.string());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QueryDenomsFromCreatorResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse} QueryDenomsFromCreatorResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryDenomsFromCreatorResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QueryDenomsFromCreatorResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryDenomsFromCreatorResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denoms != null && message.hasOwnProperty("denoms")) {
                            if (!Array.isArray(message.denoms))
                                return "denoms: array expected";
                            for (var i = 0; i < message.denoms.length; ++i)
                                if (!$util.isString(message.denoms[i]))
                                    return "denoms: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a QueryDenomsFromCreatorResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse} QueryDenomsFromCreatorResponse
                     */
                    QueryDenomsFromCreatorResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse();
                        if (object.denoms) {
                            if (!Array.isArray(object.denoms))
                                throw TypeError(".osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse.denoms: array expected");
                            message.denoms = [];
                            for (var i = 0; i < object.denoms.length; ++i)
                                message.denoms[i] = String(object.denoms[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a QueryDenomsFromCreatorResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse} message QueryDenomsFromCreatorResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryDenomsFromCreatorResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.denoms = [];
                        if (message.denoms && message.denoms.length) {
                            object.denoms = [];
                            for (var j = 0; j < message.denoms.length; ++j)
                                object.denoms[j] = message.denoms[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this QueryDenomsFromCreatorResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryDenomsFromCreatorResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return QueryDenomsFromCreatorResponse;
                })();
    
                v1beta1.QueryBeforeSendHookAddressRequest = (function() {
    
                    /**
                     * Properties of a QueryBeforeSendHookAddressRequest.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IQueryBeforeSendHookAddressRequest
                     * @property {string|null} [creator] QueryBeforeSendHookAddressRequest creator
                     * @property {string|null} [subdenom] QueryBeforeSendHookAddressRequest subdenom
                     */
    
                    /**
                     * Constructs a new QueryBeforeSendHookAddressRequest.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a QueryBeforeSendHookAddressRequest.
                     * @implements IQueryBeforeSendHookAddressRequest
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IQueryBeforeSendHookAddressRequest=} [properties] Properties to set
                     */
                    function QueryBeforeSendHookAddressRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * QueryBeforeSendHookAddressRequest creator.
                     * @member {string} creator
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @instance
                     */
                    QueryBeforeSendHookAddressRequest.prototype.creator = "";
    
                    /**
                     * QueryBeforeSendHookAddressRequest subdenom.
                     * @member {string} subdenom
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @instance
                     */
                    QueryBeforeSendHookAddressRequest.prototype.subdenom = "";
    
                    /**
                     * Encodes the specified QueryBeforeSendHookAddressRequest message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryBeforeSendHookAddressRequest} message QueryBeforeSendHookAddressRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBeforeSendHookAddressRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.creator != null && Object.hasOwnProperty.call(message, "creator"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.creator);
                        if (message.subdenom != null && Object.hasOwnProperty.call(message, "subdenom"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.subdenom);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QueryBeforeSendHookAddressRequest message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryBeforeSendHookAddressRequest} message QueryBeforeSendHookAddressRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBeforeSendHookAddressRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QueryBeforeSendHookAddressRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest} QueryBeforeSendHookAddressRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBeforeSendHookAddressRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.creator = reader.string();
                                break;
                            case 2:
                                message.subdenom = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QueryBeforeSendHookAddressRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest} QueryBeforeSendHookAddressRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBeforeSendHookAddressRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QueryBeforeSendHookAddressRequest message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryBeforeSendHookAddressRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.creator != null && message.hasOwnProperty("creator"))
                            if (!$util.isString(message.creator))
                                return "creator: string expected";
                        if (message.subdenom != null && message.hasOwnProperty("subdenom"))
                            if (!$util.isString(message.subdenom))
                                return "subdenom: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a QueryBeforeSendHookAddressRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest} QueryBeforeSendHookAddressRequest
                     */
                    QueryBeforeSendHookAddressRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest();
                        if (object.creator != null)
                            message.creator = String(object.creator);
                        if (object.subdenom != null)
                            message.subdenom = String(object.subdenom);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a QueryBeforeSendHookAddressRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest} message QueryBeforeSendHookAddressRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryBeforeSendHookAddressRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.creator = "";
                            object.subdenom = "";
                        }
                        if (message.creator != null && message.hasOwnProperty("creator"))
                            object.creator = message.creator;
                        if (message.subdenom != null && message.hasOwnProperty("subdenom"))
                            object.subdenom = message.subdenom;
                        return object;
                    };
    
                    /**
                     * Converts this QueryBeforeSendHookAddressRequest to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryBeforeSendHookAddressRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return QueryBeforeSendHookAddressRequest;
                })();
    
                v1beta1.QueryBeforeSendHookAddressResponse = (function() {
    
                    /**
                     * Properties of a QueryBeforeSendHookAddressResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IQueryBeforeSendHookAddressResponse
                     * @property {string|null} [contract_addr] QueryBeforeSendHookAddressResponse contract_addr
                     */
    
                    /**
                     * Constructs a new QueryBeforeSendHookAddressResponse.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a QueryBeforeSendHookAddressResponse.
                     * @implements IQueryBeforeSendHookAddressResponse
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IQueryBeforeSendHookAddressResponse=} [properties] Properties to set
                     */
                    function QueryBeforeSendHookAddressResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * QueryBeforeSendHookAddressResponse contract_addr.
                     * @member {string} contract_addr
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
                     * @instance
                     */
                    QueryBeforeSendHookAddressResponse.prototype.contract_addr = "";
    
                    /**
                     * Encodes the specified QueryBeforeSendHookAddressResponse message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryBeforeSendHookAddressResponse} message QueryBeforeSendHookAddressResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBeforeSendHookAddressResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.contract_addr != null && Object.hasOwnProperty.call(message, "contract_addr"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.contract_addr);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified QueryBeforeSendHookAddressResponse message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IQueryBeforeSendHookAddressResponse} message QueryBeforeSendHookAddressResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    QueryBeforeSendHookAddressResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a QueryBeforeSendHookAddressResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse} QueryBeforeSendHookAddressResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBeforeSendHookAddressResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.contract_addr = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a QueryBeforeSendHookAddressResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse} QueryBeforeSendHookAddressResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    QueryBeforeSendHookAddressResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a QueryBeforeSendHookAddressResponse message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    QueryBeforeSendHookAddressResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.contract_addr != null && message.hasOwnProperty("contract_addr"))
                            if (!$util.isString(message.contract_addr))
                                return "contract_addr: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a QueryBeforeSendHookAddressResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse} QueryBeforeSendHookAddressResponse
                     */
                    QueryBeforeSendHookAddressResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse();
                        if (object.contract_addr != null)
                            message.contract_addr = String(object.contract_addr);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a QueryBeforeSendHookAddressResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse} message QueryBeforeSendHookAddressResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    QueryBeforeSendHookAddressResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.contract_addr = "";
                        if (message.contract_addr != null && message.hasOwnProperty("contract_addr"))
                            object.contract_addr = message.contract_addr;
                        return object;
                    };
    
                    /**
                     * Converts this QueryBeforeSendHookAddressResponse to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    QueryBeforeSendHookAddressResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return QueryBeforeSendHookAddressResponse;
                })();
    
                v1beta1.DenomAuthorityMetadata = (function() {
    
                    /**
                     * Properties of a DenomAuthorityMetadata.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IDenomAuthorityMetadata
                     * @property {string|null} [Admin] DenomAuthorityMetadata Admin
                     */
    
                    /**
                     * Constructs a new DenomAuthorityMetadata.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a DenomAuthorityMetadata.
                     * @implements IDenomAuthorityMetadata
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IDenomAuthorityMetadata=} [properties] Properties to set
                     */
                    function DenomAuthorityMetadata(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * DenomAuthorityMetadata Admin.
                     * @member {string} Admin
                     * @memberof osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
                     * @instance
                     */
                    DenomAuthorityMetadata.prototype.Admin = "";
    
                    /**
                     * Encodes the specified DenomAuthorityMetadata message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IDenomAuthorityMetadata} message DenomAuthorityMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenomAuthorityMetadata.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.Admin != null && Object.hasOwnProperty.call(message, "Admin"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.Admin);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified DenomAuthorityMetadata message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IDenomAuthorityMetadata} message DenomAuthorityMetadata message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    DenomAuthorityMetadata.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a DenomAuthorityMetadata message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata} DenomAuthorityMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenomAuthorityMetadata.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.Admin = reader.string();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a DenomAuthorityMetadata message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata} DenomAuthorityMetadata
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    DenomAuthorityMetadata.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a DenomAuthorityMetadata message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    DenomAuthorityMetadata.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.Admin != null && message.hasOwnProperty("Admin"))
                            if (!$util.isString(message.Admin))
                                return "Admin: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a DenomAuthorityMetadata message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata} DenomAuthorityMetadata
                     */
                    DenomAuthorityMetadata.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata();
                        if (object.Admin != null)
                            message.Admin = String(object.Admin);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a DenomAuthorityMetadata message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata} message DenomAuthorityMetadata
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    DenomAuthorityMetadata.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.Admin = "";
                        if (message.Admin != null && message.hasOwnProperty("Admin"))
                            object.Admin = message.Admin;
                        return object;
                    };
    
                    /**
                     * Converts this DenomAuthorityMetadata to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    DenomAuthorityMetadata.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return DenomAuthorityMetadata;
                })();
    
                v1beta1.GenesisState = (function() {
    
                    /**
                     * Properties of a GenesisState.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IGenesisState
                     * @property {osmosis.tokenfactory.v1beta1.IParams|null} [params] GenesisState params
                     * @property {Array.<osmosis.tokenfactory.v1beta1.IGenesisDenom>|null} [factory_denoms] GenesisState factory_denoms
                     */
    
                    /**
                     * Constructs a new GenesisState.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a GenesisState.
                     * @implements IGenesisState
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IGenesisState=} [properties] Properties to set
                     */
                    function GenesisState(properties) {
                        this.factory_denoms = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GenesisState params.
                     * @member {osmosis.tokenfactory.v1beta1.IParams|null|undefined} params
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.params = null;
    
                    /**
                     * GenesisState factory_denoms.
                     * @member {Array.<osmosis.tokenfactory.v1beta1.IGenesisDenom>} factory_denoms
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @instance
                     */
                    GenesisState.prototype.factory_denoms = $util.emptyArray;
    
                    /**
                     * Encodes the specified GenesisState message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.GenesisState.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.params != null && Object.hasOwnProperty.call(message, "params"))
                            $root.osmosis.tokenfactory.v1beta1.Params.encode(message.params, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.factory_denoms != null && message.factory_denoms.length)
                            for (var i = 0; i < message.factory_denoms.length; ++i)
                                $root.osmosis.tokenfactory.v1beta1.GenesisDenom.encode(message.factory_denoms[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GenesisState message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.GenesisState.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IGenesisState} message GenesisState message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisState.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GenesisState message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.GenesisState();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.params = $root.osmosis.tokenfactory.v1beta1.Params.decode(reader, reader.uint32());
                                break;
                            case 2:
                                if (!(message.factory_denoms && message.factory_denoms.length))
                                    message.factory_denoms = [];
                                message.factory_denoms.push($root.osmosis.tokenfactory.v1beta1.GenesisDenom.decode(reader, reader.uint32()));
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GenesisState message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.GenesisState} GenesisState
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisState.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GenesisState message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisState.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.params != null && message.hasOwnProperty("params")) {
                            var error = $root.osmosis.tokenfactory.v1beta1.Params.verify(message.params);
                            if (error)
                                return "params." + error;
                        }
                        if (message.factory_denoms != null && message.hasOwnProperty("factory_denoms")) {
                            if (!Array.isArray(message.factory_denoms))
                                return "factory_denoms: array expected";
                            for (var i = 0; i < message.factory_denoms.length; ++i) {
                                var error = $root.osmosis.tokenfactory.v1beta1.GenesisDenom.verify(message.factory_denoms[i]);
                                if (error)
                                    return "factory_denoms." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GenesisState message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.GenesisState} GenesisState
                     */
                    GenesisState.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.GenesisState)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.GenesisState();
                        if (object.params != null) {
                            if (typeof object.params !== "object")
                                throw TypeError(".osmosis.tokenfactory.v1beta1.GenesisState.params: object expected");
                            message.params = $root.osmosis.tokenfactory.v1beta1.Params.fromObject(object.params);
                        }
                        if (object.factory_denoms) {
                            if (!Array.isArray(object.factory_denoms))
                                throw TypeError(".osmosis.tokenfactory.v1beta1.GenesisState.factory_denoms: array expected");
                            message.factory_denoms = [];
                            for (var i = 0; i < object.factory_denoms.length; ++i) {
                                if (typeof object.factory_denoms[i] !== "object")
                                    throw TypeError(".osmosis.tokenfactory.v1beta1.GenesisState.factory_denoms: object expected");
                                message.factory_denoms[i] = $root.osmosis.tokenfactory.v1beta1.GenesisDenom.fromObject(object.factory_denoms[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GenesisState message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.GenesisState} message GenesisState
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisState.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.factory_denoms = [];
                        if (options.defaults)
                            object.params = null;
                        if (message.params != null && message.hasOwnProperty("params"))
                            object.params = $root.osmosis.tokenfactory.v1beta1.Params.toObject(message.params, options);
                        if (message.factory_denoms && message.factory_denoms.length) {
                            object.factory_denoms = [];
                            for (var j = 0; j < message.factory_denoms.length; ++j)
                                object.factory_denoms[j] = $root.osmosis.tokenfactory.v1beta1.GenesisDenom.toObject(message.factory_denoms[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this GenesisState to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisState
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisState.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GenesisState;
                })();
    
                v1beta1.GenesisDenom = (function() {
    
                    /**
                     * Properties of a GenesisDenom.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @interface IGenesisDenom
                     * @property {string|null} [denom] GenesisDenom denom
                     * @property {osmosis.tokenfactory.v1beta1.IDenomAuthorityMetadata|null} [authority_metadata] GenesisDenom authority_metadata
                     */
    
                    /**
                     * Constructs a new GenesisDenom.
                     * @memberof osmosis.tokenfactory.v1beta1
                     * @classdesc Represents a GenesisDenom.
                     * @implements IGenesisDenom
                     * @constructor
                     * @param {osmosis.tokenfactory.v1beta1.IGenesisDenom=} [properties] Properties to set
                     */
                    function GenesisDenom(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GenesisDenom denom.
                     * @member {string} denom
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @instance
                     */
                    GenesisDenom.prototype.denom = "";
    
                    /**
                     * GenesisDenom authority_metadata.
                     * @member {osmosis.tokenfactory.v1beta1.IDenomAuthorityMetadata|null|undefined} authority_metadata
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @instance
                     */
                    GenesisDenom.prototype.authority_metadata = null;
    
                    /**
                     * Encodes the specified GenesisDenom message. Does not implicitly {@link osmosis.tokenfactory.v1beta1.GenesisDenom.verify|verify} messages.
                     * @function encode
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IGenesisDenom} message GenesisDenom message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisDenom.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.denom != null && Object.hasOwnProperty.call(message, "denom"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.denom);
                        if (message.authority_metadata != null && Object.hasOwnProperty.call(message, "authority_metadata"))
                            $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.encode(message.authority_metadata, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GenesisDenom message, length delimited. Does not implicitly {@link osmosis.tokenfactory.v1beta1.GenesisDenom.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.IGenesisDenom} message GenesisDenom message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GenesisDenom.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GenesisDenom message from the specified reader or buffer.
                     * @function decode
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {osmosis.tokenfactory.v1beta1.GenesisDenom} GenesisDenom
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisDenom.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.osmosis.tokenfactory.v1beta1.GenesisDenom();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1:
                                message.denom = reader.string();
                                break;
                            case 2:
                                message.authority_metadata = $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.decode(reader, reader.uint32());
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GenesisDenom message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {osmosis.tokenfactory.v1beta1.GenesisDenom} GenesisDenom
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GenesisDenom.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GenesisDenom message.
                     * @function verify
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GenesisDenom.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            if (!$util.isString(message.denom))
                                return "denom: string expected";
                        if (message.authority_metadata != null && message.hasOwnProperty("authority_metadata")) {
                            var error = $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.verify(message.authority_metadata);
                            if (error)
                                return "authority_metadata." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GenesisDenom message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {osmosis.tokenfactory.v1beta1.GenesisDenom} GenesisDenom
                     */
                    GenesisDenom.fromObject = function fromObject(object) {
                        if (object instanceof $root.osmosis.tokenfactory.v1beta1.GenesisDenom)
                            return object;
                        var message = new $root.osmosis.tokenfactory.v1beta1.GenesisDenom();
                        if (object.denom != null)
                            message.denom = String(object.denom);
                        if (object.authority_metadata != null) {
                            if (typeof object.authority_metadata !== "object")
                                throw TypeError(".osmosis.tokenfactory.v1beta1.GenesisDenom.authority_metadata: object expected");
                            message.authority_metadata = $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.fromObject(object.authority_metadata);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GenesisDenom message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @static
                     * @param {osmosis.tokenfactory.v1beta1.GenesisDenom} message GenesisDenom
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GenesisDenom.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.denom = "";
                            object.authority_metadata = null;
                        }
                        if (message.denom != null && message.hasOwnProperty("denom"))
                            object.denom = message.denom;
                        if (message.authority_metadata != null && message.hasOwnProperty("authority_metadata"))
                            object.authority_metadata = $root.osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata.toObject(message.authority_metadata, options);
                        return object;
                    };
    
                    /**
                     * Converts this GenesisDenom to JSON.
                     * @function toJSON
                     * @memberof osmosis.tokenfactory.v1beta1.GenesisDenom
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GenesisDenom.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    return GenesisDenom;
                })();
    
                return v1beta1;
            })();
    
            return tokenfactory;
        })();
    
        return osmosis;
    })();

    return $root;
});
